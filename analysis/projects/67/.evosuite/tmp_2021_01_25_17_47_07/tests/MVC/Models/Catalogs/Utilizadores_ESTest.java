/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 17:56:09 GMT 2021
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.Catalogs.Utilizadores;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizadores_ESTest extends Utilizadores_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.aceitaEncomendaUtilizador("Utilizadores: \n", "GPS: (", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.addEncomendaUtilizador("XWdEVWY?>", "u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.setDataUtilizadores((Map<String, Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizadores utilizadores0 = null;
      try {
        utilizadores0 = new Utilizadores((Map<String, Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizadores utilizadores0 = null;
      try {
        utilizadores0 = new Utilizadores((Utilizadores) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Map<String, Utilizador> map0 = utilizadores0.getDataUtilizadores();
      utilizadores0.setDataUtilizadores(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizadores utilizadores1 = new Utilizadores(utilizadores0);
      assertFalse(utilizadores1.equals((Object)utilizadores0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      boolean boolean0 = utilizadores0.existeUtilizador("2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.classificaEncomenda("l][*z", "Utilizadores: \n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizador utilizador0 = utilizadores0.getUtilizador("2");
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      utilizadores0.removeUtilizador("");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Map<String, Utilizador> map0 = utilizadores0.getDataUtilizadores();
      Utilizadores utilizadores1 = new Utilizadores(map0);
      assertFalse(utilizadores1.equals((Object)utilizadores0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizadores utilizadores1 = utilizadores0.clone();
      assertFalse(utilizadores1.equals((Object)utilizadores0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      String string0 = utilizadores0.toString();
      assertEquals("Utilizadores: \n[]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.addUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }
}
