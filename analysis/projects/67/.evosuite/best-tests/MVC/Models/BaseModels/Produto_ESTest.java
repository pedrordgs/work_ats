/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:30:16 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Produto;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Produto_ESTest extends Produto_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Produto produto0 = new Produto("\nProduto: ", "", (-1625.045854094352), true);
      boolean boolean0 = produto0.isMedicamento();
      assertTrue(boolean0);
      assertEquals("", produto0.getNome());
      assertEquals((-1625.045854094352), produto0.getPrecoPorQuant(), 0.01);
      assertEquals("\nProduto: ", produto0.getCod());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Produto produto0 = new Produto("6 q*9Rt/_q]M", "bFm", 1.0);
      double double0 = produto0.getPrecoPorQuant();
      assertEquals(1.0, double0, 0.01);
      assertFalse(produto0.isMedicamento());
      assertEquals("6 q*9Rt/_q]M", produto0.getCod());
      assertEquals("bFm", produto0.getNome());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Produto produto0 = new Produto((String) null, (String) null, 0.0);
      produto0.getNome();
      assertEquals(0.0, produto0.getPrecoPorQuant(), 0.01);
      assertFalse(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Produto produto0 = new Produto("", "", (-704.4761893602811));
      produto0.getNome();
      assertEquals((-704.4761893602811), produto0.getPrecoPorQuant(), 0.01);
      assertFalse(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Produto produto0 = new Produto((String) null, (String) null, 0.0, true);
      produto0.getCod();
      assertTrue(produto0.isMedicamento());
      assertEquals(0.0, produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Produto produto0 = new Produto("", "", 1570.36189257158);
      produto0.setCod("\nPreco por quantidade: ");
      produto0.getCod();
      assertFalse(produto0.isMedicamento());
      assertEquals(1570.36189257158, produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Produto produto0 = new Produto(",<znS&", ",<znS&", 0.0);
      assertFalse(produto0.isMedicamento());
      
      produto0.setMedicamento(true);
      produto0.clone();
      assertTrue(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Produto produto0 = new Produto(",<znS&", ",<znS&", 0.0);
      Produto produto1 = produto0.clone();
      assertEquals(0.0, produto0.getPrecoPorQuant(), 0.01);
      assertFalse(produto1.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Produto produto0 = new Produto("Yo3=e$RN8;UN>nvS?m_", "t$fBOb5-j-<A.G$", 1032.95, false);
      Produto produto1 = produto0.clone();
      assertEquals("t$fBOb5-j-<A.G$", produto1.getNome());
      assertFalse(produto1.isMedicamento());
      assertEquals("Yo3=e$RN8;UN>nvS?m_", produto1.getCod());
      assertEquals(1032.95, produto0.getPrecoPorQuant(), 0.01);
      assertEquals(1032.95, produto1.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Produto produto0 = null;
      try {
        produto0 = new Produto((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Produto", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Produto produto0 = new Produto("", "", 1570.36189257158);
      produto0.getCod();
      assertFalse(produto0.isMedicamento());
      assertEquals(1570.36189257158, produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Produto produto0 = new Produto("", "\nCodigo: ", (-1.0), false);
      String string0 = produto0.getNome();
      assertEquals("\nCodigo: ", string0);
      assertEquals((-1.0), produto0.getPrecoPorQuant(), 0.01);
      assertEquals("", produto0.getCod());
      assertFalse(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Produto produto0 = new Produto("", "", 1570.36189257158);
      boolean boolean0 = produto0.isMedicamento();
      assertFalse(boolean0);
      assertEquals(1570.36189257158, produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Produto produto0 = new Produto("D", "D", (-1499.591), true);
      double double0 = produto0.getPrecoPorQuant();
      assertEquals((-1499.591), double0, 0.01);
      assertTrue(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Produto produto0 = new Produto("", "", (-704.4761893602811));
      boolean boolean0 = produto0.equals("");
      assertFalse(produto0.isMedicamento());
      assertFalse(boolean0);
      assertEquals((-704.4761893602811), produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Produto produto0 = new Produto((String) null, "", 1.0, true);
      Produto produto1 = new Produto(produto0);
      // Undeclared exception!
      try { 
        produto1.equals(produto0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Produto produto0 = new Produto((String) null, "", 1.0, true);
      boolean boolean0 = produto0.equals(produto0);
      assertEquals(1.0, produto0.getPrecoPorQuant(), 0.01);
      assertTrue(boolean0);
      assertTrue(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Produto produto0 = new Produto("", "", (-704.4761893602811));
      boolean boolean0 = produto0.equals((Object) null);
      assertFalse(produto0.isMedicamento());
      assertFalse(boolean0);
      assertEquals((-704.4761893602811), produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Produto produto0 = new Produto("", "", 1570.36189257158);
      String string0 = produto0.toString();
      assertEquals("\nCodigo: \nProduto: \nPreco por quantidade: 1570.36189257158", string0);
      assertFalse(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Produto produto0 = new Produto();
      double double0 = produto0.getPrecoPorQuant();
      assertEquals(0.0, double0, 0.01);
      assertFalse(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Produto produto0 = new Produto("", "", (-704.4761893602811));
      produto0.setNome("");
      assertEquals((-704.4761893602811), produto0.getPrecoPorQuant(), 0.01);
      assertFalse(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Produto produto0 = new Produto("", "", (-704.4761893602811));
      Produto produto1 = produto0.clone();
      assertEquals((-704.4761893602811), produto0.getPrecoPorQuant(), 0.01);
      assertFalse(produto1.isMedicamento());
      assertEquals((-704.4761893602811), produto1.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Produto produto0 = new Produto("", "", (-704.4761893602811));
      produto0.setPrecoPorQuant((-704.4761893602811));
      assertEquals((-704.4761893602811), produto0.getPrecoPorQuant(), 0.01);
      assertFalse(produto0.isMedicamento());
  }
}
