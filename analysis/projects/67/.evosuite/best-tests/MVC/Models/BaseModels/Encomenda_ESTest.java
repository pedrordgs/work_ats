/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:26:28 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.LinhaEncomenda;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.setDistancia((-2654.410808));
      encomenda0.existeProdutoEncomenda("@lds_k*$");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setCodEntregador(" , Quantidade: ");
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.numeroTotalProdutos();
      encomenda0.setPreco(730.9693);
      encomenda1.setDistancia((-2654.410808));
      encomenda1.getLinhas();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((-2008.3631719975133)).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn(1.0, 0.0).when(linhaEncomenda0).getQuantidade();
      doReturn(" , Quantidade: ").when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((-202.6004957488)).when(linhaEncomenda2).calculaValorLinhaEnc();
      doReturn(705.56, (-202.6004957488)).when(linhaEncomenda2).getQuantidade();
      doReturn(" , Quantidade: ").when(linhaEncomenda2).toString();
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda2).when(linhaEncomenda3).clone();
      encomenda1.adicionaLinha(linhaEncomenda3);
      encomenda1.adicionaLinha(linhaEncomenda1);
      encomenda1.numeroTotalProdutos();
      encomenda1.setClassificacao(0);
      encomenda1.numeroTotalProdutos();
      encomenda1.calculaValorTotal();
      encomenda1.toString();
      encomenda0.getPeso();
      encomenda0.equals("@lds_k*$");
      encomenda0.numeroTotalProdutos();
      encomenda0.setMedica((Boolean) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(1388.7794662783706).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn(1.0).when(linhaEncomenda0).getQuantidade();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(1388.7794662783706).when(linhaEncomenda2).calculaValorLinhaEnc();
      doReturn(1388.7794662783706).when(linhaEncomenda2).getQuantidade();
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda2).when(linhaEncomenda3).clone();
      encomenda0.adicionaLinha(linhaEncomenda3);
      encomenda0.setCodEntregador("`@NKf[AfcsTob\"6/");
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.setDistancia((-1272.4734737257731));
      encomenda0.setDuracao(137.1);
      encomenda0.calculaValorTotal();
      LinhaEncomenda linhaEncomenda4 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda4).clone();
      encomenda0.adicionaLinha(linhaEncomenda4);
      // Undeclared exception!
      try { 
        encomenda0.numeroTotalProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setDistancia(1887.62186443053);
      Encomenda encomenda1 = new Encomenda(" min", "0!xbdf7+V", "", (-1195.3171), list0);
      encomenda0.setClassificacao(519);
      encomenda1.existeProdutoEncomenda((String) null);
      encomenda1.getPeso();
      encomenda0.getClassificacao();
      encomenda1.equals(encomenda1);
      Encomenda encomenda2 = new Encomenda((String) null, " min", "", 1887.62186443053, list0);
      encomenda1.setCodEntregador("");
      encomenda1.getClassificacao();
      encomenda0.getClassificacao();
      encomenda2.getLinhas();
      encomenda2.getMedica();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn((LinhaEncomenda) null, (LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn((String) null).when(linhaEncomenda0).getCodigo();
      doReturn(0.0).when(linhaEncomenda0).getQuantidade();
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn(1445.813728).when(linhaEncomenda1).getQuantidade();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda1).when(linhaEncomenda2).clone();
      encomenda0.adicionaLinha(linhaEncomenda2);
      encomenda0.numeroTotalProdutos();
      encomenda0.setClassificacao(1445);
      encomenda0.setDuracao(0.0);
      encomenda0.setCodEntregador("\nC\u00F3digo Encomenda: ");
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda0.existeProdutoEncomenda("\nC\u00F3digo Encomenda: ");
      encomenda0.setPreco(1445);
      encomenda0.calculaValorTotal();
      encomenda0.setCodEntregador("");
      encomenda0.setClassificacao(0);
      encomenda0.calculaValorTotal();
      encomenda0.numeroTotalProdutos();
      encomenda0.setPreco(0.0);
      encomenda0.setCodEntregador("");
      encomenda0.getMedica();
      encomenda0.getDuracao();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.getCodEntregador();
      encomenda0.getLinhas();
      encomenda0.calculaValorTotal();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.getPreco();
      Encomenda encomenda1 = encomenda0.clone();
      Encomenda encomenda2 = encomenda0.clone();
      encomenda1.setDuracao(2012.9201174539412);
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda2).clone();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda0.adicionaLinha(linhaEncomenda2);
      encomenda2.setLinhas(list0);
      encomenda0.getDistancia();
      encomenda1.getDuracao();
      // Undeclared exception!
      try { 
        encomenda1.existeProdutoEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn(0.0).when(linhaEncomenda0).getQuantidade();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.numeroTotalProdutos();
      encomenda0.setClassificacao(0);
      encomenda0.setDuracao(0.0);
      encomenda0.setCodEntregador("\nC\u00F3digo Encomenda: ");
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda0.setPreco(0);
      // Undeclared exception!
      try { 
        encomenda0.calculaValorTotal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.getLinhas();
      encomenda0.toString();
      encomenda0.setCodEntregador("/kv");
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn((String) null, (String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      Encomenda encomenda2 = encomenda1.clone();
      Boolean boolean0 = encomenda1.getMedica();
      encomenda1.setMedica(boolean0);
      encomenda0.getPreco();
      encomenda1.getLinhas();
      encomenda0.setCodEntregador("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda0.setCodEntregador("/kv");
      encomenda0.toString();
      encomenda1.getDuracao();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda2).getCodigo();
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda2).when(linhaEncomenda3).clone();
      encomenda1.adicionaLinha(linhaEncomenda3);
      encomenda0.getLinhas();
      encomenda0.getLinhas();
      encomenda1.getPeso();
      encomenda1.setDuracao(1.0);
      encomenda0.getLinhas();
      encomenda2.getCodEnc();
      encomenda2.getMedica();
      encomenda1.getCodEntregador();
      encomenda2.existeProdutoEncomenda("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: [Mock for LinhaEncomenda, hashCode: 2018068925]\nCodigo do Entregador: /kv\nClassificacao:0}\n");
      encomenda1.getCodUser();
      encomenda1.setMedica(boolean0);
      encomenda2.numeroTotalProdutos();
      encomenda2.getDistancia();
      encomenda0.toString();
      encomenda1.existeProdutoEncomenda("");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia(0.0);
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("}\n", "", "}\n", 0.0, list0);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.numeroTotalProdutos();
      encomenda0.setDistancia(0.0);
      Encomenda encomenda3 = encomenda1.clone();
      encomenda1.getLinhas();
      encomenda1.setLinhas(list0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda0).getCodigo();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      Encomenda encomenda4 = new Encomenda(encomenda1);
      encomenda4.toString();
      encomenda4.numeroTotalProdutos();
      encomenda4.getDuracao();
      encomenda3.getPeso();
      encomenda3.getCodUser();
      encomenda4.getCodEntregador();
      encomenda3.setCodEntregador("");
      encomenda0.setClassificacao(0);
      encomenda3.getPreco();
      encomenda4.getPreco();
      encomenda0.setClassificacao(0);
      encomenda0.existeProdutoEncomenda("");
      encomenda2.getCodEntregador();
      encomenda3.getPreco();
      encomenda0.getCodEntregador();
      encomenda2.getLinhas();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.existeProdutoEncomenda((String) null);
      encomenda0.setDistancia(2603.847561637641);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.numeroTotalProdutos();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.setCodEntregador("");
      encomenda0.getCodUser();
      encomenda0.setDuracao((-1074.0));
      encomenda0.getDuracao();
      encomenda0.setPreco((-1074.0));
      encomenda0.getCodUser();
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda0.getCodEnc();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn(0.0).when(linhaEncomenda0).getQuantidade();
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(linhaEncomenda2).calculaValorLinhaEnc();
      doReturn(0.0).when(linhaEncomenda2).getQuantidade();
      doReturn((String) null).when(linhaEncomenda2).toString();
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda2).when(linhaEncomenda3).clone();
      encomenda0.adicionaLinha(linhaEncomenda3);
      encomenda0.getClassificacao();
      encomenda0.getPeso();
      encomenda0.getPreco();
      encomenda0.setCodEntregador("e+Kr|S");
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.numeroTotalProdutos();
      Boolean boolean1 = encomenda0.getMedica();
      encomenda0.setMedica(boolean1);
      encomenda0.calculaValorTotal();
      encomenda0.toString();
      encomenda0.getMedica();
      Boolean boolean2 = encomenda0.getMedica();
      encomenda0.setMedica(boolean2);
      encomenda0.getDuracao();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.calculaValorTotal();
      encomenda0.setCodEntregador((String) null);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.getPreco();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Boolean boolean1 = encomenda0.getMedica();
      encomenda0.setMedica(boolean1);
      Boolean boolean2 = encomenda0.getMedica();
      encomenda0.setMedica(boolean2);
      encomenda0.getDistancia();
      encomenda0.setPreco(0.0);
      encomenda0.getCodUser();
      encomenda0.getPreco();
      encomenda0.setCodEntregador((String) null);
      encomenda0.getCodEntregador();
      encomenda0.numeroTotalProdutos();
      encomenda0.getDuracao();
      encomenda0.setPreco((-0.6060983086));
      encomenda0.setDistancia(0.0);
      encomenda0.setDuracao(1.0);
      encomenda0.getDistancia();
      encomenda0.setLinhas(list0);
      encomenda0.numeroTotalProdutos();
      encomenda0.numeroTotalProdutos();
      encomenda0.calculaValorTotal();
      encomenda0.setClassificacao(0);
      Boolean boolean3 = encomenda0.getMedica();
      encomenda0.setMedica(boolean3);
      encomenda0.getClassificacao();
      encomenda0.setDuracao(0.0);
      encomenda0.getDuracao();
      encomenda0.getCodLoja();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("=d_`}gh8S`N", "=d_`}gh8S`N", "[2+-Eq%:^QY\"EQl<?;?", (-1050.1481), list0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.setPreco(1.0);
      encomenda2.getPreco();
      encomenda1.getPreco();
      encomenda0.getCodUser();
      encomenda2.getDuracao();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      encomenda1.adicionaLinha(linhaEncomenda1);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda2.getMedica();
      encomenda2.getLinhas();
      encomenda0.toString();
      encomenda1.setCodEntregador("sNjX.{^0)'Qe+=v1");
      encomenda1.getPreco();
      encomenda1.getCodEnc();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 0.0;
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda(";c3k!I)c$,<#L", ";c3k!I)c$,<#L", ";c3k!I)c$,<#L", 0.0, list0);
      Boolean boolean0 = encomenda1.getMedica();
      encomenda1.setMedica(boolean0);
      encomenda1.getCodEnc();
      encomenda0.equals((Object) null);
      encomenda0.getPreco();
      encomenda0.getCodLoja();
      encomenda1.setMedica((Boolean) null);
      encomenda0.existeProdutoEncomenda(";c3k!I)c$,<#L");
      encomenda1.equals(list0);
      encomenda0.setMedica((Boolean) null);
      encomenda1.setDistancia(0.0);
      encomenda0.setCodEntregador(";c3k!I)c$,<#L");
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      encomenda1.calculaValorTotal();
      encomenda0.getCodEnc();
      encomenda0.getMedica();
      int int0 = (-1325);
      encomenda0.setClassificacao((-1325));
      encomenda1.clone();
      // Undeclared exception!
      try { 
        encomenda0.numeroTotalProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.calculaValorTotal();
      encomenda0.toString();
      encomenda0.setDistancia(1.0);
      Encomenda encomenda2 = new Encomenda(encomenda0);
      encomenda2.calculaValorTotal();
      encomenda2.toString();
      encomenda2.getClassificacao();
      encomenda1.setPreco(0.0);
      Encomenda encomenda3 = encomenda2.clone();
      encomenda3.clone();
      List<LinhaEncomenda> list0 = encomenda3.getLinhas();
      encomenda3.setLinhas(list0);
      encomenda2.setLinhas(list0);
      encomenda2.getPeso();
      encomenda0.equals(encomenda1);
      encomenda2.getCodUser();
      List<LinhaEncomenda> list1 = encomenda0.getLinhas();
      encomenda0.getDistancia();
      encomenda1.numeroTotalProdutos();
      encomenda2.getPeso();
      encomenda0.setClassificacao(1823);
      encomenda2.getCodEntregador();
      encomenda1.getCodEntregador();
      encomenda3.setLinhas(list1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodEntregador((String) null);
      encomenda0.getLinhas();
      encomenda0.getCodUser();
      encomenda0.getDistancia();
      encomenda0.getLinhas();
      encomenda0.getLinhas();
      encomenda0.setDistancia((-218.222753));
      encomenda0.getLinhas();
      encomenda0.setDuracao((-218.222753));
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setClassificacao((-401));
      encomenda1.setClassificacao(1);
      encomenda0.numeroTotalProdutos();
      encomenda0.getDistancia();
      encomenda0.toString();
      encomenda0.numeroTotalProdutos();
      encomenda1.setDistancia(1922.17365721);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("MVC.Models.BaseModels.LinhaEncomenda", "MVC.Models.BaseModels.LinhaEncomenda", "\nDuracao: ", (-1.0), list0);
      encomenda1.getCodUser();
      encomenda0.setLinhas(list0);
      encomenda1.setLinhas(list0);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.setCodEntregador("MVC.Models.BaseModels.LinhaEncomenda");
      encomenda1.setDistancia((-1.0));
      encomenda0.getMedica();
      encomenda2.getPreco();
      encomenda0.getClassificacao();
      encomenda2.getCodEntregador();
      encomenda0.setPreco(0.0);
      encomenda0.getDistancia();
      encomenda0.getMedica();
      encomenda0.setCodEntregador("Ui,4aO66");
      Boolean boolean0 = encomenda0.getMedica();
      encomenda1.setMedica(boolean0);
      encomenda2.setClassificacao(0);
      encomenda0.getDuracao();
      encomenda0.getDistancia();
      encomenda2.setClassificacao(0);
      encomenda2.getLinhas();
      encomenda2.setDuracao((-1.0));
      encomenda2.getCodEnc();
      encomenda2.getDuracao();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, (String) null, 0.0, list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.numeroTotalProdutos();
      encomenda2.setLinhas(list0);
      encomenda0.setPreco(60.0);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda1.toString();
      encomenda1.setDuracao(60.0);
      encomenda2.setDistancia(0.0);
      encomenda2.setMedica(boolean0);
      Encomenda encomenda3 = encomenda2.clone();
      encomenda0.getDuracao();
      encomenda3.getCodLoja();
      encomenda0.numeroTotalProdutos();
      Boolean boolean1 = encomenda3.getMedica();
      encomenda1.setMedica(boolean1);
      encomenda0.getCodEnc();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      Encomenda encomenda1 = new Encomenda("h :", (String) null, "jBkh=Cf }}/,", 0.0, list0);
      encomenda1.setCodEntregador("jBkh=Cf }}/,");
      encomenda0.getPreco();
      encomenda1.getCodEntregador();
      encomenda1.setCodEntregador("jBkh=Cf }}/,");
      List<LinhaEncomenda> list1 = encomenda1.getLinhas();
      encomenda1.setClassificacao((-1));
      encomenda0.getPeso();
      encomenda1.getPreco();
      encomenda0.setLinhas(list1);
      encomenda1.setClassificacao(1641);
      encomenda1.toString();
      encomenda0.calculaValorTotal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("tY50*)rR#'wD", "%.2f", "tY50*)rR#'wD", (-894.0), list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.getPeso();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda(" :qIlol`", " , Quantidade: ", " :qIlol`", 301.664055284, list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.getCodUser();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setCodEntregador("iCc,^pMIa$");
      Encomenda encomenda1 = new Encomenda("", "", "", 0.0, list0);
      encomenda1.setLinhas(list0);
      encomenda1.toString();
      encomenda1.calculaValorTotal();
      encomenda1.getPeso();
      encomenda1.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda1.getLinhas();
      encomenda1.getCodUser();
      encomenda0.setDuracao((-1.0));
      encomenda1.getDuracao();
      encomenda1.toString();
      Encomenda encomenda2 = encomenda0.clone();
      encomenda0.setPreco(0.0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda2.adicionaLinha(linhaEncomenda0);
      encomenda1.getClassificacao();
      encomenda2.getMedica();
      // Undeclared exception!
      try { 
        encomenda2.existeProdutoEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      // Undeclared exception!
      try { 
        encomenda0.existeProdutoEncomenda("g#dx7od");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, (String) null, 0.0, list0);
      encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda(encomenda1);
      Encomenda encomenda3 = encomenda2.clone();
      encomenda1.calculaValorTotal();
      encomenda0.setCodEntregador("bQO(:tG@+mH$OS~JQ");
      encomenda3.calculaValorTotal();
      Encomenda encomenda4 = encomenda0.clone();
      encomenda2.setCodEntregador((String) null);
      encomenda0.getDuracao();
      encomenda1.getCodEnc();
      encomenda2.getCodUser();
      encomenda4.getCodLoja();
      Boolean boolean0 = encomenda4.getMedica();
      encomenda1.setMedica(boolean0);
      encomenda3.existeProdutoEncomenda("-yqK/<9'I0QJ1$/");
      encomenda4.getPreco();
      encomenda3.getPeso();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.calculaValorTotal();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "", ".Y", 0.0, list0);
      List<LinhaEncomenda> list1 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("=2", "", ".Y", 0.0, list1);
      encomenda0.setClassificacao((-1344));
      Boolean boolean0 = encomenda2.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.toString();
      encomenda0.clone();
      encomenda0.setClassificacao((-3954));
      encomenda2.setPreco(0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.setCodEntregador("");
      // Undeclared exception!
      try { 
        encomenda0.getLinhas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "nD<xEPa?b UR/'8r";
      String string1 = "MVC.Models.BaseModels.Encomenda";
      double double0 = 0.0;
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getLinhas();
      encomenda0.numeroTotalProdutos();
      encomenda1.setPreco(0.0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda1.adicionaLinha(linhaEncomenda0);
      Encomenda encomenda2 = null;
      try {
        encomenda2 = new Encomenda(encomenda1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao(486.13555081855);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.toString();
      encomenda1.setClassificacao(0);
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda1.getMedica();
      encomenda0.getClassificacao();
      encomenda1.numeroTotalProdutos();
      List<LinhaEncomenda> list1 = encomenda1.getLinhas();
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.setLinhas(list1);
      encomenda0.setDuracao(0.0);
      encomenda0.calculaValorTotal();
      encomenda2.calculaValorTotal();
      encomenda0.setLinhas(list0);
      encomenda2.getCodLoja();
      encomenda0.setDuracao(486.13555081855);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      // Undeclared exception!
      try { 
        encomenda0.numeroTotalProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("fm4pf9U%Jf", "", "", 1175.44009947, list0);
      encomenda2.getDuracao();
      encomenda1.getDuracao();
      Encomenda encomenda3 = encomenda2.clone();
      encomenda3.numeroTotalProdutos();
      Boolean boolean0 = encomenda2.getMedica();
      encomenda3.setMedica(boolean0);
      encomenda3.getDuracao();
      encomenda1.setLinhas(list0);
      encomenda2.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.toString();
      Encomenda encomenda1 = new Encomenda("AD8.`Tq", "1*VmD]A", "AD8.`Tq", 780.286914, list0);
      encomenda0.calculaValorTotal();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda1.setMedica(boolean0);
      encomenda0.numeroTotalProdutos();
      encomenda0.setDistancia((-1.0));
      encomenda0.getDuracao();
      encomenda0.numeroTotalProdutos();
      encomenda1.getPeso();
      encomenda0.getDuracao();
      encomenda1.getPeso();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodEntregador("");
      encomenda0.setPreco(1.0);
      encomenda0.getCodLoja();
      encomenda0.setClassificacao(0);
      encomenda0.toString();
      encomenda0.equals("");
      encomenda0.equals("{W^,=0tM*=9.~T=8h");
      encomenda0.toString();
      encomenda0.existeProdutoEncomenda("");
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setDistancia(1.0);
      encomenda0.getPeso();
      encomenda1.getCodEnc();
      encomenda0.getClassificacao();
      encomenda0.getDistancia();
      encomenda0.calculaValorTotal();
      encomenda1.setCodEntregador("");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = encomenda0.clone();
      Encomenda encomenda2 = new Encomenda("\nClassificacao:", "\nClassificacao:", "-Czh)::zEAo3s3b:9xK", (-33.7765155), list0);
      Encomenda encomenda3 = new Encomenda(encomenda2);
      encomenda3.getCodLoja();
      encomenda3.equals("-Czh)::zEAo3s3b:9xK");
      encomenda0.setCodEntregador("\nClassificacao:");
      encomenda2.setDistancia((-33.7765155));
      encomenda0.setClassificacao((-2137));
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda1.adicionaLinha(linhaEncomenda0);
      double double0 = 0.0;
      encomenda2.setCodEntregador("\nClassificacao:");
      encomenda1.setDuracao((-81.7507002));
      encomenda0.setPreco(0.0);
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.getClassificacao();
      encomenda0.setLinhas(list0);
      // Undeclared exception!
      try { 
        encomenda1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia(0.0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      Encomenda encomenda1 = null;
      try {
        encomenda1 = new Encomenda(encomenda0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setClassificacao(209);
      encomenda1.clone();
      Encomenda encomenda2 = null;
      try {
        encomenda2 = new Encomenda("", "", ":,q1", 209, (List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.existeProdutoEncomenda("");
      encomenda0.setDuracao(0.0);
      encomenda0.setDistancia(0.0);
      encomenda0.setDuracao(962.3731266079905);
      encomenda0.existeProdutoEncomenda("");
      encomenda0.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "qBtNEj8zuWtG`8gt";
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getLinhas();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("qBtNEj8zuWtG`8gt", "qBtNEj8zuWtG`8gt", "qBtNEj8zuWtG`8gt", 0.0, list0);
      encomenda1.setLinhas(list0);
      encomenda1.calculaValorTotal();
      encomenda1.calculaValorTotal();
      encomenda1.setPreco(0.0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda1.adicionaLinha(linhaEncomenda0);
      encomenda0.getLinhas();
      encomenda1.getCodEntregador();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      // Undeclared exception!
      try { 
        encomenda1.calculaValorTotal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda(";93ky4o,LMoSf[8&-", ";93ky4o,LMoSf[8&-", ";93ky4o,LMoSf[8&-", (-999.3464266), list0);
      encomenda2.equals(list0);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda1.setMedica(boolean0);
      encomenda2.setDistancia(0.0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda2.adicionaLinha(linhaEncomenda0);
      // Undeclared exception!
      try { 
        encomenda2.calculaValorTotal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getLinhas();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, "\nCodigo do Entregador: ", (String) null, 0.0, list0);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.setCodEntregador("Encomenda{");
      encomenda1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.setMedica(boolean0);
      encomenda1.setPreco((-1.0));
      encomenda0.setCodEntregador((String) null);
      encomenda1.setCodEntregador((String) null);
      encomenda1.clone();
      encomenda1.clone();
      encomenda0.getCodUser();
      encomenda1.getPreco();
      encomenda0.getPeso();
      encomenda1.numeroTotalProdutos();
      encomenda1.numeroTotalProdutos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setDistancia(1887.62186443053);
      Encomenda encomenda1 = new Encomenda(" min", "0!xbdf7+V", "", (-1195.3171), list0);
      Encomenda encomenda2 = encomenda0.clone();
      encomenda0.setClassificacao(519);
      encomenda1.existeProdutoEncomenda((String) null);
      encomenda2.getPeso();
      encomenda0.getClassificacao();
      encomenda2.equals(encomenda1);
      encomenda2.clone();
      encomenda1.setCodEntregador("");
      encomenda1.getClassificacao();
      encomenda0.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda(" , Valor Unit\u00E1rio: ", (String) null, "Hfpl>yx1[", 0.0, list0);
      encomenda0.numeroTotalProdutos();
      encomenda1.setDistancia((-1.0));
      encomenda1.setDuracao((-826.66));
      encomenda0.getLinhas();
      encomenda1.getCodEntregador();
      encomenda0.setCodEntregador("Hfpl>yx1[");
      encomenda0.setLinhas(list0);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda0.setCodEntregador("");
      encomenda2.numeroTotalProdutos();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "n7U_M\"e$pV", "x3jT.fGt6X9 ?$'8e", 0.0, list0);
      encomenda1.getCodEnc();
      encomenda1.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco((-1.0));
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda(" , Quantidade: ", " , Quantidade: ", " , Quantidade: ", (-622.812949), list0);
      encomenda2.clone();
      encomenda2.numeroTotalProdutos();
      encomenda2.setDistancia((-853.3382243762387));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("]O", "", "", (-195.292769244452), list0);
      encomenda1.toString();
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.getLinhas();
      encomenda0.calculaValorTotal();
      encomenda1.existeProdutoEncomenda("has4");
      encomenda1.getCodEnc();
      encomenda2.getCodUser();
      encomenda2.getCodEnc();
      encomenda1.getCodEntregador();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("\nCodigo do Entregador: ", "", "", 980.0, list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.setDuracao(980.0);
      encomenda1.getDuracao();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getCodEnc();
      encomenda0.calculaValorTotal();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.getLinhas();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("l>r-gO^;I,", "l>r-gO^;I,", "l>r-gO^;I,", (-52.6353203002), list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.getCodLoja();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao(0.0);
      encomenda0.existeProdutoEncomenda("./)j\"]TWaA$_iZMWzWC");
      encomenda0.getCodEnc();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = null;
      double double0 = 0.0;
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda((String) null, (String) null, "", 0.0, list0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda1.adicionaLinha(linhaEncomenda0);
      Boolean boolean0 = encomenda2.getMedica();
      encomenda0.setMedica(boolean0);
      Encomenda encomenda3 = new Encomenda((String) null, "", (String) null, 0.0, list0);
      encomenda3.setPreco(0.0);
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      encomenda1.adicionaLinha(linhaEncomenda1);
      encomenda3.setCodEntregador("");
      encomenda1.setDuracao(0.0);
      encomenda3.setDistancia(0.0);
      // Undeclared exception!
      try { 
        encomenda1.numeroTotalProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.numeroTotalProdutos();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getPreco();
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda1.equals(encomenda2);
      encomenda1.getCodLoja();
      List<LinhaEncomenda> list0 = encomenda2.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda2.setCodEntregador("");
      encomenda0.getCodLoja();
      encomenda0.setLinhas(list0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Boolean boolean0 = null;
      encomenda1.setMedica((Boolean) null);
      String string0 = " , Quantidade: ";
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda1.adicionaLinha(linhaEncomenda0);
      // Undeclared exception!
      try { 
        encomenda1.numeroTotalProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.equals("1?$7o$2P!");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.existeProdutoEncomenda("d]w3db_w&H-");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getLinhas();
      encomenda1.getDistancia();
      encomenda0.getMedica();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("P'IuN<zEzbCmQ @", "I!S]", "Encomenda{", 0.0, list0);
      encomenda2.getDuracao();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.numeroTotalProdutos();
      encomenda0.setDuracao(0.0);
      encomenda0.existeProdutoEncomenda("@kdI@?z6)>itW+5");
      encomenda0.calculaValorTotal();
      // Undeclared exception!
      try { 
        encomenda0.setLinhas((List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getCodEnc();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.setPreco(0.0);
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.setClassificacao(0);
      Boolean boolean0 = encomenda2.getMedica();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda1.adicionaLinha(linhaEncomenda0);
      encomenda1.setMedica(boolean0);
      encomenda0.getMedica();
      encomenda0.getCodEnc();
      int int0 = 2931;
      encomenda0.setClassificacao(2931);
      encomenda1.setDistancia(2931);
      encomenda1.setLinhas(list0);
      encomenda1.getCodLoja();
      encomenda1.getMedica();
      // Undeclared exception!
      try { 
        encomenda0.adicionaLinha((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda("", "", "", 1267.932352947967, (List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.numeroTotalProdutos();
      encomenda0.getPeso();
      encomenda0.getPreco();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setDuracao(1995.5063348661);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setClassificacao(0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      String string0 = "";
      encomenda1.existeProdutoEncomenda("");
      // Undeclared exception!
      try { 
        encomenda1.adicionaLinha((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getCodUser();
      encomenda0.existeProdutoEncomenda("");
      encomenda0.setCodEntregador("");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getPeso();
      encomenda0.toString();
      Boolean boolean0 = encomenda1.getMedica();
      encomenda1.setMedica(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "", "('X^y.zdz", 0.0, list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.setPreco(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "", "", (-70.1), list0);
      encomenda1.getCodLoja();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda("Z4,i$", "Z4,i$", "Z4,i$", 0.0, (List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.setDistancia((-2654.410808));
      encomenda0.existeProdutoEncomenda("@lds_k*$");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setCodEntregador(" , Quantidade: ");
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.numeroTotalProdutos();
      encomenda2.numeroTotalProdutos();
      encomenda0.setPreco(730.9693);
      encomenda1.setDistancia((-2654.410808));
      encomenda1.getLinhas();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn(0.0, 0.0).when(linhaEncomenda0).getQuantidade();
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(linhaEncomenda2).calculaValorLinhaEnc();
      doReturn(0.0, 0.0).when(linhaEncomenda2).getQuantidade();
      doReturn((String) null).when(linhaEncomenda2).toString();
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda2).when(linhaEncomenda3).clone();
      encomenda1.adicionaLinha(linhaEncomenda3);
      encomenda1.adicionaLinha(linhaEncomenda1);
      encomenda1.numeroTotalProdutos();
      encomenda1.setClassificacao(0);
      encomenda1.numeroTotalProdutos();
      encomenda1.calculaValorTotal();
      encomenda1.toString();
      encomenda0.getPeso();
      encomenda0.equals("@lds_k*$");
      encomenda0.numeroTotalProdutos();
      encomenda0.setMedica((Boolean) null);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.calculaValorTotal();
      encomenda0.getLinhas();
      encomenda0.existeProdutoEncomenda("\nPeso: ");
      encomenda0.setDistancia(0.0);
      encomenda0.existeProdutoEncomenda("MVC.Models.BaseModels.LinhaEncomenda");
      encomenda0.equals((Object) null);
      encomenda0.toString();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("EIw>spde pq!@1<,?", "EIw>spde pq!@1<,?", "EIw>spde pq!@1<,?", (-1240.4414344675), list0);
      encomenda1.setLinhas(list0);
      encomenda0.calculaValorTotal();
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.setLinhas(list0);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda1.getCodUser();
      encomenda1.getPreco();
      encomenda1.setDuracao(0.0);
      encomenda1.getDistancia();
      encomenda0.getDistancia();
      encomenda2.getLinhas();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("+[sC.(:r}}#VR1Z", "", " , Quantidade: ", (-1.0), list0);
      encomenda2.getDuracao();
      encomenda2.setDistancia(0.0);
      encomenda0.toString();
      encomenda1.setPreco(0.0);
      encomenda0.setPreco(0.0);
      encomenda0.getDuracao();
      encomenda0.getCodUser();
      encomenda2.setLinhas(list0);
      encomenda2.getLinhas();
      encomenda0.getLinhas();
      encomenda2.setCodEntregador((String) null);
      encomenda1.getDistancia();
      encomenda2.getCodEnc();
      Encomenda encomenda3 = new Encomenda();
      encomenda0.equals(encomenda3);
      encomenda2.clone();
      encomenda2.setPreco(0.0);
      encomenda3.clone();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setDistancia(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn("").when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linhaEncomenda1).toString();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda2).toString();
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(2558.25345, (-18.70189108)).when(linhaEncomenda3).calculaValorLinhaEnc();
      doReturn(linhaEncomenda0, linhaEncomenda1, linhaEncomenda2).when(linhaEncomenda3).clone();
      doReturn("wSkB]AxlsI0%`xU").when(linhaEncomenda3).getCodigo();
      doReturn(2558.25345, 1.0).when(linhaEncomenda3).getQuantidade();
      LinhaEncomenda linhaEncomenda4 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda3).when(linhaEncomenda4).clone();
      encomenda0.adicionaLinha(linhaEncomenda4);
      encomenda0.numeroTotalProdutos();
      encomenda0.setClassificacao(2558);
      encomenda0.setDuracao(0.0);
      encomenda0.setCodEntregador("\nC\u00F3digo Encomenda: ");
      encomenda0.getLinhas();
      encomenda0.setPreco(2558);
      encomenda0.existeProdutoEncomenda("wSkB]AxlsI0%`xU");
      encomenda0.calculaValorTotal();
      encomenda0.setCodEntregador("");
      encomenda0.setClassificacao(0);
      encomenda0.calculaValorTotal();
      encomenda0.numeroTotalProdutos();
      encomenda0.setPreco(0.0);
      encomenda0.setCodEntregador("");
      encomenda0.getMedica();
      encomenda0.getDuracao();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.getCodEntregador();
      encomenda0.getLinhas();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Boolean boolean0 = encomenda1.getMedica();
      encomenda0.setDistancia(0.1398249758177118);
      encomenda1.setMedica(boolean0);
      encomenda1.toString();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.1398249758177118).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn("G(jL*wPiv<").when(linhaEncomenda0).getCodigo();
      doReturn("G(jL*wPiv<").when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda1.adicionaLinha(linhaEncomenda1);
      encomenda1.toString();
      encomenda1.getPreco();
      encomenda0.getCodEnc();
      encomenda1.existeProdutoEncomenda(":+:j(d&p/u.");
      encomenda1.calculaValorTotal();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda1.getCodEnc();
      encomenda1.setLinhas(list0);
      encomenda1.getDuracao();
      encomenda0.toString();
      assertEquals(0.1398249758177118, encomenda0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn((String) null).when(linhaEncomenda0).getCodigo();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.existeProdutoEncomenda("g#dx7od");
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda2).clone();
      encomenda0.adicionaLinha(linhaEncomenda2);
      encomenda0.setClassificacao(3605);
      encomenda0.setDistancia(1787.0);
      // Undeclared exception!
      try { 
        encomenda0.calculaValorTotal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }
}
