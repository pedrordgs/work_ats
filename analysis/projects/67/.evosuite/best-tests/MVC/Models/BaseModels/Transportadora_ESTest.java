/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:32:39 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Classificacao;
import MVC.Models.BaseModels.Transportadora;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadora_ESTest extends Transportadora_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", (-4321.34024), (-4321.34024), "", (-4321.34024), 2277.9891683, (-1377));
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getCod());
      assertEquals((-4321.34024), transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      assertEquals((-1377), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(2277.9891683, transportadora0.getPrecoKm(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
      
      transportadora0.incCapacidade();
      assertEquals("", transportadora0.getCod());
      assertEquals((-4321.34024), transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      assertEquals((-1376), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(2277.9891683, transportadora0.getPrecoKm(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getName());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getCod());
      
      double double0 = transportadora0.getVelocidadeMed();
      assertEquals(0.0, double0, 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getCod());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("MVC.Models.BaseModels.VoluntarioMed", "MVC.Models.BaseModels.VoluntarioMed", 1374.7387, (-3950.12823978283), "MVC.Models.BaseModels.VoluntarioMed", 0.0, 1374.7387, 505);
      assertNotNull(transportadora0);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getNif());
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(505, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1374.7387, transportadora0.getPrecoKm(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      transportadora0.setVelocidadeMed((-1241.623612570496));
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getNif());
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(505, transportadora0.getCapacidade());
      assertEquals((-1241.623612570496), transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getName());
      assertEquals(1374.7387, transportadora0.getPrecoKm(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      double double0 = transportadora0.getVelocidadeMed();
      assertEquals((-1241.623612570496), double0, 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getNif());
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(505, transportadora0.getCapacidade());
      assertEquals((-1241.623612570496), transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getName());
      assertEquals(1374.7387, transportadora0.getPrecoKm(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 1.0, 1.0, "\nKms Total: ", 1.0, 1091.407823, 0);
      assertNotNull(transportadora0);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getCod());
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(1091.407823, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals("", transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      
      double double0 = transportadora0.getRaio();
      assertEquals(1.0, double0, 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getCod());
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(1091.407823, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals("", transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("\n}", "", 0.0, 0.0, "", (-4429.7), 0.0);
      assertNotNull(transportadora0);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("\n}", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("\n}", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
      assertEquals((-4429.7), transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      
      double double0 = transportadora0.getRaio();
      assertEquals((-4429.7), double0, 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("\n}", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("\n}", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
      assertEquals((-4429.7), transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("\n}", "", 0.0, 0.0, "", (-4429.7), 0.0);
      assertNotNull(transportadora0);
      assertEquals("\n}", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("\n}", transportadora0.getPass());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals((-4429.7), transportadora0.getRaio(), 0.01);
      
      double double0 = transportadora0.getPrecoKm();
      assertEquals(0.0, double0, 0.01);
      assertEquals("\n}", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("\n}", transportadora0.getPass());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals((-4429.7), transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("hjDm", "hjDm", (-4.975514408), 1241.0, "hjDm", (-597.34956235), (-537.6901));
      assertNotNull(transportadora0);
      assertEquals("hjDm", transportadora0.getPass());
      assertEquals((-597.34956235), transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("hjDm", transportadora0.getNif());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals((-537.6901), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("hjDm", transportadora0.getCod());
      assertEquals("hjDm", transportadora0.getName());
      
      double double0 = transportadora0.getPrecoKm();
      assertEquals((-537.6901), double0, 0.01);
      assertEquals("hjDm", transportadora0.getPass());
      assertEquals((-597.34956235), transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("hjDm", transportadora0.getNif());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals((-537.6901), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("hjDm", transportadora0.getCod());
      assertEquals("hjDm", transportadora0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("gpK.VEzo", "gpK.VEzo", 106.0, 106.0, "gpK.VEzo", 959.4352610679505, 106.0);
      assertNotNull(transportadora0);
      assertEquals(959.4352610679505, transportadora0.getRaio(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("gpK.VEzo", transportadora0.getNif());
      assertEquals(106.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("gpK.VEzo", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("gpK.VEzo", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("gpK.VEzo", transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      
      transportadora0.classificaTransportadora(2);
      assertEquals(959.4352610679505, transportadora0.getRaio(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("gpK.VEzo", transportadora0.getNif());
      assertEquals(106.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("gpK.VEzo", transportadora0.getPass());
      assertEquals(2.0, transportadora0.getNota(), 0.01);
      assertEquals("gpK.VEzo", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("gpK.VEzo", transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      
      double double0 = transportadora0.getNota();
      assertEquals(2.0, double0, 0.01);
      assertEquals(959.4352610679505, transportadora0.getRaio(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("gpK.VEzo", transportadora0.getNif());
      assertEquals(106.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("gpK.VEzo", transportadora0.getPass());
      assertEquals(2.0, transportadora0.getNota(), 0.01);
      assertEquals("gpK.VEzo", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("gpK.VEzo", transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      
      transportadora0.classificaTransportadora((-1));
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals((-1.0), transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      
      double double0 = transportadora0.getNota();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals((-1.0), transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("M)7fSG", (String) null, 0.0, (-1.0), (String) null, 0.0, 0.0, (-1199));
      assertNotNull(transportadora0);
      assertNull(transportadora0.getNif());
      assertEquals("M)7fSG", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("M)7fSG", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals((-1199), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      String string0 = transportadora0.getNif();
      assertNull(string0);
      assertNull(transportadora0.getNif());
      assertEquals("M)7fSG", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("M)7fSG", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertNull(transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals((-1199), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      String string0 = transportadora0.getNif();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 4.0, 0.0, "", 0.0, 0.0);
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getCod());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      
      transportadora0.setKmsTotal(4.0);
      assertEquals(4.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getCod());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      
      double double0 = transportadora0.getKmsTotal();
      assertEquals(4.0, double0, 0.01);
      assertEquals(4.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getCod());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
      
      transportadora0.addKmsTotal((-803.036643155));
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals((-803.036643155), transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getName());
      
      double double0 = transportadora0.getKmsTotal();
      assertEquals((-803.036643155), double0, 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals((-803.036643155), transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("MVC.Models.BaseModels.VoluntarioMed", "MVC.Models.BaseModels.VoluntarioMed", 1374.7387, (-3950.12823978283), "MVC.Models.BaseModels.VoluntarioMed", 0.0, 1374.7387, 505);
      assertNotNull(transportadora0);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getName());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1374.7387, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(505, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getCod());
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getNif());
      
      transportadora0.setEstaLivre(false);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getName());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1374.7387, transportadora0.getPrecoKm(), 0.01);
      assertEquals(505, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getCod());
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertFalse(transportadora0.getEstaLivre());
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getNif());
      
      boolean boolean0 = transportadora0.getEstaLivre();
      assertFalse(boolean0);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getName());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1374.7387, transportadora0.getPrecoKm(), 0.01);
      assertEquals(505, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getCod());
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertFalse(transportadora0.getEstaLivre());
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", transportadora0.getNif());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("OcR", "MVC.Models.BaseModels.Loja", 0.0, 0.0, "OcR", 0.0, 0.0, 1361);
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("OcR", transportadora0.getCod());
      assertEquals("MVC.Models.BaseModels.Loja", transportadora0.getName());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(1361, transportadora0.getCapacidade());
      assertEquals("OcR", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("OcR", transportadora0.getNif());
      
      transportadora0.classificaTransportadora(1361);
      assertEquals(1361.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("OcR", transportadora0.getCod());
      assertEquals("MVC.Models.BaseModels.Loja", transportadora0.getName());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(1361, transportadora0.getCapacidade());
      assertEquals("OcR", transportadora0.getPass());
      assertEquals("OcR", transportadora0.getNif());
      
      Classificacao classificacao0 = transportadora0.getClassificacao();
      assertNotNull(classificacao0);
      assertEquals(1361.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("OcR", transportadora0.getCod());
      assertEquals("MVC.Models.BaseModels.Loja", transportadora0.getName());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(1361, transportadora0.getCapacidade());
      assertEquals("OcR", transportadora0.getPass());
      assertEquals("OcR", transportadora0.getNif());
      assertEquals(1, classificacao0.getNumNotas());
      assertEquals(1361, classificacao0.getSomaNotas());
      assertEquals(1361.0, classificacao0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getPass());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      
      transportadora0.classificaTransportadora((-250));
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getPass());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-250.0), transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      Classificacao classificacao0 = transportadora0.getClassificacao();
      assertNotNull(classificacao0);
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getPass());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-250.0), transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getNif());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals((-250), classificacao0.getSomaNotas());
      assertEquals(1, classificacao0.getNumNotas());
      assertEquals((-250.0), classificacao0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      
      int int0 = transportadora0.getCapacidade();
      assertEquals(0, int0);
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("%.2f", "dJ,j6jJ:1~2m$P|", 0.0, 4.0, "dJ,j6jJ:1~2m$P|", 0.0, 1331.9839987, (-1));
      assertNotNull(transportadora0);
      assertEquals("dJ,j6jJ:1~2m$P|", transportadora0.getName());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(1331.9839987, transportadora0.getPrecoKm(), 0.01);
      assertEquals("dJ,j6jJ:1~2m$P|", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("%.2f", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("%.2f", transportadora0.getPass());
      assertEquals((-1), transportadora0.getCapacidade());
      
      int int0 = transportadora0.getCapacidade();
      assertEquals((-1), int0);
      assertEquals("dJ,j6jJ:1~2m$P|", transportadora0.getName());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(1331.9839987, transportadora0.getPrecoKm(), 0.01);
      assertEquals("dJ,j6jJ:1~2m$P|", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("%.2f", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("%.2f", transportadora0.getPass());
      assertEquals((-1), transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      
      transportadora0.setVelocidadeMed((-3757.82246502749));
      assertEquals("", transportadora0.getName());
      assertEquals((-3757.82246502749), transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertNotNull(transportadora1);
      assertEquals("", transportadora0.getName());
      assertEquals((-3757.82246502749), transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      assertEquals(0, transportadora1.getCapacidade());
      assertEquals("", transportadora1.getName());
      assertEquals("", transportadora1.getNif());
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora1.getKmsTotal(), 0.01);
      assertEquals("", transportadora1.getPass());
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals((-3757.82246502749), transportadora1.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora1.getCod());
      assertEquals(0.0, transportadora1.getNota(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora(",", "%.2f", (-3466.49834), 1.0, ",", (-3466.49834), 1.0, (-2776));
      assertNotNull(transportadora0);
      assertEquals(",", transportadora0.getNif());
      assertEquals(",", transportadora0.getCod());
      assertEquals((-2776), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-3466.49834), transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("%.2f", transportadora0.getName());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(",", transportadora0.getPass());
      assertEquals(1.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertNotNull(transportadora1);
      assertEquals(",", transportadora0.getNif());
      assertEquals(",", transportadora0.getCod());
      assertEquals((-2776), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-3466.49834), transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("%.2f", transportadora0.getName());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(",", transportadora0.getPass());
      assertEquals(1.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertEquals(1.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals(",", transportadora1.getCod());
      assertEquals(",", transportadora1.getPass());
      assertEquals((-2776), transportadora1.getCapacidade());
      assertEquals(0.0, transportadora1.getNota(), 0.01);
      assertEquals(",", transportadora1.getNif());
      assertEquals(0.0, transportadora1.getKmsTotal(), 0.01);
      assertEquals((-3466.49834), transportadora1.getRaio(), 0.01);
      assertEquals("%.2f", transportadora1.getName());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 0.0, 0.0, "\nKms Total: ", 0.0, (-852.153417266));
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals((-852.153417266), transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getName());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertNotNull(transportadora1);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals((-852.153417266), transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora1.getCod());
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals(2, transportadora1.getCapacidade());
      assertEquals(0.0, transportadora1.getNota(), 0.01);
      assertEquals((-852.153417266), transportadora1.getPrecoKm(), 0.01);
      assertEquals("", transportadora1.getPass());
      assertEquals("", transportadora1.getName());
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertEquals("\nKms Total: ", transportadora1.getNif());
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(0.0, transportadora1.getKmsTotal(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      transportadora0.classificaTransportadora(138);
      assertEquals(138.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      Transportadora transportadora1 = transportadora0.clone();
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertNotNull(transportadora1);
      assertEquals(138.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora1.getNif());
      assertEquals("", transportadora1.getCod());
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals(0.0, transportadora1.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora1.getCapacidade());
      assertEquals("", transportadora1.getName());
      assertEquals("", transportadora1.getPass());
      assertEquals(0.0, transportadora1.getKmsTotal(), 0.01);
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(138.0, transportadora1.getNota(), 0.01);
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
      
      transportadora0.classificaTransportadora((-1));
      assertEquals((-1.0), transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertNotNull(transportadora1);
      assertEquals((-1.0), transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora1.getName());
      assertEquals((-1.0), transportadora1.getNota(), 0.01);
      assertEquals(0, transportadora1.getCapacidade());
      assertEquals(0.0, transportadora1.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora1.getVelocidadeMed(), 0.01);
      assertTrue(transportadora1.getEstaLivre());
      assertEquals("", transportadora1.getNif());
      assertEquals("", transportadora1.getCod());
      assertEquals("", transportadora1.getPass());
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getPass());
      assertEquals(0, transportadora0.getCapacidade());
      
      transportadora0.addKmsTotal(2280.899805);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(2280.899805, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getPass());
      assertEquals(0, transportadora0.getCapacidade());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertNotNull(transportadora1);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(2280.899805, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getPass());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0, transportadora1.getCapacidade());
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals("", transportadora1.getName());
      assertEquals("", transportadora1.getCod());
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals(0.0, transportadora1.getNota(), 0.01);
      assertEquals("", transportadora1.getNif());
      assertEquals("", transportadora1.getPass());
      assertEquals(2280.899805, transportadora1.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora1.getVelocidadeMed(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertNotNull(transportadora0);
      assertEquals(0, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getCod());
      
      transportadora0.addKmsTotal((-459.33017));
      assertEquals(0, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      assertEquals((-459.33017), transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getCod());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertNotNull(transportadora1);
      assertEquals(0, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getPass());
      assertEquals((-459.33017), transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora1.getNif());
      assertEquals("", transportadora1.getCod());
      assertEquals("", transportadora1.getPass());
      assertEquals(0, transportadora1.getCapacidade());
      assertEquals(0.0, transportadora1.getRaio(), 0.01);
      assertEquals((-459.33017), transportadora1.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora1.getNota(), 0.01);
      assertEquals("", transportadora1.getName());
      assertEquals(0.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora1.getVelocidadeMed(), 0.01);
      assertTrue(transportadora1.getEstaLivre());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 1.0, 1.0, "#`Y =, oG#)snH?E", 1.0, 1.0, 0);
      assertNotNull(transportadora0);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals("#`Y =, oG#)snH?E", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(1.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      
      transportadora0.setEstaLivre(false);
      assertFalse(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals("#`Y =, oG#)snH?E", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(1.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertNotNull(transportadora1);
      assertFalse(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals("#`Y =, oG#)snH?E", transportadora0.getNif());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getCod());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(1.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals(1.0, transportadora1.getRaio(), 0.01);
      assertEquals("", transportadora1.getCod());
      assertEquals("", transportadora1.getPass());
      assertFalse(transportadora1.getEstaLivre());
      assertEquals(0.0, transportadora1.getNota(), 0.01);
      assertEquals("#`Y =, oG#)snH?E", transportadora1.getNif());
      assertEquals(0, transportadora1.getCapacidade());
      assertEquals("", transportadora1.getName());
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertEquals(1.0, transportadora1.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora1.getKmsTotal(), 0.01);
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 1.0, 1.0, "\nKms Total: ", 1.0, 1091.407823, 0);
      assertNotNull(transportadora0);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getCod());
      assertEquals(1091.407823, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getPass());
      
      transportadora0.decCapacidade();
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getCod());
      assertEquals(1091.407823, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals((-1), transportadora0.getCapacidade());
      
      Transportadora transportadora1 = transportadora0.clone();
      assertTrue(transportadora1.equals((Object)transportadora0));
      assertNotNull(transportadora1);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getCod());
      assertEquals(1091.407823, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals((-1), transportadora0.getCapacidade());
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(1.0, transportadora1.getRaio(), 0.01);
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora1.getPass());
      assertEquals((-1), transportadora1.getCapacidade());
      assertEquals(0.0, transportadora1.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora1.getNota(), 0.01);
      assertEquals(1091.407823, transportadora1.getPrecoKm(), 0.01);
      assertEquals("", transportadora1.getName());
      assertEquals("", transportadora1.getCod());
      assertEquals("\nKms Total: ", transportadora1.getNif());
      assertNotSame(transportadora0, transportadora1);
      assertNotSame(transportadora1, transportadora0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadora transportadora0 = null;
      try {
        transportadora0 = new Transportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", (-4321.34024), (-4321.34024), "", (-4321.34024), 2277.9891683, (-1377));
      assertNotNull(transportadora0);
      assertEquals((-4321.34024), transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(2277.9891683, transportadora0.getPrecoKm(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals((-1377), transportadora0.getCapacidade());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
      
      double double0 = transportadora0.getVelocidadeMed();
      assertEquals(35.0, double0, 0.01);
      assertEquals((-4321.34024), transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals(2277.9891683, transportadora0.getPrecoKm(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadora0.getPass());
      assertEquals((-1377), transportadora0.getCapacidade());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("", transportadora0.getName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 1.0, 1.0, "\nKms Total: ", 1.0, 1091.407823, 0);
      assertNotNull(transportadora0);
      assertEquals(1091.407823, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
      
      boolean boolean0 = transportadora0.getEstaLivre();
      assertTrue(boolean0);
      assertEquals(1091.407823, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertEquals("", transportadora0.getName());
      assertEquals("", transportadora0.getCod());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("", transportadora0.getPass());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 4.0, 0.0, "", 0.0, 0.0);
      assertNotNull(transportadora0);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      
      double double0 = transportadora0.getKmsTotal();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getNota(), 0.01);
      assertEquals("", transportadora0.getName());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("", transportadora0.getNif());
      assertEquals("", transportadora0.getCod());
      assertEquals("", transportadora0.getPass());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("M)7fSG", (String) null, 0.0, (-1.0), (String) null, 0.0, 0.0, (-1199));
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-1199), transportadora1.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals((-1199), transportadora0.getCapacidade());
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 1.0, 1.0, "\nKms Total: ", 1.0, 1091.407823, 0);
      String string0 = transportadora0.getNif();
      assertEquals(0, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1091.407823, transportadora0.getPrecoKm(), 0.01);
      assertEquals("\nKms Total: ", string0);
      assertEquals(1.0, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("\nPre\u00E7o por Km: ", "\nPre\u00E7o por Km: ", 0.0, 582.910638, "\nPre\u00E7o por Km: ", (-1293.67594658994), 1171.94492951186, 55);
      double double0 = transportadora0.getPrecoKm();
      assertEquals((-1293.67594658994), transportadora0.getRaio(), 0.01);
      assertEquals(55, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(1171.94492951186, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.getRaio();
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("gpK.VEzo", "gpK.VEzo", 106.0, 106.0, "gpK.VEzo", 959.4352610679505, 106.0);
      transportadora0.getNota();
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(106.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(959.4352610679505, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("gpK.VEzo", "gpK.VEzo", 106.0, 106.0, "gpK.VEzo", 959.4352610679505, 106.0);
      transportadora0.getClassificacao();
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(959.4352610679505, transportadora0.getRaio(), 0.01);
      assertEquals(106.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 0.0, 0.0, "\nKms Total: ", 0.0, (-852.153417266));
      int int0 = transportadora0.getCapacidade();
      assertEquals((-852.153417266), transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals("\nKms Total: ", transportadora0.getNif());
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("lMA(", "lMA(", 1979.8722, 1979.8722, "lMA(", 1979.8722, 1979.8722);
      transportadora0.incCapacidade();
      assertEquals(3, transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.decCapacidade();
      transportadora0.incCapacidade();
      assertEquals(0, transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("lMA(", "lMA(", 1979.8722, 1979.8722, "lMA(", 1979.8722, 1979.8722);
      transportadora0.decCapacidade();
      transportadora0.decCapacidade();
      assertEquals(0, transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      String string0 = transportadora0.toString();
      assertEquals("Transportadora{ \nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\nNIF: \nRaio: 0.0\nPre\u00E7o por Km: 0.0\nKms Total: 0.00\nClassificacao:0.00\n}", string0);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
  }
}
