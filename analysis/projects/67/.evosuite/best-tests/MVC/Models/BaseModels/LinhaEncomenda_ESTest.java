/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:35:17 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.LinhaEncomenda;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(".7Nzrm=|lAQZZ{", ".7Nzrm=|lAQZZ{", 738.75275, 738.75275);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      assertEquals(545755.6256325624, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" , Quantidade: ", "DsLX,\"}UyObSf8We", (-1732.7651), (-1732.7651));
      linhaEncomenda0.setQuantidade(527.83224221);
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals((-914609.2879562349), linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
      assertEquals(527.83224221, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(".7Nzrm=|lAQZZ{", ".7Nzrm=|lAQZZ{", 738.75275, 738.75275);
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(738.75275, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(738.75275, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setNome((String) null);
      linhaEncomenda0.getNome();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" , Quantidade: ", "DsLX,\"}UyObSf8We", (-1732.7651), (-1732.7651));
      String string0 = linhaEncomenda0.getNome();
      assertEquals("DsLX,\"}UyObSf8We", string0);
      assertEquals(3002474.8917780104, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
      assertEquals(" , Quantidade: ", linhaEncomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 1.0, 1.0);
      linhaEncomenda0.setCodigo((String) null);
      linhaEncomenda0.getCodigo();
      assertEquals(1.0, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("J{:5BX2k7V'b", "", 1119.117, 0.0);
      String string0 = linhaEncomenda0.getCodigo();
      assertEquals("J{:5BX2k7V'b", string0);
      assertEquals(0.0, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
      assertEquals(1119.117, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("", linhaEncomenda0.getNome());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(".7Nzrm=|lAQZZ{", ".7Nzrm=|lAQZZ{", 738.75275, 738.75275);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(545755.6256325624, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(0.0, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("[%\"YD+\"%5*Xc[Qyh", "[%\"YD+\"%5*Xc[Qyh", (-1725.19003725917), 1.0);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals((-1725.19003725917), linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 0.0, 0.0);
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" , Quantidade: ", "DsLX,\"}UyObSf8We", (-1732.7651), (-1732.7651));
      linhaEncomenda0.setQuantidade(527.83224221);
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals(527.83224221, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals((-914609.2879562349), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" , Quantidade: ", "DsLX,\"}UyObSf8We", (-1732.7651), (-1732.7651));
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals("DsLX,\"}UyObSf8We", linhaEncomenda0.getNome());
      assertEquals((-1732.7651), double0, 0.01);
      assertEquals(" , Quantidade: ", linhaEncomenda0.getCodigo());
      assertEquals(3002474.8917780104, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" , Quantidade: ", "DsLX,\"}UyObSf8We", (-1732.7651), (-1732.7651));
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(" , Quantidade: ", linhaEncomenda0.getCodigo());
      assertEquals("DsLX,\"}UyObSf8We", linhaEncomenda0.getNome());
      assertEquals((-1732.7651), double0, 0.01);
      assertEquals(3002474.8917780104, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 1.0, 1.0);
      linhaEncomenda0.getNome();
      assertEquals(1.0, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 1.0, 1.0);
      linhaEncomenda0.getCodigo();
      assertEquals(1.0, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("!5b5`kTzG*7", "!5b5`kTzG*7", (-214.7472785723917), (-214.7472785723917));
      linhaEncomenda0.setPreco((-214.7472785723917));
      assertEquals(46116.39365424841, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("!5b5`kTzG*7", "!5b5`kTzG*7", (-214.7472785723917), (-214.7472785723917));
      String string0 = linhaEncomenda0.toString();
      assertEquals("Codigo: !5b5`kTzG*7 , Produto: !5b5`kTzG*7 , Quantidade: -214.75 , Valor Unit\u00E1rio: -214.75\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("!5b5`kTzG*7", "!5b5`kTzG*7", (-214.7472785723917), (-214.7472785723917));
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals(46116.39365424841, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("!5b5`kTzG*7", "!5b5`kTzG*7", (-214.7472785723917), (-214.7472785723917));
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(46116.39365424841, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }
}
