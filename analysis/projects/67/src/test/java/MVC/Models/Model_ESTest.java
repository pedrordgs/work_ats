/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 17:51:51 GMT 2021
 */

package MVC.Models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Loja;
import MVC.Models.BaseModels.Transportadora;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.Model;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Model_ESTest extends Model_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.addProduto("B?'", "Zx[cpl;", 930.57191, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addTransportadora("IkG", 1.0, 0.0, "", (-4202.3573), (-4202.3573), 2128, true);
      assertNotNull(string0);
      assertEquals("t1", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addTransportadora("!", 0.0, 0.0, "Q9}>9gnb4K%0@Ot;", (-2208.8958399912754), 458.1318, 0, false);
      assertNotNull(string0);
      assertEquals("t1", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addTransportadora("IkG", 1.0, 0.0, "jH3~szCj}{ewfN\"vT:", (-4202.3573), (-4202.3573), 2128, false);
      assertNotNull(string0);
      assertEquals("t1", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addVoluntario("VI", 0.0, 2.0, 2.0, true);
      assertNotNull(string0);
      assertEquals("v1", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addVoluntario("", 0.0, (-1567.77903281), 0.0, false);
      assertNotNull(string0);
      assertEquals("v1", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addVoluntario("%eF", 747.98, 747.98, 1121.857744571386, false);
      assertNotNull(string0);
      assertEquals("v1", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      model0.setEstaLivreEntregador("u1", boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.getEncomendasEntregador("~.'a}Zgz>)B2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      boolean boolean0 = model0.loginValido("H<bOYfx%I`Z%", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addUtilizador("t", (-3479.025022), (-3479.025022));
      assertNotNull(string0);
      assertEquals("u1", string0);
      
      boolean boolean0 = model0.loginValido("u1", "eF#'cqy\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      boolean boolean0 = model0.loginValido("u1", "\nNome: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals(0, encomenda0.getClassificacao());
      assertFalse(encomenda0.getMedica());
      assertEquals("", encomenda0.getCodLoja());
      assertEquals("", encomenda0.getCodEnc());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals("", encomenda0.getCodUser());
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals("", encomenda0.getCodEntregador());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      assertNotNull(list0);
      assertEquals(0, encomenda0.getClassificacao());
      assertFalse(encomenda0.getMedica());
      assertEquals("", encomenda0.getCodLoja());
      assertEquals("", encomenda0.getCodEnc());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals("", encomenda0.getCodUser());
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals("", encomenda0.getCodEntregador());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        model0.criaEncomenda((String) null, "y|2U.4=o1p[/~F77obG", list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addUtilizador((String) null, 86.358985013, 86.358985013);
      assertNotNull(string0);
      assertEquals("u1", string0);
      
      Utilizador utilizador0 = model0.getUtilizador("u1");
      assertNotNull(utilizador0);
      assertEquals(0, utilizador0.getNumeroEncomendas());
      assertEquals("u1", utilizador0.getPass());
      assertNull(utilizador0.getName());
      assertEquals("u1", utilizador0.getCod());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addLoja("eF#'cqy\"", 191.9801, 191.9801);
      assertNotNull(string0);
      assertEquals("l1", string0);
      
      List<Loja> list0 = model0.getListaLojas();
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addUtilizador("eF#'cqy\"", 1.0, (-3452.053833277187));
      assertNotNull(string0);
      assertEquals("u1", string0);
      
      List<Encomenda> list0 = model0.getListaEncomendasPorClassificar("u1");
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addUtilizador("", 0.0, 0.0);
      assertNotNull(string0);
      assertEquals("u1", string0);
      
      List<Encomenda> list0 = model0.getListaEncomendasClassificadas("u1");
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        model0.setEstaLivreEntregador("", boolean0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.loginValido("", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.loginValido((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.gravaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      try { 
        model0.gravaEstado("Ey9N+`Q ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("dados");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "p");
      assertTrue(boolean0);
      
      try { 
        model0.gravaEstado();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.getFaturacao("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.getEncomendasEntregador("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.criaLinha("", " z", 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      // Undeclared exception!
      try { 
        model0.carregaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("MVC.Models.Model");
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      
      try { 
        model0.carregaEstado("MVC.Models.Model");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      try { 
        model0.gravaEstado("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      try { 
        model0.carregaEstado("Transportadora{ \n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      boolean boolean0 = model0.existeEntregador("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addLoja("FsC#|,/u", (-1866.1349818492595), 3.0);
      assertNotNull(string0);
      assertEquals("l1", string0);
      
      String string1 = model0.addLoja("l1", 3.0, (-1866.1349818492595));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("l2", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addTransportadora("", (-2599.0538011), (-2599.0538011), "", (-2698.02135326862), (-2599.0538011), 0, true);
      assertNotNull(string0);
      assertEquals("t1", string0);
      
      String string1 = model0.addTransportadora("c0U#", (-2698.02135326862), 0, "9G", 0.0, 0.0, (-1), false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("t2", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Model model0 = new Model();
      assertNotNull(model0);
      
      String string0 = model0.addTransportadora("~{;?q", 1465.4, 1465.4, "v1", (-3704.0), (-3704.0), (-3071), true);
      assertNotNull(string0);
      assertEquals("t1", string0);
      
      List<Encomenda> list0 = model0.getEncomendasEntregador("t1");
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addVoluntario("ml", 0.0, 0.0, 0.0, true);
      assertEquals("v1", string0);
      
      String string1 = model0.addVoluntario((String) null, 0.0, 0.4295, 0.0, true);
      assertEquals("v2", string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addUtilizador("u", 587.58708782662, 587.58708782662);
      assertEquals("u1", string0);
      
      String string1 = model0.addUtilizador("t1", 384.0735510359, 0.0);
      assertEquals("u2", string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.setEstaLivreEntregador("v", (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Model model0 = new Model();
      model0.setEstaLivreEntregador("2", (Boolean) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.getProdutosLoja("839");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 839
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getEncomendasEntregador("v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addLoja("eF#'cqy\"", 191.9801, 191.9801);
      assertEquals("l1", string0);
      
      boolean boolean0 = model0.loginValido("l1", "u1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Model model0 = new Model();
      boolean boolean0 = model0.loginValido("v", "Voluntario{\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addUtilizador("eF#'cqy\"", 1.0, (-3452.053833277187));
      assertEquals("u1", string0);
      
      boolean boolean0 = model0.loginValido("u1", "u1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Model model0 = new Model();
      boolean boolean0 = model0.loginValido("l1", "u1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.utilizadorClassificaEncomenda("", "", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.utilizadorAceitaEncomenda("G=w)}q<8zFTh@HHfTz", "F9#n ", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // F9#n 
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Model model0 = new Model();
      model0.addLoja("FsC#|,/u", (-1866.1349818492595), 3.0);
      try { 
        model0.criaLinha("l1", ".@ZA", (-1.0));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // -1.0
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Model model0 = new Model();
      model0.carregaLog();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = model0.getUtilizador("=fy\"&1+~o,Y7~F$gK");
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getListaEncomendasPorClassificar("R9d76");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Model model0 = new Model();
      List<Utilizador> list0 = model0.getTop10Utilizadores();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Model model0 = new Model();
      List<Loja> list0 = model0.getListaLojas();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Model model0 = new Model();
      List<Transportadora> list0 = model0.getTop10Transportadoras();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getListaEncomendasClassificadas("u1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getListaEncomendasPorAceitar("p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.gravaEstado();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.carregaEstado();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
