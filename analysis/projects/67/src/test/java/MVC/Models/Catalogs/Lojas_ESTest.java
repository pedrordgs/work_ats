/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:28:11 GMT 2021
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Loja;
import MVC.Models.BaseModels.Produto;
import MVC.Models.Catalogs.Lojas;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Lojas_ESTest extends Lojas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja("Fr/o`Fd>p_", "Fr/o`Fd>p_", (-1167.8828), (-1167.8828));
      lojas0.addLoja(loja0);
      HashMap<Produto, Object> hashMap0 = new HashMap<Produto, Object>();
      Set<Produto> set0 = hashMap0.keySet();
      lojas0.addProdutosLoja(set0, "Fr/o`Fd>p_");
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Loja loja0 = new Loja();
      hashMap0.put("Lojas:\n", loja0);
      Lojas lojas0 = new Lojas(hashMap0);
      Produto produto0 = new Produto();
      lojas0.addProdutoLoja(produto0, "Lojas:\n");
      assertEquals("", produto0.getCod());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Loja loja0 = new Loja("", "eyU?}0*NRs5]", 0.0, 0.0);
      hashMap0.put("", loja0);
      Lojas lojas0 = new Lojas(hashMap0);
      lojas0.addEncomendaLoja("", "");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja("", "Q]P)!afe<-6", 0.0, 0.0);
      lojas0.addLoja(loja0);
      Loja loja1 = lojas0.getLoja("");
      assertTrue(loja1.equals((Object)loja0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja("7VV(,b\"OaZ4ns@7lw", (String) null, 60.0, 60.0);
      lojas0.addLoja(loja0);
      List<Loja> list0 = lojas0.getListaLojas();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      // Undeclared exception!
      try { 
        lojas0.setLojas((Map<String, Loja>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja();
      lojas0.addLoja(loja0);
      // Undeclared exception!
      try { 
        lojas0.addProdutosTodasLojas((Collection<Produto>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja("Fr/o`Fd>p_", "Fr/o`Fd>p_", (-1167.8828), (-1167.8828));
      lojas0.addLoja(loja0);
      // Undeclared exception!
      try { 
        lojas0.addProdutoTodasLojas((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      // Undeclared exception!
      try { 
        lojas0.addLoja((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lojas lojas0 = null;
      try {
        lojas0 = new Lojas((Map<String, Loja>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lojas lojas0 = null;
      try {
        lojas0 = new Lojas((Lojas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja();
      lojas0.addLoja(loja0);
      Map<String, Loja> map0 = lojas0.getLojas();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Map<String, Loja> map0 = lojas0.getLojas();
      lojas0.setLojas(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Lojas:\n[]", "Lojas:\n[]", (-188.954), (-188.954));
      linkedList0.add(linhaEncomenda0);
      // Undeclared exception!
      try { 
        lojas0.isEncomendaMed(linkedList0, "Lojas:\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      boolean boolean0 = lojas0.isEncomendaMed(linkedList0, " k>uArCPO-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja("", "Q]P)!afe<-6", 0.0, 0.0);
      lojas0.addLoja(loja0);
      boolean boolean0 = lojas0.existeLoja("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      boolean boolean0 = lojas0.existeLoja((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja("Fr/o`Fd>p_", "Fr/o`Fd>p_", (-1167.8828), (-1167.8828));
      lojas0.addLoja(loja0);
      HashMap<Produto, Object> hashMap0 = new HashMap<Produto, Object>();
      Set<Produto> set0 = hashMap0.keySet();
      lojas0.addProdutosTodasLojas(set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja("Fr/o`Fd>p_", "Fr/o`Fd>p_", (-1167.8828), (-1167.8828));
      lojas0.addLoja(loja0);
      Produto produto0 = new Produto("MVC.Models.BaseModels.Loja", "Fr/o`Fd>p_", (-1167.8828));
      lojas0.addProdutoTodasLojas(produto0);
      assertEquals((-1167.8828), produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Produto produto0 = new Produto("MVC.Models.BaseModels.Loja", "Fr/o`Fd>p_", (-1167.8828));
      // Undeclared exception!
      try { 
        lojas0.addProdutoLoja(produto0, "Lojas:\n[Loja{\nC\u00F3digo: Fr/o`Fd>p_\nNome: Fr/o`Fd>p_\nGPS: (-1167.8828,-1167.8828)\n}]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = lojas0.getLoja("&_pd9t>G:-3vP");
      assertNull(loja0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      lojas0.removeLoja("7VV(,b\"OaZ4ns@7lw");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Lojas lojas0 = new Lojas(hashMap0);
      Lojas lojas1 = lojas0.clone();
      assertNotSame(lojas0, lojas1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Lojas lojas0 = new Lojas(hashMap0);
      // Undeclared exception!
      try { 
        lojas0.addEncomendaLoja("6sQzd2PLlJvjq,", "MVC.Models.Catalogs.Lojas");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja("Fr/o`Fd>p_", "Fr/o`Fd>p_", (-1167.8828), (-1167.8828));
      lojas0.addLoja(loja0);
      Lojas lojas1 = new Lojas(lojas0);
      assertFalse(lojas1.equals((Object)lojas0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      List<Loja> list0 = lojas0.getListaLojas();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      String string0 = lojas0.toString();
      assertEquals("Lojas:\n[]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      LinkedList<Produto> linkedList0 = new LinkedList<Produto>();
      // Undeclared exception!
      try { 
        lojas0.addProdutosLoja(linkedList0, "O_e9;4w~FYhl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Lojas lojas0 = new Lojas(hashMap0);
      // Undeclared exception!
      try { 
        lojas0.getProdutoLoja("MVC.Models.BaseModels.Loja", "-llj:!Sw Ax");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }
}
