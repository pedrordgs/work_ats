/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:30:16 GMT 2021
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.GPS;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.BaseModels.Voluntario;
import MVC.Models.BaseModels.VoluntarioMed;
import MVC.Models.Catalogs.Voluntarios;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntarios_ESTest extends Voluntarios_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntario voluntario0 = new Voluntario("2m^P$GB@4=SlG", "}\n", 0.0, 1.0, 1474.370446);
      voluntarios0.addVoluntario(voluntario0);
      Boolean boolean0 = new Boolean(true);
      voluntarios0.setEstaLivreVoluntario("2m^P$GB@4=SlG", boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("", "", 953.2809, 953.2809, 0.0, false);
      voluntarios0.addVoluntario(voluntarioMed0);
      voluntarios0.addEncomendaVoluntario("", "");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed();
      voluntarios0.addVoluntario(voluntarioMed0);
      Voluntario voluntario0 = voluntarios0.getVoluntario("");
      assertEquals("", voluntario0.getCod());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntario voluntario0 = new Voluntario("", "ejXjxN", 2254.58568257614, 2254.58568257614, 2254.58568257614);
      voluntarios0.addVoluntario(voluntario0);
      voluntarios0.classificaVoluntario("", 1161);
      Voluntario voluntario1 = voluntarios0.getVoluntario("");
      assertEquals(1161.0, voluntario1.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda((String) null, (String) null, (String) null, 0.0, linkedList0);
      encomenda0.setPreco(2.0);
      GPS gPS0 = new GPS(4.0, 4.0);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 4.0);
      assertSame(encomenda1, encomenda0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "", "W.yN6", 1.0, list0);
      GPS gPS0 = new GPS();
      Encomenda encomenda2 = voluntarios0.entregaEncomendaVoluntario(encomenda1, gPS0, 1.0);
      assertEquals("", encomenda2.getCodEntregador());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("Transporta Medicamentos: ", "xS;|(dMBI:G=", (-1), 2361.0481, 1.0, true);
      voluntarios0.addVoluntario(voluntarioMed0);
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = voluntarioMed0.getGPS();
      voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, (-4413.1815361));
      assertEquals((-4413.1815361), encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia(1975.3298);
      GPS gPS0 = new GPS();
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 2.0);
      assertEquals(0.0, encomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Utilizador utilizador0 = new Utilizador();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda("", "3K.:&I~G", (-1196.3827), linkedList0);
      encomenda0.setDistancia((-1196.3827));
      GPS gPS0 = new GPS((-1196.3827), 0.0);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, (-1196.3827));
      assertEquals((-1196.3827), encomenda1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS();
      encomenda0.setClassificacao(1435);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 1338.78081625);
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda((String) null, (String) null, (String) null, 0.0, linkedList0);
      encomenda0.setClassificacao((-1));
      GPS gPS0 = new GPS(4.0, 4.0);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 4.0);
      assertNull(encomenda1.getCodUser());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.setDataVoluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("", "", 2849.714020736462, 1292.6349696, 2849.714020736462, false);
      GPS gPS0 = voluntarioMed0.getGPS();
      // Undeclared exception!
      try { 
        voluntarios0.entregaEncomendaVoluntario((Encomenda) null, gPS0, 2849.714020736462);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Voluntarios voluntarios0 = null;
      try {
        voluntarios0 = new Voluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntarios voluntarios0 = null;
      try {
        voluntarios0 = new Voluntarios((Voluntarios) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      assertFalse(voluntarios1.equals((Object)voluntarios0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      voluntarios0.setDataVoluntarios(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed();
      voluntarios0.addVoluntario(voluntarioMed0);
      boolean boolean0 = voluntarios0.existeVoluntario("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      boolean boolean0 = voluntarios0.existeVoluntario((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("Transporta Medicamentos: ", "x<S;|(MBI:G=", 10, 10, 10, false);
      voluntarios0.addVoluntario(voluntarioMed0);
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = voluntarioMed0.getGPS();
      voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 942.956);
      assertEquals("Transporta Medicamentos: ", encomenda0.getCodEntregador());
      assertEquals(942.956, encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("Transporta Medicamentos: ", "x<S;|(MBI:G=", 10, 10, 10, false);
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = voluntarioMed0.getGPS();
      Boolean boolean0 = Boolean.TRUE;
      encomenda0.setMedica(boolean0);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 942.956);
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("Transporta Medicamentos: ", "x<S;|(MBI:G=", 10, 10, 10, false);
      voluntarios0.addVoluntario(voluntarioMed0);
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = voluntarios0.clone();
      assertNotSame(voluntarios0, voluntarios1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        voluntarios0.setEstaLivreVoluntario("H_vP*$(", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.getVoluntario("\nRaio: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.removeVoluntario("Volunt\u00E1rios: \n");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.classificaVoluntario("xS;|(dMBI:G=", (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.addVoluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.addEncomendaVoluntario((String) null, "Volunt\u00E1rios: \n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      String string0 = voluntarios0.toString();
      assertEquals("Volunt\u00E1rios: \n[]", string0);
  }
}
