/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 17:53:27 GMT 2021
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.GPS;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.BaseModels.Voluntario;
import MVC.Models.BaseModels.VoluntarioMed;
import MVC.Models.Catalogs.Voluntarios;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntarios_ESTest extends Voluntarios_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.getDataVoluntarios();
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS(60.0, 60.0);
      GPS gPS1 = new GPS(gPS0);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS1, 2063.784);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("\nPreco por quantidade: ", "\nPreco por quantidade: ", (String) null, 60.0, list0);
      gPS0.clone();
      gPS0.setY(2063.784);
      encomenda2.setClassificacao((-1));
      voluntarios0.entregaEncomendaVoluntario(encomenda2, gPS1, 1514.4506947885);
      // Undeclared exception!
      try { 
        voluntarios0.classificaVoluntario((String) null, (-1004));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.toString();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      voluntarios1.getDataVoluntarios();
      Utilizador utilizador0 = new Utilizador();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda(" ,Vq", " ,Vq", (-1.0), linkedList0);
      Encomenda encomenda1 = encomenda0.clone();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed(" ,Vq", ",Y&cXI3J_|7)G", (-1.0), (-1.0), (-1.0), true);
      encomenda0.setDistancia((-1.0));
      VoluntarioMed voluntarioMed1 = new VoluntarioMed(voluntarioMed0);
      encomenda0.setDuracao((-1.0));
      Voluntario voluntario0 = new Voluntario(voluntarioMed1);
      GPS gPS0 = voluntario0.getGPS();
      Encomenda encomenda2 = voluntarios0.entregaEncomendaVoluntario(encomenda1, gPS0, (-1.0));
      encomenda2.getLinhas();
      utilizador0.addKeyPorAceitar("btscxAm:z");
      Voluntarios voluntarios2 = voluntarios0.clone();
      voluntarios2.removeVoluntario(",Y&cXI3J_|7)G");
      voluntarios1.toString();
      voluntarios1.entregaEncomendaVoluntario(encomenda2, gPS0, (-1.0));
      Voluntarios voluntarios3 = voluntarios0.clone();
      voluntarios0.getDataVoluntarios();
      voluntarios1.clone();
      voluntarios0.existeVoluntario("Volunt\u00E1rios: \n");
      Encomenda encomenda3 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, (-1060.4609184318));
      voluntarios0.entregaEncomendaVoluntario(encomenda3, gPS0, (-1.0));
      // Undeclared exception!
      try { 
        voluntarios3.getVoluntario("Volunt\u00E1rios: \n[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.toString();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      voluntarios1.getDataVoluntarios();
      Utilizador utilizador0 = new Utilizador();
      String string0 = " ,Vq";
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda(" ,Vq", " ,Vq", (-1.0), linkedList0);
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setDistancia((-228.77304958644));
      VoluntarioMed voluntarioMed0 = new VoluntarioMed(" ,Vq", ",Y&cXI3J_|7)G", (-1.0), (-1.0), (-1.0), true);
      encomenda0.setDistancia((-1.0));
      VoluntarioMed voluntarioMed1 = new VoluntarioMed(voluntarioMed0);
      encomenda0.setDuracao((-1.0));
      Voluntario voluntario0 = new Voluntario(voluntarioMed1);
      GPS gPS0 = voluntario0.getGPS();
      Encomenda encomenda2 = voluntarios0.entregaEncomendaVoluntario(encomenda1, gPS0, (-1.0));
      utilizador0.addKeyPorAceitar("btscxAm:z");
      Voluntarios voluntarios2 = voluntarios0.clone();
      voluntarios2.removeVoluntario(",Y&cXI3J_|7)G");
      voluntarios1.toString();
      voluntarios1.entregaEncomendaVoluntario(encomenda2, gPS0, (-1.0));
      Voluntarios voluntarios3 = voluntarios0.clone();
      voluntarios0.getDataVoluntarios();
      voluntarios1.clone();
      voluntarios0.existeVoluntario("Volunt\u00E1rios: \n");
      // Undeclared exception!
      try { 
        voluntarios3.getVoluntario("Volunt\u00E1rios: \n[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.setDataVoluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed();
      voluntarioMed0.addEncomenda("b]");
      voluntarios0.addVoluntario(voluntarioMed0);
      voluntarios0.classificaVoluntario("", (-792));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.toString();
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      Voluntarios voluntarios1 = new Voluntarios(map0);
      voluntarios0.existeVoluntario("");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia(60.0);
      GPS gPS0 = new GPS();
      voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 0.0);
      voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 0.0);
      voluntarios1.getDataVoluntarios();
      String string0 = "XAK'B7 m@Y>u?r./";
      // Undeclared exception!
      try { 
        voluntarios1.addEncomendaVoluntario("XAK'B7 m@Y>u?r./", "Volunt\u00E1rios: \n[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      Map<String, Voluntario> map0 = voluntarios1.getDataVoluntarios();
      Voluntarios voluntarios2 = new Voluntarios(map0);
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      String string0 = "dwa&N5P6";
      utilizador0.setCod("dwa&N5P6");
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      utilizador1.toString();
      encomenda0.setLinhas(list0);
      Encomenda encomenda2 = utilizador1.criaEncomenda("dwa&N5P6", "", (-2057.0418646432), list0);
      GPS gPS0 = new GPS((-1235.157), (-2057.0418646432));
      GPS gPS1 = new GPS(gPS0);
      voluntarios1.entregaEncomendaVoluntario(encomenda2, gPS1, (-2057.0418646432));
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("", "3>%\"a3S1", (-2057.0418646432), (-848.3649122318932), (-2057.0418646432), false);
      VoluntarioMed voluntarioMed1 = new VoluntarioMed(voluntarioMed0);
      voluntarioMed1.toString();
      voluntarios2.addVoluntario(voluntarioMed1);
      voluntarios2.getVoluntario("");
      voluntarios2.existeVoluntario(",");
      voluntarios2.getDataVoluntarios();
      // Undeclared exception!
      try { 
        voluntarios1.addEncomendaVoluntario((String) null, "Utilizador{ \nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\nNumero de encomendas: 0\n}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.removeVoluntario("");
      String string0 = null;
      double double0 = (-971.0413998695);
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (-971.0413998695), (-971.0413998695), (-971.0413998695));
      voluntario0.setGps((-971.0413998695), (-971.0413998695));
      voluntario0.getGPS();
      voluntarios0.addVoluntario(voluntario0);
      voluntarios0.removeVoluntario("}\n");
      Voluntarios voluntarios1 = voluntarios0.clone();
      // Undeclared exception!
      try { 
        voluntarios1.addVoluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      Map<String, Voluntario> map0 = voluntarios1.getDataVoluntarios();
      Voluntarios voluntarios2 = new Voluntarios(map0);
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "", "", 2.0, list0);
      GPS gPS0 = new GPS();
      Encomenda encomenda2 = voluntarios2.entregaEncomendaVoluntario(encomenda1, gPS0, 0.0);
      assertNotSame(encomenda2, encomenda0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      voluntarios0.getDataVoluntarios();
      Voluntarios voluntarios1 = new Voluntarios(map0);
      Voluntarios voluntarios2 = new Voluntarios(voluntarios1);
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS(1.0, 329.5);
      voluntarios2.entregaEncomendaVoluntario(encomenda0, gPS0, (-189.83848918));
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("", "vsL:txn;:nW l", (-1.0), (-1.0), (-1.0), false);
      voluntarios2.addVoluntario(voluntarioMed0);
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setPreco((-189.83848918));
      encomenda1.getLinhas();
      voluntarios2.entregaEncomendaVoluntario(encomenda1, gPS0, 1.0);
      voluntarios1.addVoluntario(voluntarioMed0);
      voluntarios2.toString();
      voluntarios2.clone();
      // Undeclared exception!
      try { 
        voluntarios0.getVoluntario("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      Voluntarios voluntarios1 = new Voluntarios(map0);
      Voluntarios voluntarios2 = new Voluntarios(voluntarios1);
      Voluntarios voluntarios3 = voluntarios2.clone();
      voluntarios2.clone();
      voluntarios3.clone();
      voluntarios0.getDataVoluntarios();
      String string0 = ".10JSOG!4";
      Boolean boolean0 = null;
      GPS gPS0 = new GPS();
      GPS gPS1 = gPS0.clone();
      // Undeclared exception!
      try { 
        voluntarios0.entregaEncomendaVoluntario((Encomenda) null, gPS1, (-127.4917368));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.existeVoluntario((String) null);
      Encomenda encomenda0 = new Encomenda();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("", (String) null, 1469.20831129, 1469.20831129, 3981.297576836867, false);
      VoluntarioMed voluntarioMed1 = new VoluntarioMed(voluntarioMed0);
      Voluntario voluntario0 = voluntarioMed1.clone();
      GPS gPS0 = voluntario0.getGPS();
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 3981.297576836867);
      Encomenda encomenda2 = voluntarios0.entregaEncomendaVoluntario(encomenda1, gPS0, 3981.297576836867);
      assertEquals(0.0, encomenda2.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.existeVoluntario("");
      // Undeclared exception!
      try { 
        voluntarios0.addEncomendaVoluntario("~&rx", "CK\"&'Eg.MM`?:*&Myb@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Map<String, Voluntario> map0 = null;
      Voluntarios voluntarios0 = null;
      try {
        voluntarios0 = new Voluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.removeVoluntario("");
      voluntarios0.toString();
      String string0 = "";
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(true, true);
      // Undeclared exception!
      try { 
        voluntarios0.setEstaLivreVoluntario("MVC.Models.BaseModels.GPS", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      Map<String, Voluntario> map0 = voluntarios1.getDataVoluntarios();
      Voluntarios voluntarios2 = new Voluntarios(map0);
      // Undeclared exception!
      try { 
        voluntarios2.addEncomendaVoluntario("Volunt\u00E1rios: \n", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntarios voluntarios0 = null;
      try {
        voluntarios0 = new Voluntarios((Voluntarios) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      Voluntarios voluntarios1 = new Voluntarios(map0);
      voluntarios0.toString();
      voluntarios1.clone();
      voluntarios1.setDataVoluntarios(map0);
      voluntarios0.setDataVoluntarios(map0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        voluntarios0.classificaVoluntario("", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      voluntarios0.getDataVoluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("~pFN-loLq0e_y\"\"hk>M", "~pFN-loLq0e_y\"\"hk>M", (-784.784266064895), 2051.26932678, 2051.26932678, true);
      voluntarioMed0.setCod("~pFN-loLq0e_y\"\"hk>M");
      VoluntarioMed voluntarioMed1 = new VoluntarioMed(voluntarioMed0);
      GPS gPS0 = voluntarioMed1.getGPS();
      GPS gPS1 = gPS0.clone();
      GPS gPS2 = new GPS(gPS1);
      gPS0.toString();
      gPS2.setX(351.831);
      voluntarioMed1.setGps(gPS2);
      voluntarios0.addVoluntario(voluntarioMed1);
      voluntarios0.toString();
      Voluntarios voluntarios1 = voluntarios0.clone();
      voluntarios0.clone();
      voluntarios1.existeVoluntario("~pFN-loLq0e_y\"\"hk>M");
      Random.setNextRandom((-2004318069));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.toString();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      voluntarios1.getDataVoluntarios();
      Utilizador utilizador0 = new Utilizador();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda(" ,Vq", " ,Vq", (-1.0), linkedList0);
      Encomenda encomenda1 = encomenda0.clone();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed(" ,Vq", ",Y&cXI3J_|7)G", (-1.0), (-1.0), (-1.0), true);
      encomenda0.setDistancia((-1.0));
      VoluntarioMed voluntarioMed1 = new VoluntarioMed(voluntarioMed0);
      encomenda0.setDuracao((-1.0));
      Voluntario voluntario0 = new Voluntario(voluntarioMed1);
      GPS gPS0 = voluntario0.getGPS();
      Encomenda encomenda2 = voluntarios0.entregaEncomendaVoluntario(encomenda1, gPS0, (-1.0));
      utilizador0.addKeyPorAceitar("btscxAm:z");
      Voluntarios voluntarios2 = voluntarios0.clone();
      voluntarios2.removeVoluntario(",Y&cXI3J_|7)G");
      voluntarios1.toString();
      voluntarios1.entregaEncomendaVoluntario(encomenda2, gPS0, (-1.0));
      Voluntarios voluntarios3 = voluntarios0.clone();
      voluntarios0.getDataVoluntarios();
      voluntarios1.clone();
      voluntarios0.existeVoluntario("Volunt\u00E1rios: \n");
      // Undeclared exception!
      try { 
        voluntarios3.getVoluntario("Volunt\u00E1rios: \n[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      Map<String, Voluntario> map0 = voluntarios1.getDataVoluntarios();
      Voluntarios voluntarios2 = new Voluntarios(map0);
      // Undeclared exception!
      try { 
        voluntarios2.classificaVoluntario("^QyBYFggT1''l)Y9XO", (-2357));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      Voluntarios voluntarios1 = new Voluntarios(map0);
      voluntarios1.toString();
      Voluntario voluntario0 = new Voluntario();
      voluntarios1.addVoluntario(voluntario0);
      Voluntarios voluntarios2 = new Voluntarios(voluntarios1);
      Voluntarios voluntarios3 = voluntarios2.clone();
      voluntarios3.removeVoluntario("\nu*v<>dgzB$eYA%S");
      Boolean boolean0 = Boolean.FALSE;
      voluntarios2.setEstaLivreVoluntario("", boolean0);
      voluntarios3.addEncomendaVoluntario("Volunt\u00E1rios: \n[]", "");
      voluntarios0.existeVoluntario("Volunt\u00E1rios: \n[]");
      voluntarios2.getDataVoluntarios();
      // Undeclared exception!
      try { 
        voluntarios2.setEstaLivreVoluntario("", (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      voluntarios0.clone();
      Voluntarios voluntarios2 = voluntarios1.clone();
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS();
      Encomenda encomenda1 = voluntarios2.entregaEncomendaVoluntario(encomenda0, gPS0, 0.0);
      Encomenda encomenda2 = encomenda1.clone();
      Encomenda encomenda3 = voluntarios2.entregaEncomendaVoluntario(encomenda2, gPS0, 3856);
      assertEquals("", encomenda3.getCodLoja());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setPass("u=(<K>V293&/");
      voluntario0.getGPS();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.calculaValorTotal();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Voluntarios voluntarios0 = new Voluntarios();
      boolean boolean0 = voluntarios0.existeVoluntario("Z?!L0VGL!oBEh");
      assertFalse(boolean0);
  }
}
