/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 17:59:19 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.LinhaEncomenda;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 814.82908316207, 814.82908316207);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      assertEquals(663946.4347667396, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("T", "", (-71.221), (-71.221));
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals("", linhaEncomenda0.getNome());
      assertEquals("T", linhaEncomenda0.getCodigo());
      assertEquals((-71.221), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-71.221), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setPreco(2421.35);
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(2421.35, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setNome((String) null);
      linhaEncomenda0.getNome();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("4m1fWR#Yzs9+wXk", "", 0.0, (-49.182569));
      assertEquals("", linhaEncomenda0.getNome());
      
      linhaEncomenda0.setNome("4m1fWR#Yzs9+wXk");
      linhaEncomenda0.getNome();
      assertEquals("4m1fWR#Yzs9+wXk", linhaEncomenda0.getCodigo());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, 1326.8149606864315, 1326.8149606864315);
      linhaEncomenda0.getCodigo();
      assertEquals(1760437.9399013368, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "x1G=", 1.0, 1604.3);
      assertEquals("", linhaEncomenda0.getCodigo());
      
      linhaEncomenda0.setCodigo("x1G=");
      linhaEncomenda0.getCodigo();
      assertEquals(1.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("s.m)0", "", (-540.43443274), (-540.43443274));
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals("s.m)0", linhaEncomenda1.getCodigo());
      assertEquals("", linhaEncomenda1.getNome());
      assertEquals(292069.37609100563, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "x1G=", 1.0, 1604.3);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals("", linhaEncomenda1.getCodigo());
      assertEquals(1604.3, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
      assertEquals("x1G=", linhaEncomenda1.getNome());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setPreco(2421.35);
      linhaEncomenda0.setQuantidade((-958.9901));
      linhaEncomenda0.clone();
      assertEquals((-958.9901), linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("?J7PdMM[n@c", "", 1436.833722082, 889.3776274874717);
      linhaEncomenda0.setPreco((-1969.2626107));
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals((-1969.2626107), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-2829502.9266889975), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 814.82908316207, 814.82908316207);
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(814.82908316207, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(814.82908316207, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("4m1fWR#Yzs9+wXk", "", 0.0, (-49.182569));
      double double0 = linhaEncomenda0.getPreco();
      assertEquals((-49.182569), double0, 0.01);
      assertEquals(-0.0, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
      assertEquals("4m1fWR#Yzs9+wXk", linhaEncomenda0.getCodigo());
      assertEquals("", linhaEncomenda0.getNome());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("4m1fWR#Yzs9+wXk", "", 0.0, (-49.182569));
      String string0 = linhaEncomenda0.getNome();
      assertEquals("", string0);
      assertEquals("4m1fWR#Yzs9+wXk", linhaEncomenda0.getCodigo());
      assertEquals(-0.0, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "x1G=", 1.0, 1604.3);
      String string0 = linhaEncomenda0.getCodigo();
      assertEquals(1604.3, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
      assertEquals("", string0);
      assertEquals("x1G=", linhaEncomenda0.getNome());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.toString();
      assertEquals("Codigo:  , Produto:  , Quantidade: 0.00 , Valor Unit\u00E1rio: 0.00\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(0.0, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("JPM-rn@c", "JPM-rn@c", 1436.833722082, 1436.833722082);
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals(2064491.1449120138, double0, 0.01);
  }
}
