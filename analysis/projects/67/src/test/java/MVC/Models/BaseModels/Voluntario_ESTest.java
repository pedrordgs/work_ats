/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:36:00 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Voluntario;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntario_ESTest extends Voluntario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getVelocidadeMed();
      assertEquals(0.0, double0, 0.01);
      assertTrue(voluntario0.getEstaLivre());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidadeMed((-3801.77922034186));
      double double0 = voluntario0.getVelocidadeMed();
      assertEquals((-3801.77922034186), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getRaio();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, voluntario0.getVelocidadeMed(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("#sGx$", "#sGx$", 1.0, 1.0, (-1.0));
      double double0 = voluntario0.getRaio();
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertTrue(voluntario0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("k-K}+_NyAzz]VJ._D", "k-K}+_NyAzz]VJ._D", 164.1074942, 164.1074942, 164.1074942);
      voluntario0.classificaVoluntario(2328);
      double double0 = voluntario0.getNota();
      assertEquals(2328.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.classificaVoluntario((-430));
      double double0 = voluntario0.getNota();
      assertEquals((-430.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("#sGx$", "#sGx$", 1.0, 1.0, (-1.0));
      assertTrue(voluntario0.getEstaLivre());
      
      voluntario0.setEstaLivre(false);
      boolean boolean0 = voluntario0.getEstaLivre();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("k-K}+_NyAzz]VJ._D", "k-K}+_NyAzz]VJ._D", 164.1074942, 164.1074942, 164.1074942);
      voluntario0.classificaVoluntario(2328);
      voluntario0.getClassificacao();
      assertEquals(2328.0, voluntario0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("\nPre\u00E7o por Km: ", "\nPre\u00E7o por Km: ", 181.4951298477, 181.4951298477, 181.4951298477);
      voluntario0.classificaVoluntario((-1820));
      voluntario0.getClassificacao();
      assertEquals((-1820.0), voluntario0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(0.0, voluntario0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertTrue(voluntario1.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidadeMed((-1883.2));
      voluntario0.clone();
      assertEquals((-1883.2), voluntario0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, 1.0, 1.0, 0.0);
      voluntario0.classificaVoluntario(1);
      voluntario0.clone();
      assertEquals(1.0, voluntario0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("\nPre\u00E7o por Km: ", "\nPre\u00E7o por Km: ", 181.4951298477, 181.4951298477, 181.4951298477);
      voluntario0.classificaVoluntario((-1820));
      voluntario0.clone();
      assertEquals((-1820.0), voluntario0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("#sGx$", "#sGx$", 1.0, 1.0, (-1.0));
      assertTrue(voluntario0.getEstaLivre());
      
      voluntario0.setEstaLivre(false);
      voluntario0.clone();
      assertFalse(voluntario0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("#sGx$", "#sGx$", 1.0, 1.0, (-1.0));
      double double0 = voluntario0.getVelocidadeMed();
      assertEquals(5.0, double0, 0.01);
      assertEquals((-1.0), voluntario0.getRaio(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("k-K}+_NyAzz]VJ._D", "k-K}+_NyAzz]VJ._D", 164.1074942, 164.1074942, 164.1074942);
      boolean boolean0 = voluntario0.getEstaLivre();
      assertTrue(boolean0);
      assertEquals(164.1074942, voluntario0.getRaio(), 0.01);
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("MVC.Models.BaseModels.Voluntario", "MVC.Models.BaseModels.Voluntario", 155.94056574652, 155.94056574652, 155.94056574652);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      assertEquals(155.94056574652, voluntario1.getRaio(), 0.01);
      assertTrue(voluntario1.getEstaLivre());
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertEquals(5.0, voluntario1.getVelocidadeMed(), 0.01);
      assertEquals(155.94056574652, voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("k-K}+_NyAzz]VJ._D", "k-K}+_NyAzz]VJ._D", 164.1074942, 164.1074942, 164.1074942);
      voluntario0.getNota();
      assertEquals(164.1074942, voluntario0.getRaio(), 0.01);
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("k-K}+_NyAzz]VJ._D", "k-K}+_NyAzz]VJ._D", 164.1074942, 164.1074942, 164.1074942);
      voluntario0.getClassificacao();
      assertEquals(164.1074942, voluntario0.getRaio(), 0.01);
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("k-K}+_NyAzz]VJ._D", "k-K}+_NyAzz]VJ._D", 164.1074942, 164.1074942, 164.1074942);
      double double0 = voluntario0.getRaio();
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
      assertEquals(164.1074942, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      String string0 = voluntario0.toString();
      assertTrue(voluntario0.getEstaLivre());
      assertEquals("Voluntario{\nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\nRaio: 0.0\nClassificacao:0.00\n}", string0);
      assertEquals(0.0, voluntario0.getVelocidadeMed(), 0.01);
  }
}
