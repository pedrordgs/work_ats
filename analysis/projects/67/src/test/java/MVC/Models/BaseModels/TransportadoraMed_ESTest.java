/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 18:00:31 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.TransportadoraMed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportadoraMed_ESTest extends TransportadoraMed_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.setVelocidadeMed((-3737.779579866135));
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("C^X`", "g*Zy V", 827.970410902, 0.0, "C^X`", (-5363.18330009), (-5363.18330009), true);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertTrue(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.classificaTransportadora(306);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("?ZSg92", "z", 0.0, (-1.0), "zY310qD(|j]}*^mV-", 0.0, 0.0, true);
      transportadoraMed0.classificaTransportadora((-28));
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertTrue(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.setKmsTotal(2900.0);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.addKmsTotal((-467.8418));
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.setEstaLivre(false);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", 1341.5912371, 1341.5912371, "", 1341.5912371, 1341.5912371, true, 0);
      transportadoraMed0.incCapacidade();
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertTrue(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.decCapacidade();
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      boolean boolean0 = transportadoraMed0.aceitaTransporteMedicamentos();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = null;
      try {
        transportadoraMed0 = new TransportadoraMed((TransportadoraMed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", 1341.5912371, 1341.5912371, "", 1341.5912371, 1341.5912371, true, 0);
      boolean boolean0 = transportadoraMed0.aceitaTransporteMedicamentos();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      TransportadoraMed transportadoraMed1 = new TransportadoraMed(transportadoraMed0);
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-1301), (-1301), "", (-1301), (-1301), true, (-1301));
      transportadoraMed0.aceitaMedicamentos(true);
      assertTrue(transportadoraMed0.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-1301), (-1301), "", (-1301), (-1301), true, (-1301));
      String string0 = transportadoraMed0.toString();
      assertEquals("Transportadora{ \nC\u00F3digo: \nNome: \nGPS: (-1301.0,-1301.0)\nNIF: \nRaio: -1301.0\nPre\u00E7o por Km: -1301.0\nKms Total: 0.00\nClassificacao:0.00\n}\nTransporta Medicamentos: true\n", string0);
  }
}
