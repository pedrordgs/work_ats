/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:36:15 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.TransportadoraMed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportadoraMed_ESTest extends TransportadoraMed_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("#G+O~v(dln<|stig", "9z`.+,#V54_oi,|w", 0.0, 1.0, "9z`.+,#V54_oi,|w", 1736.7431837526535, 1.0, true, 9);
      transportadoraMed0.setVelocidadeMed((-1.0));
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertTrue(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed(" 3j7[yy&<{j", "", 0.0, (-8.2572), " 3j7[yy&<{j", (-8.2572), (-8.2572), true);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertTrue(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("zP/A!<4#i_>e^KA^K", "zP/A!<4#i_>e^KA^K", 2146.3141, (-498.54730735876467), "zP/A!<4#i_>e^KA^K", 2146.3141, (-498.54730735876467), false, (-2877));
      transportadoraMed0.classificaTransportadora(1);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.classificaTransportadora((-1341));
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("zP/A!<4#i_>e^KA^K", "zP/A!<4#i_>e^KA^K", 2146.3141, (-498.54730735876467), "zP/A!<4#i_>e^KA^K", 2146.3141, (-498.54730735876467), false, (-2877));
      transportadoraMed0.setKmsTotal(2038.903813819);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.addKmsTotal((-1.0));
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("zP/A!<4#i_>e^KA^K", "zP/A!<4#i_>e^KA^K", 2146.3141, (-498.54730735876467), "zP/A!<4#i_>e^KA^K", 2146.3141, (-498.54730735876467), false, (-2877));
      transportadoraMed0.setEstaLivre(false);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("zP/A!<4#i_>e^KA^K", "zP/A!<4#i_>e^KA^K", 2146.3141, (-498.54730735876467), "zP/A!<4#i_>e^KA^K", 2146.3141, (-498.54730735876467), false, (-2877));
      boolean boolean0 = transportadoraMed0.aceitaTransporteMedicamentos();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = null;
      try {
        transportadoraMed0 = new TransportadoraMed((TransportadoraMed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed(" 3j7[yy&<{j", "", 0.0, (-8.2572), " 3j7[yy&<{j", (-8.2572), (-8.2572), true);
      boolean boolean0 = transportadoraMed0.aceitaTransporteMedicamentos();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("(iw_#o", "(iw_#o", 2318.1630906961796, 2318.1630906961796, "(iw_#o", 2318.1630906961796, 2318.1630906961796, true, 22);
      transportadoraMed0.aceitaMedicamentos(true);
      assertTrue(transportadoraMed0.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      TransportadoraMed transportadoraMed1 = new TransportadoraMed(transportadoraMed0);
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("ZpN~b' Pf@=", "ZpN~b' Pf@=", 0.6882401867453094, 0.6882401867453094, "ZpN~b' Pf@=", 0.6882401867453094, 0.6882401867453094, true);
      String string0 = transportadoraMed0.toString();
      assertEquals("Transportadora{ \nC\u00F3digo: ZpN~b' Pf@=\nNome: ZpN~b' Pf@=\nGPS: (0.6882401867453094,0.6882401867453094)\nNIF: ZpN~b' Pf@=\nRaio: 0.6882401867453094\nPre\u00E7o por Km: 0.6882401867453094\nKms Total: 0.00\nClassificacao:0.00\n}\nTransporta Medicamentos: true\n", string0);
  }
}
