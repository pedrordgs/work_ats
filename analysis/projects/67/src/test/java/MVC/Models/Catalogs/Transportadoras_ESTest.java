/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 17:52:50 GMT 2021
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.GPS;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Transportadora;
import MVC.Models.BaseModels.TransportadoraMed;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.Catalogs.Transportadoras;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadoras_ESTest extends Transportadoras_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora("Transportadoras:\n", "Transportadoras:\n", (-575.863), (-575.863), "Transportadoras:\n", (-575.863), 0.0);
      Transportadora transportadora1 = transportadora0.clone();
      transportadoras0.addTransportadora(transportadora1);
      GPS gPS0 = new GPS();
      gPS0.setXY(592.434319475, 592.434319475);
      transportadora0.setGps(gPS0);
      transportadoras0.decTransportadora("Transportadoras:\n");
      transportadoras0.existeTransportadora((String) null);
      transportadoras0.addTransportadora(transportadora0);
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("Transportadoras:\n", "Transportadoras:\n", "`)3K$&b$oIFB,[a[<[", (-575.863), linkedList0);
      Encomenda encomenda1 = encomenda0.clone();
      GPS gPS1 = new GPS();
      encomenda1.setDistancia((-575.863));
      encomenda1.setClassificacao((-95));
      gPS1.toString();
      gPS1.toString();
      gPS1.setY(1.2);
      GPS gPS2 = new GPS(gPS1);
      Encomenda encomenda2 = transportadoras0.entregaEncomendaTransportadora(encomenda1, gPS2, (-575.863));
      encomenda2.toString();
      transportadoras0.toString();
      transportadoras0.entregaEncomendaTransportadora(encomenda2, gPS2, (-575.863));
      transportadoras0.removeTransportadora("");
      transportadoras0.toString();
      transportadoras0.classificaTransportadora("Transportadoras:\n", 0);
      transportadoras0.existeTransportadora((String) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>();
      Transportadoras transportadoras0 = new Transportadoras(hashMap0);
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      transportadoras1.getTransportadoras();
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, 2229.02067621, 2229.02067621);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.setNumeroEncomendas((-2));
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador1.criaEncomenda("", (String) null, 0.0, linkedList0);
      utilizador1.clone();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setDuracao(2229.02067621);
      GPS gPS0 = new GPS();
      GPS gPS1 = new GPS(gPS0);
      transportadoras0.entregaEncomendaTransportadora(encomenda1, gPS1, 2229.02067621);
      Random.setNextRandom((-1));
      // Undeclared exception!
      try { 
        transportadoras1.setEstaLivreTransportadora((String) null, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora("", "Codigo: ", 1214.427368, 1.0, "Codigo: ", 1214.427368, (-1587.960548530167));
      transportadora0.getGPS();
      transportadora0.addKmsTotal((-1971.1566668));
      transportadora0.setName("");
      transportadoras0.addTransportadora(transportadora0);
      Transportadora transportadora1 = transportadoras0.getTransportadora("");
      transportadora1.setEstaLivre(false);
      transportadora1.toString();
      transportadoras0.addTransportadora(transportadora1);
      transportadoras0.toString();
      transportadoras0.classificaTransportadora("", (-506));
      Transportadoras transportadoras1 = transportadoras0.clone();
      String string0 = "FCYoagw< u";
      Boolean boolean0 = null;
      // Undeclared exception!
      try { 
        transportadoras1.addEncomendaTransportadora("", "", 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertFalse(transportadoras1.equals((Object)transportadoras0));
      
      String string0 = "\nPre\u00E7o por Km: ";
      String string1 = null;
      // Undeclared exception!
      try { 
        transportadoras0.setTransportadoras((Map<String, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora("Transportadoras:\n", "Transportadoras:\n", (-575.863), (-575.863), "Transportadoras:\n", (-575.863), 0.0);
      Transportadora transportadora1 = transportadora0.clone();
      transportadoras0.addTransportadora(transportadora1);
      GPS gPS0 = new GPS();
      gPS0.setXY(592.434319475, 592.434319475);
      transportadora0.setGps(gPS0);
      transportadoras0.decTransportadora("Transportadoras:\n");
      transportadoras0.existeTransportadora((String) null);
      transportadoras0.addTransportadora(transportadora0);
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("Transportadoras:\n", "Transportadoras:\n", "`)3K$&b$oIFB,[a[<[", (-575.863), linkedList0);
      Encomenda encomenda1 = encomenda0.clone();
      GPS gPS1 = new GPS();
      encomenda1.setClassificacao((-95));
      gPS1.toString();
      gPS1.toString();
      gPS1.setY(1.2);
      GPS gPS2 = new GPS(gPS1);
      Encomenda encomenda2 = transportadoras0.entregaEncomendaTransportadora(encomenda1, gPS2, (-575.863));
      encomenda2.toString();
      transportadoras0.toString();
      transportadoras0.entregaEncomendaTransportadora(encomenda2, gPS2, (-575.863));
      transportadoras0.removeTransportadora("");
      String string0 = transportadoras0.toString();
      assertEquals("Transportadoras:\n[Transportadora{ \nC\u00F3digo: Transportadoras:\n\nNome: Transportadoras:\n\nGPS: (592.434319475,592.434319475)\nNIF: Transportadoras:\n\nRaio: -575.863\nPre\u00E7o por Km: 0.0\nKms Total: 0.00\nClassificacao:0.00\n}]", string0);
      
      transportadoras0.classificaTransportadora("Transportadoras:\n", 0);
      boolean boolean0 = transportadoras0.existeTransportadora((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("h-OL9QPk\"F;q!gj8DY", "$hSF=bT&Oek", 0.0, 0.0, "h-OL9QPk\"F;q!gj8DY", (-355.0), (-355.0), true);
      transportadoras0.addTransportadora(transportadoraMed0);
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      Map<String, Transportadora> map0 = transportadoras1.getTransportadoras();
      Transportadoras transportadoras2 = new Transportadoras(map0);
      // Undeclared exception!
      try { 
        transportadoras2.decTransportadora("hp`s`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      transportadoras1.clone();
      String string0 = null;
      Transportadora transportadora0 = null;
      // Undeclared exception!
      try { 
        transportadoras0.addTransportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Transportadora> map0 = transportadoras0.getTransportadoras();
      Transportadoras transportadoras1 = new Transportadoras(map0);
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoras1.addTransportadora(transportadoraMed0);
      encomenda0.getLinhas();
      gPS0.setX(181.3689047);
      GPS gPS1 = gPS0.clone();
      Encomenda encomenda1 = transportadoras1.entregaEncomendaTransportadora(encomenda0, gPS1, 1187.5);
      transportadoras1.removeTransportadora("Transportadoras:\n");
      transportadoras1.classificaTransportadora("", (-713));
      transportadoras1.toString();
      Encomenda encomenda2 = transportadoras0.entregaEncomendaTransportadora(encomenda1, (GPS) null, 0.0);
      assertEquals(0.0, encomenda2.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.addEncomendaTransportadora("%kQhi", "jmN", 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      GPS gPS0 = new GPS();
      double double0 = 60.0;
      // Undeclared exception!
      try { 
        transportadoras0.entregaEncomendaTransportadora((Encomenda) null, gPS0, 60.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco(1.0);
      GPS gPS0 = new GPS(432.328, (-1.0));
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 432.328);
      encomenda1.setClassificacao(0);
      transportadoras1.entregaEncomendaTransportadora(encomenda1, gPS0, (-1.0));
      Map<String, Transportadora> map0 = transportadoras1.getTransportadoras();
      transportadoras0.setTransportadoras(map0);
      String string0 = "Transportadoras:\n";
      transportadoras0.existeTransportadora("Transportadoras:\n");
      String string1 = "";
      // Undeclared exception!
      try { 
        transportadoras1.decTransportadora("OT0Yl_U`YtiNHg0\"vf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Transportadora> map0 = transportadoras0.getTransportadoras();
      transportadoras0.setTransportadoras(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Map<String, Transportadora> map0 = null;
      Transportadoras transportadoras0 = null;
      try {
        transportadoras0 = new Transportadoras((Map<String, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.addEncomendaTransportadora("", "", 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = transportadoras0.clone();
      // Undeclared exception!
      try { 
        transportadoras1.decTransportadora("\nNIF: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.decTransportadora("MVC.Models.Catalogs.Transportadoras");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("m", ".~8Hf!YT", "", 2874.0, linkedList0);
      Encomenda encomenda1 = encomenda0.clone();
      GPS gPS0 = new GPS(2874.0, 60.0);
      GPS gPS1 = new GPS(gPS0);
      Encomenda encomenda2 = transportadoras0.entregaEncomendaTransportadora(encomenda1, gPS1, 1077.5775943627);
      assertNotSame(encomenda0, encomenda2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      Map<String, Transportadora> map0 = transportadoras1.getTransportadoras();
      Transportadoras transportadoras2 = new Transportadoras(map0);
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("\nCodigo do Entregador: ", (String) null, 0.0, 4.0, "\nDuracao: ", 0.0, (-491.701325), true, (-392));
      transportadoras1.addTransportadora(transportadoraMed0);
      String string0 = "LhU9J";
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      GPS gPS0 = new GPS();
      transportadoras0.entregaEncomendaTransportadora(encomenda1, gPS0, (-1.0));
      Boolean boolean0 = new Boolean("LhU9J");
      Boolean.logicalOr(true, true);
      // Undeclared exception!
      try { 
        transportadoras2.setEstaLivreTransportadora("LhU9J", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadoras transportadoras0 = null;
      try {
        transportadoras0 = new Transportadoras((Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      String string0 = null;
      String string1 = "X8>P";
      // Undeclared exception!
      try { 
        transportadoras0.incTransportadora("X8>P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      transportadoras1.removeTransportadora("{");
      assertFalse(transportadoras1.equals((Object)transportadoras0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      Encomenda encomenda0 = mock(Encomenda.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(encomenda0).getMedica();
      GPS gPS0 = mock(GPS.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        transportadoras1.entregaEncomendaTransportadora(encomenda0, gPS0, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      String string0 = null;
      // Undeclared exception!
      try { 
        transportadoras0.getTransportadora((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      Map<String, Transportadora> map0 = transportadoras1.getTransportadoras();
      Transportadoras transportadoras2 = new Transportadoras(map0);
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS();
      transportadoras2.entregaEncomendaTransportadora(encomenda0, gPS0, 1.2);
      // Undeclared exception!
      try { 
        transportadoras1.classificaTransportadora("", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("D", "D", 2.0, 2.0, "\";{=PaLGqy|Pf<2", 2.0, (-569.2804351), false);
      TransportadoraMed transportadoraMed1 = new TransportadoraMed(transportadoraMed0);
      transportadoraMed1.setGps(2710.0, (-569.2804351));
      hashMap0.put("D", transportadoraMed1);
      Transportadoras transportadoras0 = new Transportadoras(hashMap0);
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      transportadoras1.clone();
      String string0 = "";
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("\";{=PaLGqy|Pf<2", "}XXJhH:FZ__]1f", "", 2710.0, linkedList0);
      transportadoraMed1.setName("WXY0m0_^IxV1e+-Eo&v");
      GPS gPS0 = new GPS(2710.0, (-569.2804351));
      transportadoras0.clone();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      // Undeclared exception!
      try { 
        linkedList0.set((-1), linhaEncomenda0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco(1.0);
      GPS gPS0 = new GPS();
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 432.328);
      encomenda1.setClassificacao(0);
      transportadoras1.entregaEncomendaTransportadora(encomenda1, gPS0, (-1.0));
      Map<String, Transportadora> map0 = transportadoras1.getTransportadoras();
      transportadoras0.setTransportadoras(map0);
      String string0 = "Transportadoras:\n";
      transportadoras0.existeTransportadora("Transportadoras:\n");
      String string1 = "";
      // Undeclared exception!
      try { 
        transportadoras1.decTransportadora("OT0Yl_U`YtiNHg0\"vf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.getTransportadora("D]OxE<y\"JY,nrw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Transportadora> map0 = transportadoras0.getTransportadoras();
      Transportadoras transportadoras1 = new Transportadoras(map0);
      Transportadoras transportadoras2 = new Transportadoras(transportadoras1);
      Transportadora transportadora0 = new Transportadora();
      transportadora0.clone();
      transportadoras2.addTransportadora(transportadora0);
      transportadoras1.getTransportadoras();
      transportadoras2.toString();
      transportadoras1.getTransportadoras();
      String string0 = "L";
      // Undeclared exception!
      try { 
        transportadoras0.incTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      String string0 = "_Rb q|?/>";
      transportadoras0.existeTransportadora("_Rb q|?/>");
      // Undeclared exception!
      try { 
        transportadoras0.getTransportadora("_Rb q|?/>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      String string0 = "";
      int int0 = (-1251);
      // Undeclared exception!
      try { 
        transportadoras0.classificaTransportadora("", (-1251));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.removeTransportadora("");
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("Gidw;A%", "i8pN8XJ00;9@[j", 0.0, 0.0, "", 0.0, 669.572362297, false, 2737);
      TransportadoraMed transportadoraMed1 = new TransportadoraMed(transportadoraMed0);
      transportadoras0.addTransportadora(transportadoraMed1);
      transportadoras0.addEncomendaTransportadora((String) null, "Gidw;A%", 0.0);
      // Undeclared exception!
      try { 
        transportadoras0.incTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Transportadora> map0 = transportadoras0.getTransportadoras();
      Transportadoras transportadoras1 = new Transportadoras(map0);
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        transportadoras1.setEstaLivreTransportadora((String) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }
}
