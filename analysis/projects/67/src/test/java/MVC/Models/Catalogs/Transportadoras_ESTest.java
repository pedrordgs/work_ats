/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:29:32 GMT 2021
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.GPS;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Transportadora;
import MVC.Models.BaseModels.TransportadoraMed;
import MVC.Models.Catalogs.Transportadoras;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadoras_ESTest extends Transportadoras_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("5[atw9<6p77q%", "5[atw9<6p77q%", (-976.459), (-976.459), "Transportadoras:\n[]", (-976.459), (-976.459), false);
      transportadoraMed0.setCod("Transportadoras:\n[]");
      transportadoras0.addTransportadora(transportadoraMed0);
      Boolean boolean0 = new Boolean("Transportadoras:\n[]");
      transportadoras0.setEstaLivreTransportadora("Transportadoras:\n[]", boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("MVC.Models.BaseModels.Produto", "]IN[M", (-3188.841945), (-1.0), "]IN[M", (-1.0), 2992.107675549265, false);
      transportadoras0.addTransportadora(transportadoraMed0);
      transportadoras0.decTransportadora("MVC.Models.BaseModels.Produto");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", 0.0, 0.0, "", (-1356.0136689106253), 2537.7675582, true);
      transportadoras0.addTransportadora(transportadoraMed0);
      transportadoras0.addEncomendaTransportadora("dsXdJO:Hr;&J|Z", "", (-1227.5697));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>();
      Transportadoras transportadoras0 = new Transportadoras(hashMap0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora("", "\nC\u00F3digo Loja: ", 805.871, 805.871, "Codigo: ", 805.871, 0.0, 0);
      transportadoras0.addTransportadora(transportadora0);
      Transportadora transportadora1 = transportadoras0.getTransportadora("");
      assertEquals(805.871, transportadora1.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("y", "y", "MVC.Models.BaseModels.Classificacao", 435.970345, linkedList0);
      GPS gPS0 = new GPS();
      encomenda0.setPreco(1542.2055417629506);
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 435.970345);
      assertEquals("", encomenda1.getCodEntregador());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS();
      encomenda0.setPreco((-0.7333905416313427));
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, (-0.7333905416313427));
      assertEquals("", encomenda1.getCodEnc());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("4<iuW:Y", "4<iuW:Y", "4<iuW:Y", (-0.7333905416313427), list0);
      GPS gPS0 = new GPS();
      Encomenda encomenda2 = transportadoras0.entregaEncomendaTransportadora(encomenda1, gPS0, 1640.64247034);
      assertEquals("4<iuW:Y", encomenda2.getCodLoja());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("YMs;\"zsPl[arF.", "Q|W)0[q0+)nmjv H*Lk", "YMs;\"zsPl[arF.", 0.0, linkedList0);
      GPS gPS0 = new GPS();
      encomenda0.setDuracao(148.28731198404);
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 0.0);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora("", "\nC\u00F3digo Loja: ", 805.871, 805.871, "Codigo: ", 805.871, (-0.7261265016896399), 0);
      GPS gPS0 = transportadora0.getGPS();
      transportadoras0.addTransportadora(transportadora0);
      Encomenda encomenda0 = new Encomenda();
      transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, (-1356.0136689106253));
      assertEquals(-0.0, encomenda0.getPreco(), 0.01);
      assertEquals((-1356.0136689106253), encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS();
      encomenda0.setDistancia((-0.7333905416313427));
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, (-0.7333905416313427));
      assertEquals("", encomenda1.getCodEnc());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("MVC.Models.Catalogs.Transportadoras", "7OT", "", 2.0, linkedList0);
      GPS gPS0 = new GPS();
      encomenda0.setClassificacao((-285));
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, (-1022.6041461));
      assertSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.setTransportadoras((Map<String, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora("\"}u*,;j!Myp", "", 1.2, 1.2, "\"}u*,;j!Myp", 1.2, 1.2);
      GPS gPS0 = transportadora0.getGPS();
      // Undeclared exception!
      try { 
        transportadoras0.entregaEncomendaTransportadora((Encomenda) null, gPS0, (-1323.31058067611));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.addTransportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadoras transportadoras0 = null;
      try {
        transportadoras0 = new Transportadoras((Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Transportadora> map0 = transportadoras0.getTransportadoras();
      transportadoras0.setTransportadoras(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", 0.0, 0.0, "", 0.0, 2537.7675582, true);
      transportadoras0.addTransportadora(transportadoraMed0);
      boolean boolean0 = transportadoras0.existeTransportadora("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      boolean boolean0 = transportadoras0.existeTransportadora("KVl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadora transportadora0 = new Transportadora("", "\nC\u00F3digo Loja: ", 805.871, 805.871, "Codigo: ", 805.871, 0.0, 0);
      GPS gPS0 = transportadora0.getGPS();
      transportadoras0.addTransportadora(transportadora0);
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 0.0);
      assertEquals(0.0, encomenda1.getPreco(), 0.01);
      assertEquals(0.0, encomenda1.getDistancia(), 0.01);
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", 0.0, 0.0, "", 0.0, 2537.7675582, true);
      transportadoras0.addTransportadora(transportadoraMed0);
      Map<String, Transportadora> map0 = transportadoras0.getTransportadoras();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertNotSame(transportadoras1, transportadoras0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.getTransportadora("Y:'j0cT&8d7>{Qn\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.classificaTransportadora("", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      String string0 = transportadoras0.toString();
      assertEquals("Transportadoras:\n[]", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.removeTransportadora("(,@gH7/0r");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoras0.addTransportadora(transportadoraMed0);
      transportadoras0.classificaTransportadora("", (-743));
      Transportadora transportadora0 = transportadoras0.getTransportadora("");
      assertEquals((-743.0), transportadora0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      assertFalse(transportadoras1.equals((Object)transportadoras0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.decTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.incTransportadora("#\"PI.SmJg`Ba\"T{)1k$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.addEncomendaTransportadora("Transportadoras:\n[]", "Transportadoras:\n[]", 4.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transportadoras transportadoras0 = null;
      try {
        transportadoras0 = new Transportadoras((Map<String, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Boolean boolean0 = new Boolean("hlG#i");
      // Undeclared exception!
      try { 
        transportadoras0.setEstaLivreTransportadora("hlG#i", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }
}
