/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 17:54:49 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.GPS;
import MVC.Models.BaseModels.Loja;
import MVC.Models.BaseModels.Transportadora;
import MVC.Models.BaseModels.TransportadoraMed;
import MVC.Models.BaseModels.User;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.BaseModels.Voluntario;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      String string0 = transportadoraMed0.toString();
      assertEquals("Transportadora{ \nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\nNIF: \nRaio: 0.0\nPre\u00E7o por Km: 0.0\nKms Total: 0.00\nClassificacao:0.00\n}\nTransporta Medicamentos: false\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("\n", "=Qf_.", 425.69, 3654.196367445, "\n", 0.0, 425.69, true);
      boolean boolean0 = transportadoraMed0.isSenha("\n");
      assertEquals("=Qf_.", transportadoraMed0.getName());
      assertEquals("\n", transportadoraMed0.getCod());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("%B$ou%!JuY_", "\n", 0.0, 0.0, "%B$ou%!JuY_", 0.0, 0.0, false);
      String string0 = transportadoraMed0.getPass();
      assertEquals("%B$ou%!JuY_", string0);
      assertEquals("%B$ou%!JuY_", transportadoraMed0.getCod());
      assertEquals("\n", transportadoraMed0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      String string0 = voluntario0.getPass();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.setName((String) null);
      String string0 = transportadoraMed0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador(" , Valor Unit\u00E1rio: ", " , Valor Unit\u00E1rio: ", 0.0, 0.0);
      String string0 = utilizador0.getName();
      assertEquals(" , Valor Unit\u00E1rio: ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("TS", "-*IVj$#bs^88X{VlMhz", 44.344292, 44.344292, "'", 0.0, 60.0, false, 1);
      GPS gPS0 = transportadoraMed0.getGPS();
      assertEquals("TS", transportadoraMed0.getPass());
      assertEquals(44.344292, gPS0.getY(), 0.01);
      assertEquals("TS", transportadoraMed0.getCod());
      assertEquals(44.344292, gPS0.getX(), 0.01);
      assertEquals("-*IVj$#bs^88X{VlMhz", transportadoraMed0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Loja loja0 = new Loja((String) null, "p+", 60.0, 0.0);
      GPS gPS0 = loja0.getGPS();
      assertEquals(60.0, gPS0.getX(), 0.01);
      assertEquals(0.0, gPS0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("sPAHu;I[", "sPAHu;I[", (-1.0), (-1.0), "sPAHu;I[", (-1.0), (-1794.53639), true);
      GPS gPS0 = transportadoraMed0.getGPS();
      assertEquals((-1.0), gPS0.getX(), 0.01);
      assertEquals((-1.0), gPS0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.addEncomenda("C\u00F3digo: ");
      List<String> list0 = transportadoraMed0.getCodencomendas();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("\nDuracao: ", "", 0.0, 0.0, "", (-3897.8289), 0.0, true);
      String string0 = transportadoraMed0.getCod();
      assertEquals("\nDuracao: ", transportadoraMed0.getPass());
      assertEquals("\nDuracao: ", string0);
      assertEquals("", transportadoraMed0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("UCX$P", "UCX$P", 0.0, 0.0, "MVC.Models.BaseModels.User", (-786.8223), (-122.69977338636144), true);
      double double0 = transportadoraMed0.distanciaUser(transportadoraMed0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      Utilizador utilizador0 = new Utilizador("_fmF7awZ", "T`^]P_a$[9;!a`@", 389.4287581874398, (-131.1129743904063));
      double double0 = utilizador0.distanciaUser(transportadoraMed0);
      assertEquals(410.9079821041577, double0, 0.01);
      assertEquals("T`^]P_a$[9;!a`@", utilizador0.getName());
      assertEquals("_fmF7awZ", utilizador0.getPass());
      assertEquals("_fmF7awZ", utilizador0.getCod());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("5BV<ZAc`OFgLNd", "5BV<ZAc`OFgLNd", 1868.06980644, 1868.06980644, "MVC.Models.BaseModels.Voluntario", 1868.06980644, 1868.06980644, true);
      // Undeclared exception!
      try { 
        transportadoraMed0.setGps((GPS) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Loja loja0 = new Loja("", "MVC.Models.BaseModels.Encomenda", 1520.279189, (-1.0));
      String string0 = loja0.getCod();
      assertEquals("", string0);
      assertEquals("MVC.Models.BaseModels.Encomenda", loja0.getName());
      assertEquals("", loja0.getPass());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      List<String> list0 = utilizador0.getCodencomendas();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed((String) null, "", 1993.249747, 1993.249747, (String) null, 1993.249747, 1993.249747, true, 370);
      String string0 = transportadoraMed0.getPass();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      String string0 = transportadora0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Loja loja0 = new Loja((String) null, "p+", 60.0, 0.0);
      Loja loja1 = loja0.clone();
      // Undeclared exception!
      try { 
        loja0.equals(loja1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Loja loja0 = new Loja((String) null, "p+", 60.0, 0.0);
      boolean boolean0 = loja0.equals(loja0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      Voluntario voluntario0 = new Voluntario();
      GPS gPS0 = voluntario0.getGPS();
      transportadoraMed0.setGps(gPS0);
      assertEquals("", transportadoraMed0.getPass());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("UCX$P", "UCX$P", 0.0, 0.0, "MVC.Models.BaseModels.User", (-786.8223), (-122.69977338636144), true);
      boolean boolean0 = transportadoraMed0.isSenha("Bn`!Uux8Qhw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.setGps(836.7833, 1.0);
      assertEquals(0.0, transportadoraMed0.getKmsTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("UCX$P", "UCX$P", 0.0, 0.0, "MVC.Models.BaseModels.User", (-786.8223), (-122.69977338636144), true);
      transportadoraMed0.setPass("UCX$P");
      assertEquals(0.0, transportadoraMed0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("TS", "-*IVj$#bs^88X{VlMhz", 44.344292, 44.344292, "'", 0.0, 60.0, false, 1);
      // Undeclared exception!
      try { 
        transportadoraMed0.distanciaUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.setCod("");
      assertEquals(0.0, transportadoraMed0.getKmsTotal(), 0.01);
  }
}
