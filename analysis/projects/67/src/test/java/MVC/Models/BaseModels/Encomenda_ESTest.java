/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 17:49:08 GMT 2021
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.LinhaEncomenda;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getPeso();
      encomenda0.getPeso();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.toString();
      encomenda0.getClassificacao();
      encomenda0.calculaValorTotal();
      encomenda0.setDistancia(1685.48);
      encomenda0.setDistancia(3323.0655819898916);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      encomenda0.calculaValorTotal();
      encomenda0.getDistancia();
      encomenda0.setCodEntregador("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda0.calculaValorTotal();
      encomenda0.equals((Object) null);
      encomenda0.equals(encomenda0);
      Encomenda encomenda1 = encomenda0.clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.toString();
      encomenda1.setPreco(0.0);
      encomenda0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("J# =2u-~w5DQBBBo@2", "J# =2u-~w5DQBBBo@2", "F6W", (-1.0), list0);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda1.existeProdutoEncomenda("F6W");
      encomenda1.existeProdutoEncomenda("F6W");
      Encomenda encomenda3 = encomenda1.clone();
      encomenda1.setDistancia(2119.63817);
      encomenda3.setCodEntregador("lz)jBa");
      Boolean boolean0 = encomenda2.getMedica();
      Encomenda encomenda4 = encomenda3.clone();
      encomenda4.calculaValorTotal();
      encomenda2.getLinhas();
      encomenda3.setMedica(boolean0);
      encomenda2.existeProdutoEncomenda("rj5d+Buh9");
      encomenda3.equals(encomenda1);
      encomenda2.getCodLoja();
      Encomenda encomenda5 = new Encomenda("}hEL\"K_Z`p}jV", "MVC.Models.BaseModels.LinhaEncomenda", (String) null, 0.0, list0);
      encomenda2.equals(encomenda5);
      encomenda3.getMedica();
      encomenda0.getLinhas();
      Encomenda encomenda6 = encomenda1.clone();
      encomenda3.existeProdutoEncomenda("lz)jBa");
      encomenda3.getLinhas();
      encomenda1.getCodLoja();
      encomenda1.clone();
      encomenda6.clone();
      encomenda5.getCodLoja();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(60.0).when(linhaEncomenda1).calculaValorLinhaEnc();
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn((String) null).when(linhaEncomenda1).getCodigo();
      doReturn(0.0, (-1.0)).when(linhaEncomenda1).getQuantidade();
      doReturn((String) null, (String) null).when(linhaEncomenda1).toString();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda1).when(linhaEncomenda2).clone();
      encomenda0.adicionaLinha(linhaEncomenda2);
      encomenda0.toString();
      encomenda0.numeroTotalProdutos();
      encomenda0.calculaValorTotal();
      encomenda0.setClassificacao(0);
      encomenda0.toString();
      encomenda0.setDistancia(2004);
      encomenda0.numeroTotalProdutos();
      encomenda0.setDuracao(60.0);
      encomenda0.setClassificacao(2004);
      encomenda0.setPreco(0);
      encomenda0.getLinhas();
      encomenda0.existeProdutoEncomenda("}\n");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.calculaValorTotal();
      encomenda0.numeroTotalProdutos();
      encomenda0.setClassificacao(0);
      encomenda0.setDistancia((-3370.314155796));
      encomenda0.numeroTotalProdutos();
      encomenda0.calculaValorTotal();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((-1350.185676), (-3370.314155796)).when(linhaEncomenda1).calculaValorLinhaEnc();
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn((String) null).when(linhaEncomenda1).getCodigo();
      doReturn(0.0).when(linhaEncomenda1).getQuantidade();
      doReturn((String) null).when(linhaEncomenda1).toString();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda1).when(linhaEncomenda2).clone();
      encomenda0.adicionaLinha(linhaEncomenda2);
      encomenda0.toString();
      encomenda0.setClassificacao((-1));
      encomenda0.setDuracao(0);
      encomenda0.setDistancia((-610.0));
      encomenda0.getLinhas();
      encomenda0.numeroTotalProdutos();
      encomenda0.setClassificacao(0);
      encomenda0.setPreco((-1.0));
      encomenda0.setCodEntregador("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: [null]\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda0.getMedica();
      encomenda0.getPreco();
      encomenda0.calculaValorTotal();
      encomenda0.setClassificacao(1);
      encomenda0.getDistancia();
      encomenda0.getCodLoja();
      encomenda0.calculaValorTotal();
      encomenda0.getDistancia();
      encomenda0.getCodEntregador();
      encomenda0.setCodEntregador("\n");
      encomenda0.getMedica();
      encomenda0.existeProdutoEncomenda(")5X1&");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setDistancia(1.0);
      encomenda1.toString();
      encomenda1.getDuracao();
      encomenda1.setDistancia(0.0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(linhaEncomenda0).calculaValorLinhaEnc();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda1.adicionaLinha(linhaEncomenda1);
      encomenda0.getCodUser();
      encomenda1.calculaValorTotal();
      encomenda0.existeProdutoEncomenda("");
      encomenda0.getLinhas();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda2).clone();
      encomenda0.adicionaLinha(linhaEncomenda2);
      encomenda1.calculaValorTotal();
      encomenda1.setCodEntregador((String) null);
      encomenda1.getCodEntregador();
      encomenda1.setPreco(0.0);
      encomenda0.getPreco();
      encomenda1.getCodEntregador();
      encomenda1.setDuracao((-1.0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(2805.3).when(linhaEncomenda1).calculaValorLinhaEnc();
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn("J# =2u-~w5DQBBBo@2").when(linhaEncomenda1).getCodigo();
      doReturn(2805.3, 0.0).when(linhaEncomenda1).getQuantidade();
      doReturn("J# =2u-~w5DQBBBo@2", (String) null).when(linhaEncomenda1).toString();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda1).when(linhaEncomenda2).clone();
      encomenda0.adicionaLinha(linhaEncomenda2);
      encomenda0.toString();
      encomenda0.numeroTotalProdutos();
      encomenda0.calculaValorTotal();
      encomenda0.setClassificacao(0);
      encomenda0.toString();
      encomenda0.setDistancia(2004);
      encomenda0.numeroTotalProdutos();
      encomenda0.setDuracao(2805.3);
      encomenda0.setClassificacao(2004);
      encomenda0.setPreco(0);
      encomenda0.getLinhas();
      encomenda0.existeProdutoEncomenda("}\n");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      List<LinhaEncomenda> list1 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("\n", "\n", "x(cZi4O{z!5'", 0.0, list1);
      encomenda0.existeProdutoEncomenda("\n");
      encomenda0.existeProdutoEncomenda("\n");
      encomenda0.existeProdutoEncomenda("\n");
      encomenda1.existeProdutoEncomenda("x(cZi4O{z!5'");
      encomenda1.setDistancia(0.0);
      encomenda1.setLinhas(list0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn(0.0).when(linhaEncomenda0).getQuantidade();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda1.setDuracao((-25.9837626));
      encomenda1.adicionaLinha(linhaEncomenda1);
      encomenda1.calculaValorTotal();
      encomenda1.numeroTotalProdutos();
      encomenda1.getClassificacao();
      encomenda1.setClassificacao(0);
      encomenda1.setPreco(0.0);
      encomenda1.setDistancia(0);
      encomenda1.getLinhas();
      encomenda0.getLinhas();
      encomenda0.getDuracao();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "\nDuracao: ";
      double double0 = (-3727.1859);
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.setClassificacao(2374);
      encomenda1.toString();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda2 = new Encomenda("\nDuracao: ", "h :", "j/~SK4dI1x?[]RS5", (-3727.1859), list0);
      encomenda2.setLinhas(list0);
      encomenda0.getCodUser();
      encomenda0.getCodUser();
      // Undeclared exception!
      try { 
        encomenda2.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.calculaValorTotal();
      encomenda0.numeroTotalProdutos();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null, (LinhaEncomenda) null, (LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn((String) null).when(linhaEncomenda0).getCodigo();
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.setDistancia(0.0);
      encomenda0.setCodEntregador((String) null);
      encomenda0.clone();
      encomenda0.clone();
      encomenda0.existeProdutoEncomenda("91:Rd a-YL");
      encomenda0.setClassificacao(0);
      encomenda0.getDuracao();
      encomenda0.toString();
      encomenda0.setCodEntregador("MVC.Models.BaseModels.LinhaEncomenda");
      encomenda0.getCodEnc();
      encomenda0.setPreco(0.0);
      encomenda0.getLinhas();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.toString();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      Encomenda encomenda1 = new Encomenda("Chu:>pkH", (String) null, (String) null, 0.0, list0);
      encomenda1.numeroTotalProdutos();
      Boolean boolean0 = encomenda1.getMedica();
      encomenda1.setMedica(boolean0);
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.setClassificacao((-1826));
      encomenda1.getCodUser();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda2).clone();
      encomenda0.adicionaLinha(linhaEncomenda2);
      encomenda1.getCodUser();
      encomenda0.getMedica();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia(1167);
      encomenda0.calculaValorTotal();
      encomenda0.setClassificacao(1167);
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("e# !|gG[(k[4Y:F", "e# !|gG[(k[4Y:F", "e# !|gG[(k[4Y:F", 0.0, list0);
      encomenda0.clone();
      encomenda1.setPreco(0.0);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.setDistancia(1167);
      encomenda1.setCodEntregador("e# !|gG[(k[4Y:F");
      // Undeclared exception!
      try { 
        encomenda1.adicionaLinha((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao((-1004.8));
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setDuracao((-1004.8));
      encomenda0.setPreco(3900.48946421);
      encomenda0.setLinhas(list0);
      encomenda0.getClassificacao();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.getLinhas();
      Boolean boolean0 = encomenda1.getMedica();
      encomenda1.setMedica(boolean0);
      encomenda1.getCodLoja();
      encomenda1.setCodEntregador("");
      encomenda1.setPreco(0.0);
      encomenda0.getCodEntregador();
      encomenda0.setDistancia(2037.4443585262343);
      encomenda1.setClassificacao(0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.setDuracao((-1564.117450554));
      encomenda0.getDuracao();
      encomenda0.setDistancia(0.0);
      encomenda0.numeroTotalProdutos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        encomenda0.setLinhas((List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("]UqM8W`>u^@l,", "\nDuracao: ", "\nDuracao: ", (-2525.63623), list0);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda1.getLinhas();
      encomenda0.setCodEntregador("\nDuracao: ");
      encomenda1.setDuracao(0.0);
      encomenda2.getCodLoja();
      encomenda1.setCodEntregador("\nDuracao: ");
      encomenda2.toString();
      encomenda0.toString();
      encomenda0.existeProdutoEncomenda(":B");
      encomenda2.setLinhas(list0);
      encomenda2.getCodEntregador();
      encomenda2.toString();
      encomenda1.getPreco();
      encomenda2.existeProdutoEncomenda("'Wj");
      encomenda2.getCodEnc();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.clone();
      // Undeclared exception!
      try { 
        encomenda1.adicionaLinha((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia((-532.8));
      encomenda0.getLinhas();
      encomenda0.setDistancia((-3118.4617727536));
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.existeProdutoEncomenda("^`");
      encomenda1.calculaValorTotal();
      encomenda0.existeProdutoEncomenda("Qk>sFl9]1b946c/YN:");
      encomenda0.setCodEntregador("");
      encomenda0.getLinhas();
      encomenda0.getLinhas();
      encomenda0.numeroTotalProdutos();
      encomenda0.getCodEntregador();
      encomenda0.existeProdutoEncomenda("");
      encomenda1.getMedica();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.toString();
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      encomenda0.toString();
      Encomenda encomenda2 = new Encomenda("Codigo: ", "Codigo: ", "", 3027.4688474, list0);
      encomenda2.calculaValorTotal();
      encomenda0.existeProdutoEncomenda("#");
      Boolean boolean0 = encomenda0.getMedica();
      encomenda1.setPreco(60.0);
      encomenda1.getCodEnc();
      encomenda0.existeProdutoEncomenda("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda2.setDistancia(0.0);
      encomenda2.getCodLoja();
      encomenda1.setDistancia(3790.80632);
      encomenda1.getClassificacao();
      encomenda1.getLinhas();
      encomenda1.setMedica(boolean0);
      encomenda1.setMedica((Boolean) null);
      encomenda1.getMedica();
      encomenda1.setMedica((Boolean) null);
      encomenda2.setClassificacao(0);
      encomenda0.getPeso();
      encomenda0.setClassificacao(0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda();
      encomenda0.setDistancia((-1938.91246352071));
      Boolean boolean0 = encomenda1.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.getClassificacao();
      encomenda1.existeProdutoEncomenda("8UJ4Y");
      encomenda0.getDistancia();
      encomenda0.equals(boolean0);
      encomenda0.setMedica(boolean0);
      encomenda1.setDistancia((-1938.91246352071));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.setPreco(1740.1);
      encomenda0.setDuracao(1740.1);
      encomenda0.toString();
      encomenda0.setDuracao(1740.1);
      encomenda0.setCodEntregador("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 1740h :5 min\nPreco: 1740.10\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda0.setClassificacao((-3256));
      encomenda0.getClassificacao();
      encomenda0.setPreco((-3256));
      encomenda0.existeProdutoEncomenda("Ms#ylt^ei0`rd");
      Boolean boolean1 = encomenda0.getMedica();
      encomenda0.setMedica(boolean1);
      encomenda0.setDuracao(1279.89);
      encomenda0.getPeso();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setClassificacao((-3256));
      encomenda0.getCodEntregador();
      encomenda1.getLinhas();
      encomenda0.getPreco();
      encomenda0.setPreco((-1.0));
      encomenda1.getPeso();
      encomenda0.setClassificacao(2022);
      encomenda1.toString();
      encomenda1.getPeso();
      encomenda1.getCodLoja();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setPreco(1159.9042767);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      encomenda1.existeProdutoEncomenda("");
      Encomenda encomenda2 = new Encomenda("", "", "", 1159.9042767, list0);
      encomenda2.setDuracao(1159.9042767);
      encomenda0.numeroTotalProdutos();
      encomenda2.toString();
      encomenda2.getCodLoja();
      encomenda2.equals(encomenda0);
      encomenda0.getPreco();
      encomenda2.numeroTotalProdutos();
      encomenda0.getCodEnc();
      Boolean boolean0 = encomenda2.getMedica();
      encomenda2.setMedica(boolean0);
      encomenda1.setLinhas(list0);
      encomenda2.getLinhas();
      encomenda0.setCodEntregador("");
      Encomenda encomenda3 = new Encomenda((String) null, (String) null, "Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 1159.90\nDuracao: 1159h :54 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n", 0.0, list0);
      // Undeclared exception!
      try { 
        encomenda0.equals(encomenda3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco((-636.0));
      encomenda0.existeProdutoEncomenda(" , Quantidade: ");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.equals(encomenda1);
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.getDuracao();
      Boolean boolean1 = encomenda0.getMedica();
      encomenda1.setMedica(boolean1);
      encomenda0.calculaValorTotal();
      encomenda1.setClassificacao(2280);
      encomenda0.setClassificacao(2280);
      encomenda0.toString();
      encomenda1.getCodUser();
      encomenda1.getCodUser();
      encomenda1.getClassificacao();
      encomenda0.calculaValorTotal();
      encomenda0.getCodLoja();
      Boolean boolean2 = encomenda1.getMedica();
      encomenda0.setMedica(boolean2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("i|0(s", "7V64H2&*s*\"*AD#EA%", "7V64H2&*s*\"*AD#EA%", 1637.7087013563612, list0);
      encomenda1.setDuracao(2921.26226262375);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.getDuracao();
      encomenda1.numeroTotalProdutos();
      encomenda1.getPeso();
      encomenda1.clone();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      List<LinhaEncomenda> list1 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("\u0003{K?u+2_Bu4rX-p{", "\u0003{K?u+2_Bu4rX-p{", "", (-2164.683170864449), list1);
      encomenda0.setDistancia(0.0);
      encomenda1.setCodEntregador("MVC.Models.BaseModels.LinhaEncomenda");
      encomenda1.getPeso();
      encomenda0.getCodEnc();
      encomenda0.setPreco((-2164.683170864449));
      encomenda0.getPreco();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda("rj5d+Buh9", "rj5d+Buh9", "rj5d+Buh9", (-1211.0480455), list0);
      Encomenda encomenda3 = encomenda2.clone();
      encomenda2.toString();
      encomenda0.toString();
      encomenda2.setDuracao((-1211.0480455));
      encomenda2.setDistancia(46.9825);
      encomenda0.toString();
      encomenda1.getPeso();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda2.setPreco(0.0);
      encomenda2.setMedica(boolean0);
      encomenda3.equals(encomenda0);
      encomenda3.setMedica(boolean0);
      encomenda0.getDistancia();
      encomenda2.getLinhas();
      encomenda2.toString();
      encomenda1.getLinhas();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("\n", "_XILun7 P", "\nDuracao: ", 1600.895536266, list0);
      encomenda1.existeProdutoEncomenda((String) null);
      encomenda0.existeProdutoEncomenda((String) null);
      encomenda0.setDistancia(1600.895536266);
      encomenda0.getMedica();
      Encomenda encomenda2 = encomenda0.clone();
      encomenda0.setDuracao(0.0);
      encomenda1.setPreco(0.0);
      encomenda2.existeProdutoEncomenda((String) null);
      encomenda1.clone();
      encomenda2.getLinhas();
      Boolean boolean0 = encomenda2.getMedica();
      encomenda2.setMedica(boolean0);
      encomenda0.existeProdutoEncomenda("\n");
      encomenda1.getCodLoja();
      encomenda0.getMedica();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "/Y", "", 0.0, list0);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.setCodEntregador("");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getDistancia();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      Encomenda encomenda2 = new Encomenda(" j93e=w5", " j93e=w5", " j93e=w5", 0.0, list0);
      encomenda2.getCodUser();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, "", (-3168.80405902), list0);
      encomenda1.existeProdutoEncomenda((String) null);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda1.getLinhas();
      List<LinhaEncomenda> list1 = encomenda2.getLinhas();
      Encomenda encomenda3 = new Encomenda((String) null, "", "", (-3168.80405902), list1);
      encomenda1.getCodEnc();
      encomenda3.getCodUser();
      encomenda3.numeroTotalProdutos();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      encomenda2.adicionaLinha(linhaEncomenda1);
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        encomenda0.calculaValorTotal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "@xH>_8f@JFrOz}t<&{H";
      String string1 = "\nCodigo do Entregador: ";
      List<LinhaEncomenda> list0 = null;
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda(" , Produto: ", "@xH>_8f@JFrOz}t<&{H", "\nCodigo do Entregador: ", (-902.06), (List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.existeProdutoEncomenda("ZcuA}G%s2U");
      encomenda1.toString();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      encomenda0.toString();
      encomenda0.calculaValorTotal();
      encomenda0.numeroTotalProdutos();
      encomenda0.existeProdutoEncomenda((String) null);
      encomenda0.getLinhas();
      encomenda0.calculaValorTotal();
      encomenda0.setDuracao(0.0);
      encomenda1.getDistancia();
      encomenda0.getCodEntregador();
      encomenda0.setClassificacao((-2017));
      encomenda1.getPreco();
      encomenda1.calculaValorTotal();
      encomenda0.getDuracao();
      encomenda0.getCodEnc();
      encomenda1.toString();
      encomenda0.numeroTotalProdutos();
      encomenda0.setDistancia(0);
      encomenda0.setClassificacao(0);
      encomenda0.getPreco();
      Encomenda encomenda2 = new Encomenda("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n", "ZcuA}G%s2U", (String) null, 60.0, list0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda2.adicionaLinha(linhaEncomenda0);
      // Undeclared exception!
      try { 
        encomenda2.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setCodEntregador("T|");
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, "", (-1.0), list0);
      encomenda1.setDistancia((-1.0));
      encomenda0.numeroTotalProdutos();
      encomenda1.calculaValorTotal();
      Encomenda encomenda2 = new Encomenda();
      encomenda2.setDuracao(0);
      Boolean boolean0 = encomenda2.getMedica();
      encomenda1.setMedica(boolean0);
      encomenda1.setClassificacao(0);
      encomenda1.setCodEntregador("PSW)NmTzj+");
      encomenda1.equals((Object) null);
      encomenda1.numeroTotalProdutos();
      encomenda0.numeroTotalProdutos();
      encomenda0.getDuracao();
      encomenda0.getMedica();
      encomenda0.getLinhas();
      encomenda1.getCodEntregador();
      encomenda1.setClassificacao(0);
      encomenda0.getCodEntregador();
      encomenda1.setClassificacao(0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      // Undeclared exception!
      try { 
        encomenda0.getLinhas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "0,:g^8<\"h,\"be3*L";
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      Encomenda encomenda1 = new Encomenda("0,:g^8<\"h,\"be3*L", "0,:g^8<\"h,\"be3*L", "Encomenda{", 0.0, list0);
      encomenda1.numeroTotalProdutos();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda1.setDuracao(0);
      encomenda1.setClassificacao(0);
      encomenda1.numeroTotalProdutos();
      encomenda0.adicionaLinha(linhaEncomenda0);
      encomenda0.getMedica();
      // Undeclared exception!
      try { 
        encomenda0.numeroTotalProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-4985.796159525518);
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("\nClassificacao:", "\nClassificacao:", "\nClassificacao:", (-4985.796159525518), list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.clone();
      encomenda2.getDuracao();
      encomenda2.getPreco();
      encomenda0.numeroTotalProdutos();
      encomenda2.setCodEntregador("\n");
      encomenda1.setClassificacao(0);
      encomenda2.setDuracao(0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda2.adicionaLinha(linhaEncomenda0);
      encomenda1.getCodEnc();
      encomenda1.toString();
      encomenda0.getDuracao();
      encomenda1.getLinhas();
      // Undeclared exception!
      try { 
        encomenda2.existeProdutoEncomenda("7]mmr .");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda0.adicionaLinha(linhaEncomenda0);
      encomenda1.setDuracao((-4.0));
      // Undeclared exception!
      try { 
        encomenda0.numeroTotalProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco(446.0);
      encomenda0.setDuracao(0.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.numeroTotalProdutos();
      encomenda1.existeProdutoEncomenda("k9_w@Tb^zFd7kkSz}\"");
      encomenda1.setPreco((-1609.63202799));
      encomenda1.toString();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda1.equals(list0);
      Boolean boolean0 = encomenda0.getMedica();
      List<LinhaEncomenda> list1 = encomenda0.getLinhas();
      encomenda0.numeroTotalProdutos();
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.equals(boolean0);
      encomenda2.equals(encomenda1);
      Encomenda encomenda3 = encomenda2.clone();
      encomenda3.getLinhas();
      encomenda3.toString();
      encomenda3.existeProdutoEncomenda("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: -1609.63\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda2.setCodEntregador("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: -1609.63\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda0.numeroTotalProdutos();
      encomenda3.setDuracao((-1.0));
      encomenda2.equals("7G<4+");
      encomenda2.getLinhas();
      encomenda3.getMedica();
      encomenda0.toString();
      encomenda1.getLinhas();
      encomenda2.getMedica();
      encomenda0.getLinhas();
      encomenda2.toString();
      encomenda2.getLinhas();
      encomenda2.equals(list1);
      encomenda0.equals(list0);
      encomenda2.existeProdutoEncomenda("HsAwl-[0bBNyAncU$");
      encomenda3.getMedica();
      encomenda0.toString();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn((String) null).when(linhaEncomenda0).getCodigo();
      doReturn(0.0).when(linhaEncomenda0).getQuantidade();
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.calculaValorTotal();
      encomenda0.setClassificacao(0);
      encomenda0.toString();
      encomenda0.setDistancia(2004);
      encomenda0.numeroTotalProdutos();
      encomenda0.setDuracao(0.0);
      encomenda0.setClassificacao(2004);
      encomenda0.setPreco(0);
      encomenda0.getLinhas();
      encomenda0.existeProdutoEncomenda("}\n");
      encomenda0.getCodEnc();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda2).clone();
      encomenda0.adicionaLinha(linhaEncomenda2);
      LinhaEncomenda linhaEncomenda3 = null;
      // Undeclared exception!
      try { 
        encomenda0.adicionaLinha((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "O", "F", (-1.0), list0);
      encomenda1.clone();
      encomenda1.getDistancia();
      encomenda1.existeProdutoEncomenda("O");
      encomenda1.setCodEntregador("%.2f");
      encomenda0.setDuracao((-1473.096690945));
      encomenda0.getCodEntregador();
      encomenda1.getPeso();
      encomenda1.getCodEntregador();
      encomenda0.getMedica();
      encomenda0.equals("");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setPreco(1159.9042767);
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      encomenda1.existeProdutoEncomenda("");
      Encomenda encomenda2 = new Encomenda("", "", "", 1159.9042767, list0);
      encomenda2.setDuracao(1159.9042767);
      encomenda0.numeroTotalProdutos();
      encomenda2.toString();
      encomenda2.getCodLoja();
      encomenda2.equals(encomenda0);
      encomenda0.getPreco();
      encomenda0.getCodEnc();
      Boolean boolean0 = encomenda2.getMedica();
      encomenda2.setMedica(boolean0);
      encomenda1.setLinhas(list0);
      encomenda2.getLinhas();
      encomenda0.setCodEntregador("");
      Encomenda encomenda3 = new Encomenda((String) null, (String) null, "Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 1159.90\nDuracao: 1159h :54 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n", 0.0, list0);
      // Undeclared exception!
      try { 
        encomenda0.equals(encomenda3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("Codigo: ", "Codigo: ", "", (-565.951812173), list0);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      encomenda1.clone();
      Boolean boolean0 = encomenda1.getMedica();
      encomenda1.setMedica(boolean0);
      encomenda0.adicionaLinha(linhaEncomenda0);
      encomenda1.setLinhas(list0);
      encomenda1.toString();
      encomenda1.getPeso();
      Encomenda encomenda2 = encomenda1.clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      encomenda2.adicionaLinha(linhaEncomenda1);
      encomenda0.getCodLoja();
      encomenda0.setClassificacao((-4402));
      encomenda1.equals("");
      // Undeclared exception!
      try { 
        encomenda0.existeProdutoEncomenda("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.calculaValorTotal();
      encomenda0.numeroTotalProdutos();
      encomenda0.setClassificacao(0);
      encomenda0.setDistancia((-3370.314155796));
      encomenda0.numeroTotalProdutos();
      encomenda0.calculaValorTotal();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(linhaEncomenda1).calculaValorLinhaEnc();
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn(",K").when(linhaEncomenda1).getCodigo();
      doReturn(0.0).when(linhaEncomenda1).getQuantidade();
      doReturn(",K").when(linhaEncomenda1).toString();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda1).when(linhaEncomenda2).clone();
      encomenda0.adicionaLinha(linhaEncomenda2);
      encomenda0.toString();
      encomenda0.setClassificacao((-1));
      encomenda0.setDuracao(0);
      encomenda0.setDistancia((-610.0));
      encomenda0.getLinhas();
      encomenda0.numeroTotalProdutos();
      encomenda0.setClassificacao(0);
      encomenda0.setPreco((-1.0));
      encomenda0.setCodEntregador("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: [,K]\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda0.getMedica();
      encomenda0.getPreco();
      encomenda0.calculaValorTotal();
      encomenda0.setClassificacao(1);
      encomenda0.getDistancia();
      encomenda0.getCodLoja();
      encomenda0.calculaValorTotal();
      encomenda0.getDistancia();
      encomenda0.getCodEntregador();
      encomenda0.setCodEntregador("\n");
      encomenda0.getMedica();
      encomenda0.existeProdutoEncomenda(")5X1&");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("\nC\u00F3digo Encomenda: ", "", "\nC\u00F3digo Encomenda: ", (-383.8517853510061), list0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      Encomenda encomenda3 = new Encomenda(encomenda2);
      encomenda0.getCodEntregador();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.toString();
      encomenda1.existeProdutoEncomenda("F +Ug1yU0c<$2KlD6");
      List<LinhaEncomenda> list0 = encomenda1.getLinhas();
      encomenda1.setPreco((-1972.51814));
      Encomenda encomenda2 = new Encomenda("", "", "", (-1972.51814), list0);
      encomenda2.getCodLoja();
      Encomenda encomenda3 = encomenda0.clone();
      encomenda3.getLinhas();
      encomenda3.setLinhas(list0);
      encomenda3.setCodEntregador("cFA)|E:Hqc&\";~\f+[");
      encomenda3.setPreco((-1972.51814));
      encomenda3.getMedica();
      encomenda3.numeroTotalProdutos();
      encomenda1.setClassificacao(0);
      encomenda2.getLinhas();
      encomenda3.setCodEntregador("F +Ug1yU0c<$2KlD6");
      encomenda0.setCodEntregador("d%s@>@qGhl");
      encomenda2.getCodUser();
      encomenda0.toString();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getLinhas();
      encomenda0.clone();
      encomenda0.setPreco((-1.0));
      encomenda0.numeroTotalProdutos();
      encomenda0.getLinhas();
      encomenda0.setCodEntregador("");
      encomenda0.getDuracao();
      encomenda0.getPeso();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.getCodEntregador();
      encomenda0.getCodUser();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.toString();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getPeso();
      encomenda0.getPeso();
      Boolean boolean0 = encomenda0.getMedica();
      encomenda0.setMedica(boolean0);
      encomenda0.toString();
      encomenda0.getClassificacao();
      encomenda0.calculaValorTotal();
      encomenda0.setDistancia(1685.48);
      encomenda0.setDistancia(3323.0655819898916);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(linhaEncomenda0).calculaValorLinhaEnc();
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda0.adicionaLinha(linhaEncomenda1);
      encomenda0.calculaValorTotal();
      encomenda0.getDistancia();
      encomenda0.setCodEntregador("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n");
      encomenda0.calculaValorTotal();
      encomenda0.equals((Object) null);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.equals(encomenda1);
      // Undeclared exception!
      try { 
        encomenda1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao((-2322.810343747));
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Encomenda encomenda2 = encomenda0.clone();
      encomenda2.existeProdutoEncomenda(" , Quantidade: ");
      encomenda2.clone();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      encomenda2.adicionaLinha(linhaEncomenda1);
      encomenda1.setClassificacao((-1512));
      encomenda1.setDistancia((-2322.810343747));
      encomenda1.existeProdutoEncomenda("");
      encomenda0.getLinhas();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda2).clone();
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda2).when(linhaEncomenda3).clone();
      encomenda1.adicionaLinha(linhaEncomenda3);
      LinhaEncomenda linhaEncomenda4 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda4).clone();
      LinhaEncomenda linhaEncomenda5 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda4).when(linhaEncomenda5).clone();
      encomenda1.adicionaLinha(linhaEncomenda5);
      encomenda1.setClassificacao(1);
      encomenda0.getLinhas();
      encomenda1.getCodLoja();
      encomenda1.setPreco((-1512));
      encomenda1.clone();
      encomenda1.getCodEntregador();
      assertEquals((-2322.810343747), encomenda0.getDuracao(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
  }
}
