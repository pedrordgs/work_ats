/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:20:54 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalQuery;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataBase_ESTest extends DataBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendas();
      assertNotNull(set0);
      assertEquals(4, set0.size());
      assertFalse(set0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t9");
      assertFalse(boolean0);
      
      Set<Encomenda> set1 = dataBase0.getEncomendasTrans("t9");
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(4, set1.size());
      
      Set<Encomenda> set2 = dataBase0.getEncomendasLoja("t9");
      assertFalse(set2.equals((Object)set0));
      assertFalse(set2.equals((Object)set1));
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      
      Voluntario voluntario0 = new Voluntario();
      assertNotNull(voluntario0);
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelmed());
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.estaDisponivel());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getLicMedicamentos());
      
      dataBase0.add(voluntario0);
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelmed());
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.estaDisponivel());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getLicMedicamentos());
      
      voluntario0.setVelmed((-2812));
      assertEquals((-2812), voluntario0.getVelmed());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.estaDisponivel());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getLicMedicamentos());
      
      Set<Encomenda> set3 = dataBase0.getEncomendaAceitaCusto();
      assertTrue(set3.equals((Object)set2));
      assertFalse(set3.equals((Object)set0));
      assertFalse(set3.equals((Object)set1));
      assertNotSame(set3, set0);
      assertNotSame(set3, set2);
      assertNotSame(set3, set1);
      assertNotNull(set3);
      assertTrue(set3.isEmpty());
      assertEquals(0, set3.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      dataBase0.add((Perfil) voluntario0);
      assertEquals((-2812), voluntario0.getVelmed());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.estaDisponivel());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getLicMedicamentos());
      
      Set<Encomenda> set4 = dataBase0.getEncomendasTrans("7W1FmWs&");
      assertFalse(set4.equals((Object)set0));
      assertTrue(set4.equals((Object)set2));
      assertTrue(set4.equals((Object)set3));
      assertFalse(set4.equals((Object)set1));
      assertNotSame(set4, set0);
      assertNotSame(set4, set3);
      assertNotSame(set4, set1);
      assertNotSame(set4, set2);
      assertNotNull(set4);
      assertTrue(set4.isEmpty());
      assertEquals(0, set4.size());
      
      boolean boolean2 = dataBase0.existeUtilizador("Jo");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Set<Encomenda> set5 = dataBase0.getEncomendasUser("7W1FmWs&");
      assertFalse(set5.equals((Object)set0));
      assertTrue(set5.equals((Object)set4));
      assertTrue(set5.equals((Object)set2));
      assertFalse(set5.equals((Object)set1));
      assertTrue(set5.equals((Object)set3));
      assertNotSame(set5, set2);
      assertNotSame(set5, set4);
      assertNotSame(set5, set0);
      assertNotSame(set5, set3);
      assertNotSame(set5, set1);
      assertNotNull(set5);
      assertTrue(set5.isEmpty());
      assertEquals(0, set5.size());
      
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Utilizador> list0 = dataBase0.ordenarUsers(comparator0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean3 = dataBase0.existeUtilizador("@$89n#m^pgw");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Loja loja0 = dataBase0.getLoja("2cf_B6-xs)a");
      assertNull(loja0);
      
      String string0 = "";
      Instant instant0 = MockInstant.ofEpochSecond((-2585L));
      assertNotNull(instant0);
      
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      assertEquals(ChronoUnit.ERAS, chronoUnit0);
      
      // Undeclared exception!
      try { 
        MockInstant.truncatedTo(instant0, chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unit is too large to be used for truncation
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans("");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Set<Encomenda> set1 = dataBase0.getEncomendas();
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertEquals(4, set1.size());
      assertFalse(set1.isEmpty());
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      
      String string0 = utilizador0.toString();
      assertEquals("Perfil: \n\n\n(0.0,0.0)\nNumero de Encomenda: 0\n", string0);
      assertNotNull(string0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      
      Ponto2D ponto2D1 = new Ponto2D(ponto2D0);
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotNull(ponto2D1);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      
      dataBase0.add((Perfil) utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      
      boolean boolean0 = dataBase0.existeUtilizador("");
      assertTrue(boolean0);
      
      Set<Encomenda> set2 = dataBase0.getEncomendaNaoAceitaCusto();
      assertFalse(set2.equals((Object)set1));
      assertTrue(set2.equals((Object)set0));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      assertNotNull(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      
      Set<Encomenda> set3 = dataBase0.getEncomendaNaoAceitaCusto();
      assertFalse(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set0));
      assertTrue(set3.equals((Object)set2));
      assertNotSame(set3, set1);
      assertNotSame(set3, set2);
      assertNotSame(set3, set0);
      assertNotNull(set3);
      assertEquals(0, set3.size());
      assertTrue(set3.isEmpty());
      
      Set<Encomenda> set4 = dataBase0.getEncomendasLoja("}Vdbx.TUt[_PP4]eX_");
      assertTrue(set4.equals((Object)set3));
      assertTrue(set4.equals((Object)set2));
      assertTrue(set4.equals((Object)set0));
      assertFalse(set4.equals((Object)set1));
      assertNotSame(set4, set3);
      assertNotSame(set4, set0);
      assertNotSame(set4, set2);
      assertNotSame(set4, set1);
      assertNotNull(set4);
      assertTrue(set4.isEmpty());
      assertEquals(0, set4.size());
      
      Utilizador utilizador1 = dataBase0.getUtilizador("");
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador1.getPassword());
      assertEquals(0, utilizador1.getNumEnc());
      assertEquals("", utilizador1.getEmail());
      assertEquals("", utilizador1.getNome());
      
      Perfil perfil0 = dataBase0.getPerfil("wrS");
      assertNull(perfil0);
      
      dataBase0.addEncAceite("");
      Perfil perfil1 = dataBase0.getPerfil("^52!'");
      assertNull(perfil1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans("");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendas();
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(4, set1.size());
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      
      String string0 = utilizador0.toString();
      assertEquals("Perfil: \n\n\n(0.0,0.0)\nNumero de Encomenda: 0\n", string0);
      assertNotNull(string0);
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      
      dataBase0.add((Perfil) utilizador0);
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      
      Loja loja0 = new Loja();
      assertNotNull(loja0);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getMorada());
      assertEquals("", loja0.getPassword());
      
      dataBase0.add(loja0);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getMorada());
      assertEquals("", loja0.getPassword());
      
      Set<Encomenda> set2 = dataBase0.getEncomendasTrans("");
      assertFalse(set2.equals((Object)set1));
      assertTrue(set2.equals((Object)set0));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      
      boolean boolean1 = dataBase0.existeUtilizador("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Set<Encomenda> set3 = dataBase0.getEncomendaNaoAceitaCusto();
      assertTrue(set3.equals((Object)set2));
      assertTrue(set3.equals((Object)set0));
      assertFalse(set3.equals((Object)set1));
      assertNotSame(set3, set2);
      assertNotSame(set3, set0);
      assertNotSame(set3, set1);
      assertNotNull(set3);
      assertTrue(set3.isEmpty());
      assertEquals(0, set3.size());
      
      Set<Encomenda> set4 = dataBase0.getEncomendaNaoAceitaCusto();
      assertTrue(set4.equals((Object)set2));
      assertTrue(set4.equals((Object)set3));
      assertFalse(set4.equals((Object)set1));
      assertTrue(set4.equals((Object)set0));
      assertNotSame(set4, set1);
      assertNotSame(set4, set2);
      assertNotSame(set4, set3);
      assertNotSame(set4, set0);
      assertNotNull(set4);
      assertEquals(0, set4.size());
      assertTrue(set4.isEmpty());
      
      Set<Encomenda> set5 = dataBase0.getEncomendasLoja("");
      assertTrue(set5.equals((Object)set0));
      assertTrue(set5.equals((Object)set2));
      assertTrue(set5.equals((Object)set3));
      assertFalse(set5.equals((Object)set1));
      assertTrue(set5.equals((Object)set4));
      assertNotSame(set5, set3);
      assertNotSame(set5, set2);
      assertNotSame(set5, set4);
      assertNotSame(set5, set0);
      assertNotSame(set5, set1);
      assertNotNull(set5);
      assertTrue(set5.isEmpty());
      assertEquals(0, set5.size());
      
      Utilizador utilizador1 = dataBase0.getUtilizador("Perfil: \n\n\n(0.0,0.0)\nNumero de Encomenda: 0\n");
      assertNull(utilizador1);
      
      Perfil perfil0 = dataBase0.getPerfil("wrS");
      assertNull(perfil0);
      
      dataBase0.addEncAceite("");
      Loja loja1 = (Loja)dataBase0.getPerfil("");
      assertTrue(loja1.equals((Object)loja0));
      assertNotSame(loja1, loja0);
      assertNotNull(loja1);
      assertEquals("", loja1.getEmail());
      assertEquals("", loja1.getMorada());
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getTempoEspera());
      assertEquals("", loja1.getNome());
      
      Perfil perfil1 = dataBase0.getPerfil("^52!'");
      assertNull(perfil1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mV?$Hp4 'MSjq=7PP");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      encomenda0.setProdutos(hashMap0);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      encomenda0.setEnc(")");
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(")", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      
      Set<Encomenda> set0 = dataBase0.getEncomendasUser((String) null);
      assertFalse(set0.contains(encomenda0));
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasLoja("k v) K*}S<bV2>");
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertFalse(set1.contains(encomenda0));
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      dataBase0.addEnc(encomenda0);
      assertEquals("", encomenda0.getUser());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(")", encomenda0.getEnc());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1), encomenda0.getEstado());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(0, encomenda0.getAceitaCusto());
      
      Set<Encomenda> set2 = dataBase0.getEncomendaNaoAceitaCusto();
      assertFalse(set2.equals((Object)set0));
      assertFalse(set2.equals((Object)set1));
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      assertTrue(set2.contains(encomenda0));
      assertNotNull(set2);
      assertEquals(1, set2.size());
      assertFalse(set2.isEmpty());
      
      Utilizador utilizador0 = dataBase0.getUtilizador("EncomendaNaoExisteException");
      assertNull(utilizador0);
      
      Set<Encomenda> set3 = dataBase0.getEncomendasLoja("q.");
      assertFalse(set3.equals((Object)set2));
      assertTrue(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set0));
      assertNotSame(set3, set0);
      assertNotSame(set3, set1);
      assertNotSame(set3, set2);
      assertFalse(set3.contains(encomenda0));
      assertNotNull(set3);
      assertEquals(0, set3.size());
      assertTrue(set3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "|3xc[Ztk\"WF3\"^iC/h";
      boolean boolean0 = dataBase0.existeUtilizador("|3xc[Ztk\"WF3\"^iC/h");
      assertFalse(boolean0);
      
      DataBase dataBase1 = new DataBase();
      assertFalse(dataBase1.equals((Object)dataBase0));
      assertNotNull(dataBase1);
      
      Empresa empresa0 = new Empresa("t9", "e3482", "0oPfX", (Ponto2D) null, (-1.0), 0, 0, "|UzPjA5-&H,0c3", 0, 0);
      assertNotNull(empresa0);
      assertEquals(0, empresa0.getVelmed());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals((-1.0), empresa0.getRaio(), 0.01);
      assertEquals("|UzPjA5-&H,0c3", empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals("0oPfX", empresa0.getPassword());
      assertEquals("t9", empresa0.getEmail());
      assertEquals("e3482", empresa0.getNome());
      
      dataBase1.add(empresa0);
      assertFalse(dataBase1.equals((Object)dataBase0));
      assertNotSame(dataBase1, dataBase0);
      assertEquals(0, empresa0.getVelmed());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals((-1.0), empresa0.getRaio(), 0.01);
      assertEquals("|UzPjA5-&H,0c3", empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals("0oPfX", empresa0.getPassword());
      assertEquals("t9", empresa0.getEmail());
      assertEquals("e3482", empresa0.getNome());
      
      // Undeclared exception!
      try { 
        dataBase1.addEnc((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendaAceitaCusto();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      
      utilizador0.setNum(2013);
      assertEquals("", utilizador0.getNome());
      assertEquals(2013, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      
      utilizador0.setPassword("_zoB");
      assertEquals("", utilizador0.getNome());
      assertEquals(2013, utilizador0.getNumEnc());
      assertEquals("_zoB", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      
      String string0 = "vf8<N@jm^+fuV/z_";
      utilizador0.incNumEnc();
      assertEquals("", utilizador0.getNome());
      assertEquals(2014, utilizador0.getNumEnc());
      assertEquals("_zoB", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      
      utilizador0.setPassword("vf8<N@jm^+fuV/z_");
      assertEquals("", utilizador0.getNome());
      assertEquals(2014, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertEquals("vf8<N@jm^+fuV/z_", utilizador0.getPassword());
      
      String string1 = utilizador0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Perfil: \n\nvf8<N@jm^+fuV/z_\n(0.0,0.0)\nNumero de Encomenda: 2014\n", string1);
      assertNotNull(string1);
      assertEquals("", utilizador0.getNome());
      assertEquals(2014, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertEquals("vf8<N@jm^+fuV/z_", utilizador0.getPassword());
      
      utilizador0.setNum((-3557));
      assertEquals("", utilizador0.getNome());
      assertEquals((-3557), utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertEquals("vf8<N@jm^+fuV/z_", utilizador0.getPassword());
      
      utilizador0.setNome("vf8<N@jm^+fuV/z_");
      assertEquals((-3557), utilizador0.getNumEnc());
      assertEquals("vf8<N@jm^+fuV/z_", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals("vf8<N@jm^+fuV/z_", utilizador0.getPassword());
      
      String string2 = utilizador0.toString();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Perfil: \nvf8<N@jm^+fuV/z_\nvf8<N@jm^+fuV/z_\n(0.0,0.0)\nNumero de Encomenda: -3557\n", string2);
      assertNotNull(string2);
      assertEquals((-3557), utilizador0.getNumEnc());
      assertEquals("vf8<N@jm^+fuV/z_", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals("vf8<N@jm^+fuV/z_", utilizador0.getPassword());
      
      utilizador0.setEmail("_zoB");
      assertEquals((-3557), utilizador0.getNumEnc());
      assertEquals("vf8<N@jm^+fuV/z_", utilizador0.getNome());
      assertEquals("_zoB", utilizador0.getEmail());
      assertEquals("vf8<N@jm^+fuV/z_", utilizador0.getPassword());
      
      dataBase0.add(utilizador0);
      assertEquals((-3557), utilizador0.getNumEnc());
      assertEquals("vf8<N@jm^+fuV/z_", utilizador0.getNome());
      assertEquals("_zoB", utilizador0.getEmail());
      assertEquals("vf8<N@jm^+fuV/z_", utilizador0.getPassword());
      
      Set<Encomenda> set1 = dataBase0.getEncomendaAceitaCusto();
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      Perfil perfil0 = dataBase0.getPerfil("t9");
      assertNull(perfil0);
      
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Utilizador> list0 = dataBase0.ordenarUsers(comparator0);
      assertTrue(list0.contains(utilizador0));
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Set<Encomenda> set2 = dataBase0.getEncomendaAceitaCusto();
      assertTrue(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      
      boolean boolean0 = dataBase0.existeUtilizador("_zoB");
      assertTrue(boolean0);
      
      Set<Encomenda> set3 = dataBase0.getEncomendaAceitaCusto();
      assertTrue(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set0));
      assertTrue(set3.equals((Object)set2));
      assertNotSame(set3, set0);
      assertNotSame(set3, set2);
      assertNotSame(set3, set1);
      assertNotNull(set3);
      assertTrue(set3.isEmpty());
      assertEquals(0, set3.size());
      
      Set<Encomenda> set4 = dataBase0.getEncomendaNaoAceitaCusto();
      assertTrue(set4.equals((Object)set1));
      assertTrue(set4.equals((Object)set3));
      assertTrue(set4.equals((Object)set0));
      assertTrue(set4.equals((Object)set2));
      assertNotSame(set4, set0);
      assertNotSame(set4, set2);
      assertNotSame(set4, set1);
      assertNotSame(set4, set3);
      assertNotNull(set4);
      assertTrue(set4.isEmpty());
      assertEquals(0, set4.size());
      
      Empresa empresa0 = dataBase0.getEmpresa("t9");
      assertNull(empresa0);
      
      dataBase0.addEncAceite("\nTData: ");
      Set<Encomenda> set5 = dataBase0.getEncomendaNaoAceitaCusto();
      assertTrue(set5.equals((Object)set1));
      assertTrue(set5.equals((Object)set3));
      assertTrue(set5.equals((Object)set2));
      assertTrue(set5.equals((Object)set0));
      assertTrue(set5.equals((Object)set4));
      assertNotSame(set5, set4);
      assertNotSame(set5, set0);
      assertNotSame(set5, set2);
      assertNotSame(set5, set1);
      assertNotSame(set5, set3);
      assertNotNull(set5);
      assertTrue(set5.isEmpty());
      assertEquals(0, set5.size());
      
      // Undeclared exception!
      try { 
        dataBase0.getVoluntario("_zoB");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Utilizador cannot be cast to Voluntario
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendas();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(4, set0.size());
      
      String string0 = "";
      double double0 = 0.0;
      Ponto2D ponto2D0 = new Ponto2D(0.0, 0.0);
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      Ponto2D ponto2D1 = new Ponto2D(ponto2D0);
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotNull(ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      
      int int0 = 0;
      ponto2D1.setX((-1546.384816));
      assertFalse(ponto2D0.equals((Object)ponto2D1));
      assertFalse(ponto2D1.equals((Object)ponto2D0));
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals((-1546.384816), ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      
      Voluntario voluntario0 = new Voluntario("", "", "", ponto2D1, 0.0, 0, 0, false);
      assertFalse(ponto2D0.equals((Object)ponto2D1));
      assertFalse(ponto2D1.equals((Object)ponto2D0));
      assertNotNull(voluntario0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals((-1546.384816), ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0, voluntario0.getLicMedicamentos());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals(0, voluntario0.getVelmed());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.estaDisponivel());
      assertEquals("", voluntario0.getNome());
      
      String string1 = voluntario0.toString();
      assertFalse(ponto2D0.equals((Object)ponto2D1));
      assertFalse(ponto2D1.equals((Object)ponto2D0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Perfil: \n\n\n(-1546.384816,0.0)\nRaio de a\u00E7ao: 0.0\nVelocidade media: 0\nLicen\u00E7a de transporte de medicamentos: 0\n", string1);
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
      assertNotNull(string1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals((-1546.384816), ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0, voluntario0.getLicMedicamentos());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals(0, voluntario0.getVelmed());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.estaDisponivel());
      assertEquals("", voluntario0.getNome());
      
      dataBase0.add(voluntario0);
      assertFalse(ponto2D0.equals((Object)ponto2D1));
      assertFalse(ponto2D1.equals((Object)ponto2D0));
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals((-1546.384816), ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0, voluntario0.getLicMedicamentos());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals(0, voluntario0.getVelmed());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.estaDisponivel());
      assertEquals("", voluntario0.getNome());
      
      Set<Encomenda> set1 = dataBase0.getEncomendas();
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertEquals(4, set1.size());
      assertFalse(set1.isEmpty());
      
      String string2 = "";
      // Undeclared exception!
      try { 
        dataBase0.getEmpresa("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Voluntario cannot be cast to Empresa
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "";
      String string1 = "";
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans("");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasUser("");
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertEquals(4, set1.size());
      assertFalse(set1.isEmpty());
      
      Set<Encomenda> set2 = dataBase0.getEncomendas();
      assertTrue(set2.equals((Object)set1));
      assertFalse(set2.equals((Object)set0));
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      assertNotNull(set2);
      assertEquals(4, set2.size());
      assertFalse(set2.isEmpty());
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      
      String string2 = utilizador0.toString();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Perfil: \n\n\n(0.0,0.0)\nNumero de Encomenda: 0\n", string2);
      assertNotNull(string2);
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      Ponto2D ponto2D1 = new Ponto2D(ponto2D0);
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotNull(ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      
      Empresa empresa0 = new Empresa("", "", "", ponto2D1, 0.0, 3082, 3082, "", 1.0, 1.0);
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotNull(empresa0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals("", empresa0.getNome());
      assertEquals(1.0, empresa0.getCustokm(), 0.01);
      assertEquals("", empresa0.getPassword());
      assertEquals(3082, empresa0.getVelmed());
      assertEquals(1.0, empresa0.getCustokg(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals("", empresa0.getNif());
      assertEquals("", empresa0.getEmail());
      assertEquals(3082, empresa0.getLicMedicamentos());
      
      dataBase0.add(empresa0);
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals("", empresa0.getNome());
      assertEquals(1.0, empresa0.getCustokm(), 0.01);
      assertEquals("", empresa0.getPassword());
      assertEquals(3082, empresa0.getVelmed());
      assertEquals(1.0, empresa0.getCustokg(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals("", empresa0.getNif());
      assertEquals("", empresa0.getEmail());
      assertEquals(3082, empresa0.getLicMedicamentos());
      
      dataBase0.add((Perfil) utilizador0);
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      
      // Undeclared exception!
      try { 
        MockLocalDateTime.now((Clock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      int int0 = 277;
      String string0 = "";
      String string1 = ponto2D0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("(0.0,0.0)", string1);
      assertNotNull(string1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      Empresa empresa0 = new Empresa("TY]*Mpw]]/=r}", "TY]*Mpw]]/=r}", "TY]*Mpw]]/=r}", ponto2D0, (-845.9148101627877), 277, 277, "", 958.21628, 277);
      assertNotNull(empresa0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(958.21628, empresa0.getCustokg(), 0.01);
      assertEquals(277, empresa0.getVelmed());
      assertEquals("", empresa0.getNif());
      assertEquals("TY]*Mpw]]/=r}", empresa0.getEmail());
      assertEquals("TY]*Mpw]]/=r}", empresa0.getNome());
      assertEquals(277.0, empresa0.getCustokm(), 0.01);
      assertEquals(277, empresa0.getLicMedicamentos());
      assertEquals((-845.9148101627877), empresa0.getRaio(), 0.01);
      assertEquals("TY]*Mpw]]/=r}", empresa0.getPassword());
      
      Ponto2D ponto2D1 = ponto2D0.clone();
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
      assertNotNull(ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      
      empresa0.setLocal(ponto2D0);
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertNotSame(ponto2D0, ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(958.21628, empresa0.getCustokg(), 0.01);
      assertEquals(277, empresa0.getVelmed());
      assertEquals("", empresa0.getNif());
      assertEquals("TY]*Mpw]]/=r}", empresa0.getEmail());
      assertEquals("TY]*Mpw]]/=r}", empresa0.getNome());
      assertEquals(277.0, empresa0.getCustokm(), 0.01);
      assertEquals(277, empresa0.getLicMedicamentos());
      assertEquals((-845.9148101627877), empresa0.getRaio(), 0.01);
      assertEquals("TY]*Mpw]]/=r}", empresa0.getPassword());
      
      empresa0.setNif("");
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertNotSame(ponto2D0, ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(958.21628, empresa0.getCustokg(), 0.01);
      assertEquals(277, empresa0.getVelmed());
      assertEquals("", empresa0.getNif());
      assertEquals("TY]*Mpw]]/=r}", empresa0.getEmail());
      assertEquals("TY]*Mpw]]/=r}", empresa0.getNome());
      assertEquals(277.0, empresa0.getCustokm(), 0.01);
      assertEquals(277, empresa0.getLicMedicamentos());
      assertEquals((-845.9148101627877), empresa0.getRaio(), 0.01);
      assertEquals("TY]*Mpw]]/=r}", empresa0.getPassword());
      
      empresa0.setNome("(0.0,0.0)");
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertNotSame(ponto2D0, ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(958.21628, empresa0.getCustokg(), 0.01);
      assertEquals(277, empresa0.getVelmed());
      assertEquals("", empresa0.getNif());
      assertEquals("TY]*Mpw]]/=r}", empresa0.getEmail());
      assertEquals("(0.0,0.0)", empresa0.getNome());
      assertEquals(277.0, empresa0.getCustokm(), 0.01);
      assertEquals(277, empresa0.getLicMedicamentos());
      assertEquals((-845.9148101627877), empresa0.getRaio(), 0.01);
      assertEquals("TY]*Mpw]]/=r}", empresa0.getPassword());
      
      empresa0.setPassword(", 4k7Ob_4tAMZ+Pd");
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertNotSame(ponto2D0, ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(958.21628, empresa0.getCustokg(), 0.01);
      assertEquals(277, empresa0.getVelmed());
      assertEquals("", empresa0.getNif());
      assertEquals("TY]*Mpw]]/=r}", empresa0.getEmail());
      assertEquals("(0.0,0.0)", empresa0.getNome());
      assertEquals(277.0, empresa0.getCustokm(), 0.01);
      assertEquals(277, empresa0.getLicMedicamentos());
      assertEquals((-845.9148101627877), empresa0.getRaio(), 0.01);
      assertEquals(", 4k7Ob_4tAMZ+Pd", empresa0.getPassword());
      
      dataBase0.add(empresa0);
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertNotSame(ponto2D0, ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(958.21628, empresa0.getCustokg(), 0.01);
      assertEquals(277, empresa0.getVelmed());
      assertEquals("", empresa0.getNif());
      assertEquals("TY]*Mpw]]/=r}", empresa0.getEmail());
      assertEquals("(0.0,0.0)", empresa0.getNome());
      assertEquals(277.0, empresa0.getCustokm(), 0.01);
      assertEquals(277, empresa0.getLicMedicamentos());
      assertEquals((-845.9148101627877), empresa0.getRaio(), 0.01);
      assertEquals(", 4k7Ob_4tAMZ+Pd", empresa0.getPassword());
      
      dataBase0.add(empresa0);
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertNotSame(ponto2D0, ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(958.21628, empresa0.getCustokg(), 0.01);
      assertEquals(277, empresa0.getVelmed());
      assertEquals("", empresa0.getNif());
      assertEquals("TY]*Mpw]]/=r}", empresa0.getEmail());
      assertEquals("(0.0,0.0)", empresa0.getNome());
      assertEquals(277.0, empresa0.getCustokm(), 0.01);
      assertEquals(277, empresa0.getLicMedicamentos());
      assertEquals((-845.9148101627877), empresa0.getRaio(), 0.01);
      assertEquals(", 4k7Ob_4tAMZ+Pd", empresa0.getPassword());
      
      Empresa empresa1 = dataBase0.getEmpresa("TY]*Mpw]]/=r}");
      assertTrue(empresa1.equals((Object)empresa0));
      assertNotSame(empresa1, empresa0);
      assertNotNull(empresa1);
      assertEquals(277, empresa1.getLicMedicamentos());
      assertEquals(277.0, empresa1.getCustokm(), 0.01);
      assertEquals((-845.9148101627877), empresa1.getRaio(), 0.01);
      assertEquals("TY]*Mpw]]/=r}", empresa1.getEmail());
      assertEquals("(0.0,0.0)", empresa1.getNome());
      assertEquals("", empresa1.getNif());
      assertEquals(958.21628, empresa1.getCustokg(), 0.01);
      assertEquals(277, empresa1.getVelmed());
      assertEquals(", 4k7Ob_4tAMZ+Pd", empresa1.getPassword());
      
      Set<Encomenda> set1 = dataBase0.getEncomendas();
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertEquals(4, set1.size());
      assertFalse(set1.isEmpty());
      
      long long0 = (-698L);
      // Undeclared exception!
      try { 
        ZoneOffset.of("\nEncomenda: ");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: 
         // Encomenda: 
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "BG";
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      
      Empresa empresa0 = new Empresa("BG", "BG", "BG", ponto2D0, (-18.97527075481), 0, 2427, "BG", 2365.86139211932, 0.0);
      assertNotNull(empresa0);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals("BG", empresa0.getPassword());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(2427, empresa0.getLicMedicamentos());
      assertEquals("BG", empresa0.getNif());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(2365.86139211932, empresa0.getCustokg(), 0.01);
      assertEquals("BG", empresa0.getEmail());
      assertEquals((-18.97527075481), empresa0.getRaio(), 0.01);
      assertEquals("BG", empresa0.getNome());
      
      empresa0.setLocal(ponto2D0);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals("BG", empresa0.getPassword());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(2427, empresa0.getLicMedicamentos());
      assertEquals("BG", empresa0.getNif());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(2365.86139211932, empresa0.getCustokg(), 0.01);
      assertEquals("BG", empresa0.getEmail());
      assertEquals((-18.97527075481), empresa0.getRaio(), 0.01);
      assertEquals("BG", empresa0.getNome());
      
      empresa0.setCustokm((-1600.8));
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals("BG", empresa0.getPassword());
      assertEquals(2427, empresa0.getLicMedicamentos());
      assertEquals((-1600.8), empresa0.getCustokm(), 0.01);
      assertEquals("BG", empresa0.getNif());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(2365.86139211932, empresa0.getCustokg(), 0.01);
      assertEquals("BG", empresa0.getEmail());
      assertEquals((-18.97527075481), empresa0.getRaio(), 0.01);
      assertEquals("BG", empresa0.getNome());
      
      Empresa empresa1 = new Empresa(empresa0);
      assertTrue(empresa1.equals((Object)empresa0));
      assertNotNull(empresa1);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals("BG", empresa0.getPassword());
      assertEquals(2427, empresa0.getLicMedicamentos());
      assertEquals((-1600.8), empresa0.getCustokm(), 0.01);
      assertEquals("BG", empresa0.getNif());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(2365.86139211932, empresa0.getCustokg(), 0.01);
      assertEquals("BG", empresa0.getEmail());
      assertEquals((-18.97527075481), empresa0.getRaio(), 0.01);
      assertEquals("BG", empresa0.getNome());
      assertEquals(2427, empresa1.getLicMedicamentos());
      assertEquals("BG", empresa1.getEmail());
      assertEquals((-18.97527075481), empresa1.getRaio(), 0.01);
      assertEquals("BG", empresa1.getNif());
      assertEquals(0, empresa1.getVelmed());
      assertEquals(2365.86139211932, empresa1.getCustokg(), 0.01);
      assertEquals((-1600.8), empresa1.getCustokm(), 0.01);
      assertEquals("BG", empresa1.getNome());
      assertEquals("BG", empresa1.getPassword());
      
      dataBase0.add(empresa1);
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertNotSame(empresa0, empresa1);
      assertNotSame(empresa1, empresa0);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals("BG", empresa0.getPassword());
      assertEquals(2427, empresa0.getLicMedicamentos());
      assertEquals((-1600.8), empresa0.getCustokm(), 0.01);
      assertEquals("BG", empresa0.getNif());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(2365.86139211932, empresa0.getCustokg(), 0.01);
      assertEquals("BG", empresa0.getEmail());
      assertEquals((-18.97527075481), empresa0.getRaio(), 0.01);
      assertEquals("BG", empresa0.getNome());
      assertEquals(2427, empresa1.getLicMedicamentos());
      assertEquals("BG", empresa1.getEmail());
      assertEquals((-18.97527075481), empresa1.getRaio(), 0.01);
      assertEquals("BG", empresa1.getNif());
      assertEquals(0, empresa1.getVelmed());
      assertEquals(2365.86139211932, empresa1.getCustokg(), 0.01);
      assertEquals((-1600.8), empresa1.getCustokm(), 0.01);
      assertEquals("BG", empresa1.getNome());
      assertEquals("BG", empresa1.getPassword());
      
      // Undeclared exception!
      try { 
        dataBase0.getUtilizador("BG");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Empresa cannot be cast to Utilizador
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = null;
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja((String) null);
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Utilizador utilizador0 = dataBase0.getUtilizador((String) null);
      assertNull(utilizador0);
      
      Set<Encomenda> set1 = dataBase0.getEncomendaAceitaCusto();
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      Set<Encomenda> set2 = dataBase0.getEncomendasTrans("\nPeso: ");
      assertTrue(set2.equals((Object)set1));
      assertTrue(set2.equals((Object)set0));
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      assertNotNull(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      
      int int0 = 2013;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      assertNotNull(clock0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      assertNotNull(localDateTime0);
      
      Encomenda encomenda0 = new Encomenda(2013, localDateTime0, 2013, 2008, "\nPeso: ");
      assertNotNull(encomenda0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("\nPeso: ", encomenda0.getNomTrans());
      assertEquals(2008, encomenda0.getEstado());
      assertEquals(2013, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(2013.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getUser());
      
      dataBase0.addEnc(encomenda0);
      assertEquals("", encomenda0.getEnc());
      assertEquals("\nPeso: ", encomenda0.getNomTrans());
      assertEquals(2008, encomenda0.getEstado());
      assertEquals(2013, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(2013.0, encomenda0.getCusto(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals("", encomenda0.getUser());
      
      Empresa empresa0 = dataBase0.getEmpresa("cL~x");
      assertNull(empresa0);
      
      Encomenda encomenda1 = new Encomenda();
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotNull(encomenda1);
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getUser());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      encomenda1.setProdutos(hashMap0);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda1, encomenda0);
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getUser());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Encomenda encomenda2 = encomenda1.Clone();
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda2, encomenda1);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotNull(encomenda2);
      assertEquals(0, encomenda2.getAceitaCusto());
      assertEquals(0.0, encomenda2.getPeso(), 0.01);
      assertEquals((-1), encomenda2.getEstado());
      assertEquals((-1.0), encomenda2.getTempo(), 0.01);
      assertEquals(0.0, encomenda2.getCusto(), 0.01);
      assertEquals("", encomenda2.getLoja());
      assertEquals("", encomenda2.getEnc());
      assertEquals(0.0, encomenda2.getClassificacao(), 0.01);
      assertEquals("", encomenda2.getUser());
      assertEquals("", encomenda2.getNomTrans());
      assertEquals(0, encomenda2.getMedicamentos());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getLoja());
      assertEquals((-1), encomenda1.getEstado());
      assertEquals("", encomenda1.getUser());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      
      try { 
        dataBase0.addEnc(encomenda1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendaAceitaCusto();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string0 = "N[ja]VFcP5y`{6iF5";
      Encomenda encomenda0 = new Encomenda();
      assertNotNull(encomenda0);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      
      float float0 = encomenda0.precoEncomenda();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      
      dataBase0.addEnc(encomenda0);
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1), encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      
      Voluntario voluntario0 = dataBase0.getVoluntario("N[ja]VFcP5y`{6iF5");
      assertNull(voluntario0);
      
      Empresa empresa0 = new Empresa();
      assertNotNull(empresa0);
      assertEquals("", empresa0.getNome());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getPassword());
      assertEquals("", empresa0.getEmail());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      
      dataBase0.add(empresa0);
      assertEquals("", empresa0.getNome());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getPassword());
      assertEquals("", empresa0.getEmail());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      
      String string1 = null;
      encomenda0.setEstado((-645));
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("", encomenda0.getUser());
      assertEquals(0.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getNomTrans());
      assertEquals(0, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals("", encomenda0.getLoja());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals((-645), encomenda0.getEstado());
      
      Empresa empresa1 = dataBase0.getEmpresa((String) null);
      assertNull(empresa1);
      
      Set<Encomenda> set1 = dataBase0.getEncomendasLoja("^52!'");
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertFalse(set1.contains(encomenda0));
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      Utilizador utilizador0 = dataBase0.getUtilizador((String) null);
      assertNull(utilizador0);
      
      Empresa empresa2 = dataBase0.getEmpresa("");
      assertTrue(empresa2.equals((Object)empresa0));
      assertNotSame(empresa2, empresa0);
      assertNotNull(empresa2);
      assertEquals(0, empresa2.getLicMedicamentos());
      assertEquals(0.0, empresa2.getCustokg(), 0.01);
      assertNull(empresa2.getNif());
      assertEquals("", empresa2.getEmail());
      assertEquals(0.0, empresa2.getCustokm(), 0.01);
      assertEquals(0.0, empresa2.getRaio(), 0.01);
      assertEquals(0, empresa2.getVelmed());
      assertEquals("", empresa2.getPassword());
      assertEquals("", empresa2.getNome());
      
      try { 
        dataBase0.addEnc(encomenda0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "dmF5V=";
      Utilizador utilizador0 = dataBase0.getUtilizador("dmF5V=");
      assertNull(utilizador0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Voluntario voluntario0 = dataBase0.getVoluntario("\nTempo: ");
      assertNull(voluntario0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja("X:*aR");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Loja loja0 = dataBase0.getLoja("/7'DjFRj15g7-?p;");
      assertNull(loja0);
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      Ponto2D ponto2D1 = new Ponto2D(ponto2D0);
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotNull(ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      
      Voluntario voluntario0 = new Voluntario("X:*aR", "", ".9iFw,>vF4c's`", ponto2D1, 1401.3443935323953, 1004, 1004, false);
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotNull(voluntario0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("X:*aR", voluntario0.getEmail());
      assertFalse(voluntario0.estaDisponivel());
      assertEquals(1401.3443935323953, voluntario0.getRaio(), 0.01);
      assertEquals(".9iFw,>vF4c's`", voluntario0.getPassword());
      assertEquals(1004, voluntario0.getVelmed());
      assertEquals(1004, voluntario0.getLicMedicamentos());
      
      dataBase0.add(voluntario0);
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("X:*aR", voluntario0.getEmail());
      assertFalse(voluntario0.estaDisponivel());
      assertEquals(1401.3443935323953, voluntario0.getRaio(), 0.01);
      assertEquals(".9iFw,>vF4c's`", voluntario0.getPassword());
      assertEquals(1004, voluntario0.getVelmed());
      assertEquals(1004, voluntario0.getLicMedicamentos());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      
      Loja loja0 = new Loja("4d&@d`JVg[)", "4d&@d`JVg[)", (String) null, ponto2D0, 0, "");
      assertNotNull(loja0);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertNull(loja0.getPassword());
      assertEquals("", loja0.getMorada());
      assertEquals("4d&@d`JVg[)", loja0.getEmail());
      assertEquals("4d&@d`JVg[)", loja0.getNome());
      assertEquals(0, loja0.getTempoEspera());
      
      Loja loja1 = new Loja(loja0);
      assertNotNull(loja1);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertNull(loja0.getPassword());
      assertEquals("", loja0.getMorada());
      assertEquals("4d&@d`JVg[)", loja0.getEmail());
      assertEquals("4d&@d`JVg[)", loja0.getNome());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("4d&@d`JVg[)", loja1.getEmail());
      assertEquals("", loja1.getMorada());
      assertNull(loja1.getPassword());
      assertEquals("4d&@d`JVg[)", loja1.getNome());
      assertEquals(0, loja1.getTempoEspera());
      
      dataBase0.add(loja1);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertNull(loja0.getPassword());
      assertEquals("", loja0.getMorada());
      assertEquals("4d&@d`JVg[)", loja0.getEmail());
      assertEquals("4d&@d`JVg[)", loja0.getNome());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("4d&@d`JVg[)", loja1.getEmail());
      assertEquals("", loja1.getMorada());
      assertNull(loja1.getPassword());
      assertEquals("4d&@d`JVg[)", loja1.getNome());
      assertEquals(0, loja1.getTempoEspera());
      
      Set<Encomenda> set0 = dataBase0.getEncomendas();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(4, set0.size());
      
      // Undeclared exception!
      try { 
        dataBase0.gravaEmObjStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "";
      Utilizador utilizador0 = dataBase0.getUtilizador("");
      assertNull(utilizador0);
      
      Loja loja0 = dataBase0.getLoja("C%{BG$>Iq9O");
      assertNull(loja0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans("C%{BG$>Iq9O");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        dataBase0.add((Perfil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Empresa) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<String> set0 = dataBase0.getPerfis();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendas();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(4, set0.size());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasLoja("\nLoja: ");
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      Utilizador utilizador0 = dataBase0.getUtilizador("e3400");
      assertNull(utilizador0);
      
      Set<Encomenda> set2 = dataBase0.getEncomendaAceitaCusto();
      assertTrue(set2.equals((Object)set1));
      assertFalse(set2.equals((Object)set0));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Ponto2D ponto2D0 = new Ponto2D((-677.087118), (-677.087118));
      assertNotNull(ponto2D0);
      assertEquals((-677.087118), ponto2D0.getY(), 0.01);
      assertEquals((-677.087118), ponto2D0.getX(), 0.01);
      
      Utilizador utilizador0 = new Utilizador("aL0$", "aL0$", "aL0$", ponto2D0, 1423);
      assertNotNull(utilizador0);
      assertEquals((-677.087118), ponto2D0.getY(), 0.01);
      assertEquals((-677.087118), ponto2D0.getX(), 0.01);
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("aL0$", utilizador0.getNome());
      assertEquals("aL0$", utilizador0.getEmail());
      assertEquals("aL0$", utilizador0.getPassword());
      
      dataBase0.add(utilizador0);
      assertEquals((-677.087118), ponto2D0.getY(), 0.01);
      assertEquals((-677.087118), ponto2D0.getX(), 0.01);
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("aL0$", utilizador0.getNome());
      assertEquals("aL0$", utilizador0.getEmail());
      assertEquals("aL0$", utilizador0.getPassword());
      
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Utilizador> list0 = dataBase0.ordenarUsers(comparator0);
      assertTrue(list0.contains(utilizador0));
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendas();
      assertNotNull(set0);
      assertEquals(4, set0.size());
      assertFalse(set0.isEmpty());
      
      String string0 = "EvZ,U";
      Empresa empresa0 = dataBase0.getEmpresa("e3400");
      assertNull(empresa0);
      
      Set<Encomenda> set1 = dataBase0.getEncomendasUser("EvZ,U");
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      String string1 = "";
      LocalDateTime localDateTime0 = null;
      Set<Encomenda> set2 = dataBase0.getEncomendaNaoAceitaCusto();
      assertFalse(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      assertNotNull(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      
      String string2 = null;
      Utilizador utilizador0 = dataBase0.getUtilizador((String) null);
      assertNull(utilizador0);
      
      try { 
        dataBase0.gravaEmObjStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans("/D;A:~@TU");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      utilizador0.setNum((-1264));
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals((-1264), utilizador0.getNumEnc());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals((-1264), utilizador0.getNumEnc());
      assertEquals("", utilizador1.getNome());
      assertEquals((-1264), utilizador1.getNumEnc());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getEmail());
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      utilizador0.setNum(0);
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      
      utilizador1.setLocal(ponto2D0);
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador1.getNome());
      assertEquals((-1264), utilizador1.getNumEnc());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      dataBase0.add(utilizador1);
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador1.getNome());
      assertEquals((-1264), utilizador1.getNumEnc());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getEmail());
      
      String string0 = "";
      try { 
        dataBase0.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encomenda nao existe
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendaAceitaCusto();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasTrans("");
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Empresa empresa0 = new Empresa();
      assertNotNull(empresa0);
      assertEquals("", empresa0.getEmail());
      assertEquals("", empresa0.getPassword());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("", empresa0.getNome());
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0, empresa0.getVelmed());
      
      dataBase0.add(empresa0);
      assertEquals("", empresa0.getEmail());
      assertEquals("", empresa0.getPassword());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("", empresa0.getNome());
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0, empresa0.getVelmed());
      
      Set<Encomenda> set0 = dataBase0.getEncomendas();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(4, set0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "J;W8";
      Set<Encomenda> set0 = dataBase0.getEncomendasUser("");
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(4, set0.size());
      
      try { 
        dataBase0.getEncomenda("J;W8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encomenda nao existe
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      try { 
        dataBase0.gravaEmObjStream("{R");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      try { 
        dataBase0.gravaEmObjStream("\nClassifica\u00E7ao: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      ponto2D0.move((-1888.982893589), (-1888.982893589));
      assertEquals((-1888.982893589), ponto2D0.getX(), 0.01);
      assertEquals((-1888.982893589), ponto2D0.getY(), 0.01);
      
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (String) null, ponto2D0, (-396));
      assertNotNull(utilizador0);
      assertEquals((-1888.982893589), ponto2D0.getX(), 0.01);
      assertEquals((-1888.982893589), ponto2D0.getY(), 0.01);
      assertNull(utilizador0.getPassword());
      assertNull(utilizador0.getNome());
      assertNull(utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals((-1888.982893589), ponto2D0.getX(), 0.01);
      assertEquals((-1888.982893589), ponto2D0.getY(), 0.01);
      assertNull(utilizador0.getPassword());
      assertNull(utilizador0.getNome());
      assertNull(utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertNull(utilizador1.getNome());
      assertNull(utilizador1.getPassword());
      assertEquals(0, utilizador1.getNumEnc());
      assertNull(utilizador1.getEmail());
      
      utilizador0.setEmail((String) null);
      assertNotSame(utilizador0, utilizador1);
      assertEquals((-1888.982893589), ponto2D0.getX(), 0.01);
      assertEquals((-1888.982893589), ponto2D0.getY(), 0.01);
      assertNull(utilizador0.getPassword());
      assertNull(utilizador0.getNome());
      assertNull(utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      
      String string0 = utilizador1.toString();
      assertEquals("Perfil: null\nnull\nnull\n(-1888.982893589,-1888.982893589)\nNumero de Encomenda: 0\n", string0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(string0);
      assertEquals((-1888.982893589), ponto2D0.getX(), 0.01);
      assertEquals((-1888.982893589), ponto2D0.getY(), 0.01);
      assertNull(utilizador0.getPassword());
      assertNull(utilizador0.getNome());
      assertNull(utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertNull(utilizador1.getNome());
      assertNull(utilizador1.getPassword());
      assertEquals(0, utilizador1.getNumEnc());
      assertNull(utilizador1.getEmail());
      
      Utilizador utilizador2 = utilizador1.clone();
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador0);
      assertNotNull(utilizador2);
      assertEquals((-1888.982893589), ponto2D0.getX(), 0.01);
      assertEquals((-1888.982893589), ponto2D0.getY(), 0.01);
      assertNull(utilizador0.getPassword());
      assertNull(utilizador0.getNome());
      assertNull(utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertNull(utilizador1.getNome());
      assertNull(utilizador1.getPassword());
      assertEquals(0, utilizador1.getNumEnc());
      assertNull(utilizador1.getEmail());
      assertNull(utilizador2.getNome());
      assertNull(utilizador2.getPassword());
      assertEquals(0, utilizador2.getNumEnc());
      assertNull(utilizador2.getEmail());
      
      dataBase0.add(utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador1, utilizador0);
      assertEquals((-1888.982893589), ponto2D0.getX(), 0.01);
      assertEquals((-1888.982893589), ponto2D0.getY(), 0.01);
      assertNull(utilizador0.getPassword());
      assertNull(utilizador0.getNome());
      assertNull(utilizador0.getEmail());
      assertEquals(0, utilizador0.getNumEnc());
      assertNull(utilizador1.getNome());
      assertNull(utilizador1.getPassword());
      assertEquals(0, utilizador1.getNumEnc());
      assertNull(utilizador1.getEmail());
      
      // Undeclared exception!
      try { 
        dataBase0.getEncomendaAceite((-396));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      boolean boolean0 = dataBase0.existeUtilizador("");
      assertFalse(boolean0);
      
      Empresa empresa0 = new Empresa();
      assertNotNull(empresa0);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals("", empresa0.getNome());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("", empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getPassword());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertNull(empresa0.getNif());
      
      empresa0.setPassword("t9");
      assertEquals("t9", empresa0.getPassword());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals("", empresa0.getNome());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("", empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertNull(empresa0.getNif());
      
      int int0 = 0;
      empresa0.setLicMedicamentos(0);
      assertEquals("t9", empresa0.getPassword());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals("", empresa0.getNome());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("", empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertNull(empresa0.getNif());
      
      Empresa empresa1 = new Empresa(empresa0);
      assertTrue(empresa1.equals((Object)empresa0));
      assertNotNull(empresa1);
      assertEquals("t9", empresa0.getPassword());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals("", empresa0.getNome());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("", empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa1.getCustokm(), 0.01);
      assertEquals(0.0, empresa1.getRaio(), 0.01);
      assertEquals(0, empresa1.getVelmed());
      assertEquals("t9", empresa1.getPassword());
      assertNull(empresa1.getNif());
      assertEquals("", empresa1.getEmail());
      assertEquals(0.0, empresa1.getCustokg(), 0.01);
      assertEquals("", empresa1.getNome());
      assertEquals(0, empresa1.getLicMedicamentos());
      
      empresa1.setRaio(0);
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertNotSame(empresa0, empresa1);
      assertNotSame(empresa1, empresa0);
      assertEquals("t9", empresa0.getPassword());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals("", empresa0.getNome());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("", empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa1.getCustokm(), 0.01);
      assertEquals(0.0, empresa1.getRaio(), 0.01);
      assertEquals(0, empresa1.getVelmed());
      assertEquals("t9", empresa1.getPassword());
      assertNull(empresa1.getNif());
      assertEquals("", empresa1.getEmail());
      assertEquals(0.0, empresa1.getCustokg(), 0.01);
      assertEquals("", empresa1.getNome());
      assertEquals(0, empresa1.getLicMedicamentos());
      
      dataBase0.add(empresa1);
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertNotSame(empresa0, empresa1);
      assertNotSame(empresa1, empresa0);
      assertEquals("t9", empresa0.getPassword());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals("", empresa0.getNome());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals("", empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa1.getCustokm(), 0.01);
      assertEquals(0.0, empresa1.getRaio(), 0.01);
      assertEquals(0, empresa1.getVelmed());
      assertEquals("t9", empresa1.getPassword());
      assertNull(empresa1.getNif());
      assertEquals("", empresa1.getEmail());
      assertEquals(0.0, empresa1.getCustokg(), 0.01);
      assertEquals("", empresa1.getNome());
      assertEquals(0, empresa1.getLicMedicamentos());
      
      // Undeclared exception!
      try { 
        dataBase0.getEncomendaAceite(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasUser("");
      assertNotNull(set0);
      assertEquals(4, set0.size());
      assertFalse(set0.isEmpty());
      
      Instant instant0 = MockInstant.ofEpochMilli((-2119L));
      assertNotNull(instant0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      assertNotNull(localDateTime0);
      
      double double0 = dataBase0.totalFaturado("", localDateTime0);
      assertEquals(0.0, double0, 0.01);
      
      Utilizador utilizador0 = dataBase0.getUtilizador("");
      assertNull(utilizador0);
      
      dataBase0.addEncAceite("d:{9n=n:|43Ym|");
      Set<Encomenda> set1 = dataBase0.getEncomendasUser("");
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(4, set1.size());
      
      dataBase0.addEncAceite("!jiLu(gY06b");
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      List<Utilizador> list0 = dataBase0.ordenarUsers(comparator0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Loja loja0 = dataBase0.getLoja("");
      assertNull(loja0);
      
      // Undeclared exception!
      try { 
        dataBase0.ordenarUsers((Comparator<Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      Ponto2D ponto2D1 = new Ponto2D(ponto2D0);
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotNull(ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, (String) null, ponto2D1, 1035.97, 773, 0, true);
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotNull(voluntario0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0, voluntario0.getLicMedicamentos());
      assertNull(voluntario0.getNome());
      assertNull(voluntario0.getPassword());
      assertTrue(voluntario0.estaDisponivel());
      assertEquals(773, voluntario0.getVelmed());
      assertEquals(1035.97, voluntario0.getRaio(), 0.01);
      assertNull(voluntario0.getEmail());
      
      dataBase0.add(voluntario0);
      assertTrue(ponto2D0.equals((Object)ponto2D1));
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotSame(ponto2D0, ponto2D1);
      assertNotSame(ponto2D1, ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      assertEquals(0, voluntario0.getLicMedicamentos());
      assertNull(voluntario0.getNome());
      assertNull(voluntario0.getPassword());
      assertTrue(voluntario0.estaDisponivel());
      assertEquals(773, voluntario0.getVelmed());
      assertEquals(1035.97, voluntario0.getRaio(), 0.01);
      assertNull(voluntario0.getEmail());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Voluntario voluntario0 = dataBase0.getVoluntario("");
      assertNull(voluntario0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Loja loja0 = new Loja();
      assertNotNull(loja0);
      assertEquals("", loja0.getMorada());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getNome());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getEmail());
      
      dataBase0.add(loja0);
      assertEquals("", loja0.getMorada());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getNome());
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getEmail());
      
      Empresa empresa0 = new Empresa();
      assertNotNull(empresa0);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getEmail());
      assertEquals("", empresa0.getNome());
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("", empresa0.getPassword());
      
      dataBase0.add(empresa0);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getEmail());
      assertEquals("", empresa0.getNome());
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("", empresa0.getPassword());
      
      empresa0.setPassword("/)vzFmHd");
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getEmail());
      assertEquals("", empresa0.getNome());
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("/)vzFmHd", empresa0.getPassword());
      
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans("Nif: ");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      dataBase0.add(empresa0);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getEmail());
      assertEquals("", empresa0.getNome());
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("/)vzFmHd", empresa0.getPassword());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Loja loja0 = dataBase0.getLoja("}E");
      assertNull(loja0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      
      Utilizador utilizador1 = utilizador0.clone();
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador1.getEmail());
      assertEquals("", utilizador1.getPassword());
      assertEquals(0, utilizador1.getNumEnc());
      assertEquals("", utilizador1.getNome());
      
      Utilizador utilizador2 = utilizador0.clone();
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertTrue(utilizador2.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertNotNull(utilizador2);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getEmail());
      assertEquals(0, utilizador2.getNumEnc());
      assertEquals("", utilizador2.getPassword());
      
      dataBase0.add((Perfil) utilizador0);
      assertTrue(utilizador0.equals((Object)utilizador2));
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador0.getEmail());
      
      Loja loja0 = dataBase0.getLoja("\nClassifica\u00E7ao: ");
      assertNull(loja0);
      
      Loja loja1 = null;
      try {
        loja1 = new Loja((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Perfil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans("e3400");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendasTrans("rqBn9h@|xbpb+!</P");
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      Loja loja0 = dataBase0.getLoja("tlcaAnM^v5!Wto$](");
      assertNull(loja0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Perfil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Perfil perfil0 = dataBase0.getPerfil("pMR{wIKm/pH;TN/j");
      assertNull(perfil0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasUser("pMR{wIKm/pH;TN/j");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Ponto2D ponto2D0 = new Ponto2D(4142.5924354341, 4142.5924354341);
      assertNotNull(ponto2D0);
      assertEquals(4142.5924354341, ponto2D0.getX(), 0.01);
      assertEquals(4142.5924354341, ponto2D0.getY(), 0.01);
      
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, "UZshZQ[/UYCCI(", ponto2D0, 0);
      assertNotNull(utilizador0);
      assertEquals(4142.5924354341, ponto2D0.getX(), 0.01);
      assertEquals(4142.5924354341, ponto2D0.getY(), 0.01);
      assertNull(utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertNull(utilizador0.getEmail());
      assertEquals("UZshZQ[/UYCCI(", utilizador0.getPassword());
      
      dataBase0.add(utilizador0);
      assertEquals(4142.5924354341, ponto2D0.getX(), 0.01);
      assertEquals(4142.5924354341, ponto2D0.getY(), 0.01);
      assertNull(utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertNull(utilizador0.getEmail());
      assertEquals("UZshZQ[/UYCCI(", utilizador0.getPassword());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Voluntario voluntario0 = dataBase0.getVoluntario(".6>slZF<nHNf+)g$|");
      assertNull(voluntario0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendaNaoAceitaCusto();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals(0, utilizador1.getNumEnc());
      assertEquals("", utilizador1.getEmail());
      
      dataBase0.add(utilizador1);
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals(0, utilizador1.getNumEnc());
      assertEquals("", utilizador1.getEmail());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      boolean boolean0 = dataBase0.existeUtilizador("H0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Utilizador utilizador0 = dataBase0.getUtilizador("");
      assertNull(utilizador0);
      
      Empresa empresa0 = new Empresa();
      assertNotNull(empresa0);
      assertEquals("", empresa0.getNome());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("", empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getPassword());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      
      Empresa empresa1 = new Empresa(empresa0);
      assertTrue(empresa1.equals((Object)empresa0));
      assertNotNull(empresa1);
      assertEquals("", empresa0.getNome());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("", empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getPassword());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertNull(empresa1.getNif());
      assertEquals("", empresa1.getNome());
      assertEquals(0, empresa1.getLicMedicamentos());
      assertEquals(0.0, empresa1.getCustokg(), 0.01);
      assertEquals(0, empresa1.getVelmed());
      assertEquals("", empresa1.getPassword());
      assertEquals(0.0, empresa1.getRaio(), 0.01);
      assertEquals(0.0, empresa1.getCustokm(), 0.01);
      assertEquals("", empresa1.getEmail());
      
      dataBase0.add(empresa1);
      assertTrue(empresa0.equals((Object)empresa1));
      assertTrue(empresa1.equals((Object)empresa0));
      assertNotSame(empresa0, empresa1);
      assertNotSame(empresa1, empresa0);
      assertEquals("", empresa0.getNome());
      assertEquals(0, empresa0.getLicMedicamentos());
      assertNull(empresa0.getNif());
      assertEquals(0.0, empresa0.getCustokg(), 0.01);
      assertEquals(0.0, empresa0.getCustokm(), 0.01);
      assertEquals("", empresa0.getEmail());
      assertEquals(0, empresa0.getVelmed());
      assertEquals("", empresa0.getPassword());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertNull(empresa1.getNif());
      assertEquals("", empresa1.getNome());
      assertEquals(0, empresa1.getLicMedicamentos());
      assertEquals(0.0, empresa1.getCustokg(), 0.01);
      assertEquals(0, empresa1.getVelmed());
      assertEquals("", empresa1.getPassword());
      assertEquals(0.0, empresa1.getRaio(), 0.01);
      assertEquals(0.0, empresa1.getCustokm(), 0.01);
      assertEquals("", empresa1.getEmail());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      dataBase0.addEncAceite("");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Loja loja0 = dataBase0.getLoja("");
      assertNull(loja0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasUser("\nEncomenda: ");
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Utilizador utilizador0 = dataBase0.getUtilizador("Empresa");
      assertNull(utilizador0);
      
      Encomenda encomenda0 = dataBase0.getEncomenda("e3422");
      assertNotNull(encomenda0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals("t9", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(20.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      
      dataBase0.addEnc(encomenda0);
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(1, encomenda0.getAceitaCusto());
      assertEquals("", encomenda0.getEnc());
      assertEquals("t9", encomenda0.getNomTrans());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(20.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getLoja());
      assertEquals("", encomenda0.getUser());
      assertEquals(1, encomenda0.getEstado());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getMedicamentos());
      
      Utilizador utilizador1 = dataBase0.getUtilizador("vl5ygDT\"P;mYwpn^.fL");
      assertNull(utilizador1);
      
      Voluntario voluntario0 = dataBase0.getVoluntario("vl5ygDT\"P;mYwpn^.fL");
      assertNull(voluntario0);
      
      Empresa empresa0 = dataBase0.getEmpresa("7[]>zt5LnI_J&44@+0y");
      assertNull(empresa0);
      
      // Undeclared exception!
      try { 
        dataBase0.add((Empresa) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Perfil perfil0 = dataBase0.getPerfil((String) null);
      assertNull(perfil0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      String string0 = "";
      Set<Encomenda> set0 = dataBase0.getEncomendasTrans("");
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Set<Encomenda> set1 = dataBase0.getEncomendas();
      assertFalse(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.isEmpty());
      assertEquals(4, set1.size());
      
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      
      String string1 = utilizador0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Perfil: \n\n\n(0.0,0.0)\nNumero de Encomenda: 0\n", string1);
      assertNotNull(string1);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      
      Ponto2D ponto2D0 = new Ponto2D();
      assertNotNull(ponto2D0);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      
      Ponto2D ponto2D1 = new Ponto2D(ponto2D0);
      assertTrue(ponto2D1.equals((Object)ponto2D0));
      assertNotNull(ponto2D1);
      assertEquals(0.0, ponto2D0.getY(), 0.01);
      assertEquals(0.0, ponto2D0.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getX(), 0.01);
      assertEquals(0.0, ponto2D1.getY(), 0.01);
      
      dataBase0.add((Perfil) utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0, utilizador0.getNumEnc());
      
      Loja loja0 = new Loja();
      assertNotNull(loja0);
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getMorada());
      assertEquals("", loja0.getEmail());
      
      loja0.setNome("");
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getMorada());
      assertEquals("", loja0.getEmail());
      
      dataBase0.add(loja0);
      assertEquals(0, loja0.getTempoEspera());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getMorada());
      assertEquals("", loja0.getEmail());
      
      Set<Encomenda> set2 = dataBase0.getEncomendasTrans("");
      assertTrue(set2.equals((Object)set0));
      assertFalse(set2.equals((Object)set1));
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      assertNotNull(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      
      boolean boolean0 = dataBase0.existeUtilizador("");
      assertTrue(boolean0);
      
      Set<Encomenda> set3 = dataBase0.getEncomendaNaoAceitaCusto();
      assertTrue(set3.equals((Object)set0));
      assertFalse(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set2));
      assertNotSame(set3, set0);
      assertNotSame(set3, set1);
      assertNotSame(set3, set2);
      assertNotNull(set3);
      assertTrue(set3.isEmpty());
      assertEquals(0, set3.size());
      
      Set<Encomenda> set4 = dataBase0.getEncomendaNaoAceitaCusto();
      assertFalse(set4.equals((Object)set1));
      assertTrue(set4.equals((Object)set2));
      assertTrue(set4.equals((Object)set3));
      assertTrue(set4.equals((Object)set0));
      assertNotSame(set4, set1);
      assertNotSame(set4, set2);
      assertNotSame(set4, set3);
      assertNotSame(set4, set0);
      assertNotNull(set4);
      assertEquals(0, set4.size());
      assertTrue(set4.isEmpty());
      
      Set<Encomenda> set5 = dataBase0.getEncomendasLoja("}Vdbx.TUt[_PP4]eX_");
      assertTrue(set5.equals((Object)set0));
      assertTrue(set5.equals((Object)set4));
      assertTrue(set5.equals((Object)set2));
      assertTrue(set5.equals((Object)set3));
      assertFalse(set5.equals((Object)set1));
      assertNotSame(set5, set1);
      assertNotSame(set5, set4);
      assertNotSame(set5, set3);
      assertNotSame(set5, set2);
      assertNotSame(set5, set0);
      assertNotNull(set5);
      assertTrue(set5.isEmpty());
      assertEquals(0, set5.size());
      
      // Undeclared exception!
      try { 
        dataBase0.getUtilizador("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Loja cannot be cast to Utilizador
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      assertNotNull(dataBase0);
      
      Set<Encomenda> set0 = dataBase0.getEncomendasLoja((String) null);
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Utilizador utilizador0 = dataBase0.getUtilizador((String) null);
      assertNull(utilizador0);
      
      Set<Encomenda> set1 = dataBase0.getEncomendaAceitaCusto();
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      
      Set<Encomenda> set2 = dataBase0.getEncomendasTrans("\nPeso: ");
      assertTrue(set2.equals((Object)set1));
      assertTrue(set2.equals((Object)set0));
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      assertNotNull(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      assertNotNull(clock0);
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      assertNotNull(localDateTime0);
      
      Encomenda encomenda0 = new Encomenda(2013, localDateTime0, 2013, 2008, "\nPeso: ");
      assertNotNull(encomenda0);
      assertEquals(2008, encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("\nPeso: ", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(2013.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(2013, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      dataBase0.addEnc(encomenda0);
      assertEquals(2008, encomenda0.getEstado());
      assertEquals(0, encomenda0.getMedicamentos());
      assertEquals("\nPeso: ", encomenda0.getNomTrans());
      assertEquals("", encomenda0.getUser());
      assertEquals("", encomenda0.getLoja());
      assertEquals(0.0, encomenda0.getClassificacao(), 0.01);
      assertEquals(2013.0, encomenda0.getCusto(), 0.01);
      assertEquals("", encomenda0.getEnc());
      assertEquals((-1.0), encomenda0.getTempo(), 0.01);
      assertEquals(2013, encomenda0.getAceitaCusto());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      Empresa empresa0 = dataBase0.getEmpresa("cL~x");
      assertNull(empresa0);
      
      Encomenda encomenda1 = new Encomenda();
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotNull(encomenda1);
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      encomenda1.setProdutos(hashMap0);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertNotSame(encomenda1, encomenda0);
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Encomenda encomenda2 = encomenda1.Clone();
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda0));
      assertFalse(encomenda2.equals((Object)encomenda1));
      assertNotSame(encomenda1, encomenda2);
      assertNotSame(encomenda1, encomenda0);
      assertNotSame(encomenda2, encomenda0);
      assertNotSame(encomenda2, encomenda1);
      assertNotNull(encomenda2);
      assertEquals("", encomenda1.getEnc());
      assertEquals("", encomenda1.getUser());
      assertEquals(0, encomenda1.getAceitaCusto());
      assertEquals((-1.0), encomenda1.getTempo(), 0.01);
      assertEquals(0.0, encomenda1.getCusto(), 0.01);
      assertEquals("", encomenda1.getLoja());
      assertEquals(0.0, encomenda1.getClassificacao(), 0.01);
      assertEquals((-1), encomenda1.getEstado());
      assertEquals(0, encomenda1.getMedicamentos());
      assertEquals("", encomenda1.getNomTrans());
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals((-1), encomenda2.getEstado());
      assertEquals(0.0, encomenda2.getClassificacao(), 0.01);
      assertEquals(0, encomenda2.getAceitaCusto());
      assertEquals(0.0, encomenda2.getPeso(), 0.01);
      assertEquals(0, encomenda2.getMedicamentos());
      assertEquals("", encomenda2.getLoja());
      assertEquals((-1.0), encomenda2.getTempo(), 0.01);
      assertEquals("", encomenda2.getUser());
      assertEquals("", encomenda2.getNomTrans());
      assertEquals("", encomenda2.getEnc());
      assertEquals(0.0, encomenda2.getCusto(), 0.01);
      
      try { 
        dataBase0.addEnc(encomenda1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEmpresa("");
      dataBase0.getUtilizador("");
      dataBase0.getEncomendasUser("Numero de Encomenda: ");
      MockLocalDate.now();
      // Undeclared exception!
      try { 
        MockLocalTime.of(0, (-531));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MinuteOfHour (valid values 0 - 59): -531
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      dataBase0.ordenarUsers(comparator0);
      try { 
        dataBase0.gravaEmObjStream("VEA[3BK.3b<w,yW");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      String string0 = "";
      dataBase0.addEncAceite("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      dataBase0.getEncomendasTrans("0M$3S/>qeUr_y_H$4F");
      String string1 = "";
      dataBase0.getEmpresa("");
      dataBase0.getLoja("e3422");
      try { 
        dataBase0.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encomenda nao existe
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendaAceitaCusto();
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      LinkedList<Utilizador> linkedList0 = new LinkedList<Utilizador>();
      dataBase0.addEncAceite(".7R'u,Z");
      Utilizador utilizador0 = new Utilizador();
      dataBase0.add((Perfil) utilizador0);
      dataBase0.existeUtilizador("n97vV;?0EH-");
      dataBase0.getPerfis();
      Encomenda encomenda0 = new Encomenda();
      assertEquals("", encomenda0.getLoja());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendasTrans("e3411");
      int int0 = 1071;
      dataBase0.totalFaturado("e3411", (LocalDateTime) null);
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      dataBase0.ordenarUsers(comparator0);
      // Undeclared exception!
      try { 
        dataBase0.getEncomendaAceite(1071);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1071, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Utilizador utilizador0 = new Utilizador();
      dataBase0.add(utilizador0);
      dataBase0.getVoluntario("--Descri\u00E7ao: ");
      // Undeclared exception!
      try { 
        dataBase0.add((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }
}
