/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 17:43:12 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.time.DateTimeException;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda((-1), (LocalDateTime) null, (-1), 0, "\n\n\n");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Map<String, LinhaEncomenda> map0 = encomenda1.getProdutos();
      Encomenda encomenda2 = new Encomenda((String) null, "\n\n\n", (String) null, (-1573.0), map0, (-1), (-1), (-1), (String) null, (-1), 3599.562323501982, (LocalDateTime) null, (-1));
      encomenda2.getNomTrans();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.precoEncomenda();
      encomenda0.pesoEncomenda();
      encomenda0.setClassificacao(0.0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Vm'L|", "Vm'L|", (-3557.2467), (-3557.2467), 0.0);
      encomenda0.setNomTrans("Vm'L|");
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      linhaEncomenda0.clone();
      encomenda0.getData();
      encomenda0.setTempo(0.0);
      linhaEncomenda0.setReferencia("Vm'L|");
      encomenda0.setCusto(0.0);
      encomenda0.toString();
      encomenda0.setClassificacao((-3557.2467));
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setNomTrans("_");
      encomenda0.getNomTrans();
      encomenda0.getTempo();
      encomenda0.setLoja("\nCusto: ");
      encomenda0.setEnc("");
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda1.Clone();
      encomenda0.getClassificacao();
      encomenda0.setCusto(1.0);
      Encomenda encomenda2 = encomenda0.Clone();
      encomenda2.setPeso(1452.0);
      encomenda1.precoEncomenda();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("CvT", "XK", 26.9843, (-1319), 29.768762044123168);
      hashMap0.put((String) null, linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda("--Descri\u00E7ao: ", "--Descri\u00E7ao: ", "--Referencia: ", 29.768762044123168, hashMap0, (-1319), (-1), 1097, "", 0.0, 1097, (LocalDateTime) null, 0.0);
      encomenda0.setAceitaCusto(1194);
      encomenda0.pesoEncomenda();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda((-731), (LocalDateTime) null, (-731), (-731), "C#?2wtgb");
      encomenda0.setUser("tFDXi9dnhdDbIr7Ku!a");
      encomenda0.setClassificacao((-731));
      encomenda0.precoEncomenda();
      encomenda0.getUser();
      encomenda0.setMedicamentos(3682);
      encomenda0.pesoEncomenda();
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda0.getCusto();
      Encomenda encomenda2 = encomenda0.Clone();
      encomenda2.setCusto(0.0);
      encomenda1.Clone();
      encomenda2.toString();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Map<String, LinhaEncomenda> map0 = encomenda1.getProdutos();
      Month month0 = Month.MARCH;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(0, month0, 1, 1, 0);
      Encomenda encomenda2 = new Encomenda("\nProdutos:\n", "\nProdutos:\n", "pCLN(q&Prl", 0.0, map0, 1, 1, 0, "\nProdutos:\n", 0, 0, localDateTime0, 0);
      Encomenda encomenda3 = encomenda2.Clone();
      encomenda1.precoEncomenda();
      encomenda0.setAceitaCusto(0);
      encomenda2.getMedicamentos();
      encomenda0.setTempo(1);
      encomenda3.precoEncomenda();
      encomenda3.getNomTrans();
      encomenda0.getUser();
      encomenda0.Clone();
      System.setCurrentTimeMillis((-1067L));
      encomenda0.getUser();
      System.setCurrentTimeMillis(0L);
      encomenda2.Clone();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("CvT", "XK", 26.9843, (-1319), 0.0);
      hashMap0.put((String) null, linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda("--Descri\u00E7ao: ", "--Descri\u00E7ao: ", "--Referencia: ", 0.0, hashMap0, (-1319), (-1), 1097, "", 0.0, 1097, (LocalDateTime) null, 0.0);
      encomenda0.precoEncomenda();
      encomenda0.setAceitaCusto(1194);
      encomenda0.pesoEncomenda();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.toString();
      encomenda1.getEnc();
      encomenda0.setAceitaCusto(0);
      encomenda0.setMedicamentos((-2944));
      encomenda0.setTempo(0);
      encomenda0.setClassificacao(0);
      encomenda0.setNomTrans("");
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      linhaEncomenda0.toString();
      linhaEncomenda1.setPeso(0.0);
      linhaEncomenda1.toString();
      linhaEncomenda0.setPeso((-277.095947));
      linhaEncomenda1.toString();
      linhaEncomenda1.setQuantidade(0);
      encomenda1.addLinhaEncomenda(linhaEncomenda1);
      encomenda0.setCusto(0.0);
      encomenda0.setMedicamentos(0);
      encomenda0.getCusto();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>(0);
      encomenda0.setProdutos(hashMap0);
      encomenda1.setNomTrans("");
      encomenda0.setClassificacao(0.0);
      encomenda1.setClassificacao(2649.422198796);
      encomenda0.getClassificacao();
      encomenda1.getMedicamentos();
      encomenda0.setPeso(0.0);
      encomenda0.preparaEnc();
      encomenda1.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda(1, localDateTime0, 1, 1, "$'rTaK&fV");
      encomenda0.setAceitaCusto(1);
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      encomenda0.setProdutos(hashMap0);
      encomenda0.getUser();
      encomenda0.setClassificacao(1);
      encomenda0.Clone();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("]$W*n*5KX%ZP+3BSzL", "", (-1.0), 1954.0, 615.16213825);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      encomenda0.addLinhaEncomenda(linhaEncomenda1);
      encomenda0.setUser("gxPC*1c[");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.pesoEncomenda();
      encomenda1.setClassificacao(1.0);
      encomenda1.setPeso(0.0);
      encomenda1.getMedicamentos();
      Encomenda encomenda2 = encomenda0.Clone();
      encomenda2.preparaEnc();
      encomenda2.setClassificacao(0);
      encomenda2.getAceitaCusto();
      encomenda0.setMedicamentos(1);
      encomenda2.getData();
      encomenda0.getNomTrans();
      encomenda0.setAceitaCusto(1212);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(1, (LocalDateTime) null, 0.0, 0, (String) null);
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("", (String) null, (String) null, (-1.0), map0, (-837), 0, (-2114), (String) null, 2409.76, 1895.234629, (LocalDateTime) null, (-2114));
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setValorUni((-1.0));
      encomenda1.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.getAceitaCusto();
      encomenda1.getLoja();
      encomenda0.precoEncomenda();
      encomenda0.setAceitaCusto(1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda(1, localDateTime0, 1, 1507, "M=|* Io_%JTtwa!C");
      encomenda0.setEstado(1507);
      encomenda0.setTempo(891.131605643);
      encomenda0.setMedicamentos(0);
      encomenda0.setEstado(1507);
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.getCusto();
      encomenda0.getCusto();
      encomenda0.setProdutos(map0);
      encomenda0.getProdutos();
      encomenda0.getCusto();
      encomenda0.precoEncomenda();
      encomenda0.setCusto(1.0);
      encomenda0.precoEncomenda();
      encomenda0.getPeso();
      encomenda0.precoEncomenda();
      encomenda0.getCusto();
      encomenda0.preparaEnc();
      encomenda0.getUser();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.preparaEnc();
      encomenda0.setEstado(932);
      encomenda0.setEnc("Jka)rzz;eVK>pCm");
      encomenda0.preparaEnc();
      encomenda0.setEstado(0);
      encomenda0.getEstado();
      encomenda0.pesoEncomenda();
      encomenda0.toString();
      encomenda0.setNomTrans("k/R,F?YH;gr*d-*D");
      encomenda0.precoEncomenda();
      encomenda0.getEstado();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("\nClassifica\u00E7ao: ", "", 0.0F, 932, (-5901.359725506012));
      encomenda0.setUser("Jka)rzz;eVK>pCm");
      linhaEncomenda0.setDescricao("k/R,F?YH;gr*d-*D");
      linhaEncomenda0.clone();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      linhaEncomenda1.setPeso(0.0);
      linhaEncomenda0.toString();
      linhaEncomenda1.setReferencia("");
      encomenda0.setEstado(932);
      LinhaEncomenda linhaEncomenda2 = linhaEncomenda1.clone();
      encomenda0.addLinhaEncomenda(linhaEncomenda2);
      encomenda0.getEstado();
      encomenda0.getTempo();
      encomenda0.getCusto();
      encomenda0.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(2479, (LocalDateTime) null, 2479, 2479, "y0`;+UtY_!r");
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("LinhaEncomenda", "y0`;+UtY_!r", "y0`;+UtY_!r", (-1.0), map0, 2479, 2479, 2479, "_B `&wV<PHY", 0.0, (-1.0), (LocalDateTime) null, 0.0);
      encomenda1.toString();
      Encomenda encomenda2 = new Encomenda(encomenda1);
      Encomenda encomenda3 = encomenda0.Clone();
      encomenda2.setTempo(0.0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("LinhaEncomenda", "", 0.0, 2479, 0.0);
      encomenda3.addLinhaEncomenda(linhaEncomenda0);
      encomenda2.setAceitaCusto(2479);
      encomenda2.setClassificacao(0.0);
      encomenda0.getNomTrans();
      encomenda2.setEnc("XxVAhuzF5Tu/g");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setTempo(0.0);
      encomenda0.setTempo(0.0);
      encomenda0.setPeso(0.0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("yqAcMjTl)8[#^B", "yqAcMjTl)8[#^B", 241.46062895, 1.0, 241.46062895);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      LinhaEncomenda linhaEncomenda2 = linhaEncomenda1.clone();
      linhaEncomenda2.setReferencia("T");
      encomenda1.addLinhaEncomenda(linhaEncomenda2);
      encomenda1.setTempo(241.46062895);
      encomenda1.getAceitaCusto();
      encomenda0.setEstado(0);
      encomenda0.setPeso(241.46062895);
      encomenda1.preparaEnc();
      encomenda1.setNomTrans("");
      encomenda0.getPeso();
      encomenda0.pesoEncomenda();
      Encomenda encomenda2 = encomenda0.Clone();
      encomenda2.getTempo();
      encomenda2.getLoja();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      hashMap0.put("FbG6H6^kNq%M.3_{p0^", linhaEncomenda0);
      encomenda2.setProdutos(hashMap0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.pesoEncomenda();
      encomenda0.setAceitaCusto((-1201));
      encomenda0.setEstado(0);
      encomenda0.setNomTrans((String) null);
      encomenda0.toString();
      encomenda0.setLoja("--Descri\u00E7ao: ");
      encomenda0.setTempo((-1.0));
      encomenda0.setCusto((-1201));
      encomenda0.setEstado(0);
      encomenda0.setAceitaCusto(446);
      encomenda0.pesoEncomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      encomenda0.setTempo((-2552.6252893));
      linhaEncomenda0.setPeso((-1.0));
      linhaEncomenda0.clone();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.precoEncomenda();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.getAceitaCusto();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setMedicamentos((-2657));
      encomenda0.precoEncomenda();
      encomenda0.setEstado((-2657));
      encomenda0.precoEncomenda();
      encomenda0.setNomTrans("");
      encomenda0.setData((LocalDateTime) null);
      encomenda0.getAceitaCusto();
      encomenda0.getEnc();
      encomenda0.precoEncomenda();
      encomenda0.precoEncomenda();
      encomenda0.getMedicamentos();
      encomenda0.pesoEncomenda();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((String) null, (String) null, "", (-418.492652), (Map<String, LinhaEncomenda>) null, 0, 0, 0, "", (-418.492652), (-418.492652), (LocalDateTime) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setMedicamentos(112);
      encomenda0.setTempo(3414.001696993);
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda0.setCusto(0.0);
      encomenda0.setPeso(1686.96533);
      encomenda0.getPeso();
      encomenda1.getLoja();
      encomenda0.getPeso();
      encomenda0.getData();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.precoEncomenda();
      encomenda0.setClassificacao(0.0);
      encomenda0.setUser("k!/265C");
      encomenda0.toString();
      encomenda0.getProdutos();
      encomenda0.getUser();
      encomenda0.getNomTrans();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setQuantidade((-1.0));
      linhaEncomenda0.setPeso(0.0);
      linhaEncomenda0.clone();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.getCusto();
      encomenda0.setLoja("?VZY9ff2EgUd");
      encomenda0.getProdutos();
      encomenda0.pesoEncomenda();
      encomenda0.pesoEncomenda();
      encomenda0.Clone();
      Month month0 = Month.FEBRUARY;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of((-1), month0, (-4805), (-4805), (-4805), 2484, (-1));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): -4805
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.pesoEncomenda();
      encomenda0.setClassificacao((-1027.688297214535));
      encomenda0.getClassificacao();
      encomenda0.getLoja();
      encomenda0.setAceitaCusto((-3136));
      String string0 = "EKQFNwilX2$jF,Q";
      // Undeclared exception!
      try { 
        ZoneOffset.of("");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: 
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      MockLocalTime.now();
      encomenda0.precoEncomenda();
      encomenda0.setAceitaCusto(2165);
      encomenda0.pesoEncomenda();
      encomenda0.getMedicamentos();
      encomenda0.setTempo(0.0);
      encomenda0.setEstado(0);
      encomenda0.pesoEncomenda();
      encomenda0.getTempo();
      encomenda0.getData();
      encomenda0.getNomTrans();
      encomenda0.setMedicamentos(0);
      encomenda0.getPeso();
      encomenda0.setEnc("n/a");
      encomenda0.getNomTrans();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda0.getLoja();
      encomenda0.setTempo(0.0);
      encomenda0.setMedicamentos((-1));
      encomenda1.setCusto((-1));
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda1.setNomTrans("");
      encomenda0.setProdutos(map0);
      encomenda1.setMedicamentos((-1));
      Encomenda encomenda2 = encomenda0.Clone();
      encomenda2.getAceitaCusto();
      encomenda1.getLoja();
      encomenda1.setEnc("");
      encomenda1.pesoEncomenda();
      encomenda2.getPeso();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setPeso((-860.68939465));
      encomenda0.pesoEncomenda();
      encomenda1.setLoja("P9K^");
      encomenda1.preparaEnc();
      Encomenda encomenda2 = encomenda1.Clone();
      encomenda2.getEnc();
      encomenda0.precoEncomenda();
      encomenda0.setClassificacao((-3537.1));
      encomenda2.setMedicamentos((-1));
      encomenda1.setPeso(0.0F);
      encomenda0.setCusto((-860.68939465));
      encomenda2.getClassificacao();
      // Undeclared exception!
      try { 
        encomenda2.addLinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      double double0 = (-684.93987057134);
      encomenda0.setAceitaCusto(0);
      encomenda0.setTempo((-684.93987057134));
      encomenda0.setEnc("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n");
      encomenda0.precoEncomenda();
      encomenda0.getNomTrans();
      encomenda0.getEnc();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      int int0 = 0;
      encomenda0.setEstado(0);
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(0, 0, 0, 0, 0, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setLoja("l&6,qvx(o:r");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setCusto(0.0);
      encomenda1.setNomTrans("l&6,qvx(o:r");
      encomenda0.setLoja("");
      encomenda1.setNomTrans("_@B}FMx>%q");
      encomenda0.Clone();
      encomenda1.getEstado();
      encomenda1.precoEncomenda();
      encomenda1.precoEncomenda();
      encomenda0.getMedicamentos();
      encomenda0.getClassificacao();
      encomenda0.setTempo(0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      encomenda0.precoEncomenda();
      encomenda1.setClassificacao((-1.0));
      hashMap0.clone();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      linhaEncomenda1.setReferencia("");
      encomenda1.addLinhaEncomenda(linhaEncomenda1);
      LinhaEncomenda linhaEncomenda2 = linhaEncomenda0.clone();
      LinhaEncomenda linhaEncomenda3 = new LinhaEncomenda(linhaEncomenda2);
      linhaEncomenda3.toString();
      hashMap0.put("euros", linhaEncomenda2);
      encomenda0.addLinhaEncomenda(linhaEncomenda3);
      encomenda1.setProdutos(hashMap0);
      encomenda1.preparaEnc();
      encomenda0.setCusto(0.0);
      encomenda1.preparaEnc();
      encomenda1.getData();
      encomenda1.setClassificacao(0.0);
      encomenda1.getAceitaCusto();
      encomenda0.setCusto(0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda("B", "5Y\"fCed?(-XGvo", "B", (-124.5), hashMap0, (-1655), (-1655), (-909), "", 680.181192561875, (-124.5), localDateTime0, (-124.5));
      encomenda0.getPeso();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEnc("");
      encomenda0.setPeso((-824));
      encomenda0.pesoEncomenda();
      encomenda0.setEstado((-824));
      encomenda0.setCusto(1.0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setReferencia("zGHj*,2");
      linhaEncomenda0.clone();
      linhaEncomenda0.setPeso(1.0);
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setLoja("zGHj*,2");
      encomenda0.getProdutos();
      encomenda0.getNomTrans();
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda1.toString();
      System.setCurrentTimeMillis(0L);
      encomenda1.setClassificacao(0.0);
      encomenda0.toString();
      encomenda1.pesoEncomenda();
      encomenda1.toString();
      encomenda0.Clone();
      encomenda0.getUser();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.precoEncomenda();
      encomenda0.getUser();
      encomenda0.getUser();
      encomenda0.toString();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 0.0F, (-1.0), 0.0);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      linhaEncomenda1.setPeso(1.0);
      linhaEncomenda1.setValorUni((-1.0));
      linhaEncomenda1.setReferencia("--Quanidade : ");
      encomenda0.addLinhaEncomenda(linhaEncomenda1);
      encomenda0.toString();
      encomenda0.setClassificacao((-1678.0155796046406));
      encomenda0.setAceitaCusto((-1));
      encomenda0.getPeso();
      encomenda0.setNomTrans("");
      encomenda0.getNomTrans();
      encomenda0.setTempo((-1.0));
      encomenda0.setTempo((-1.0));
      encomenda0.getNomTrans();
      encomenda0.getAceitaCusto();
      encomenda0.getData();
      encomenda0.setMedicamentos((-2696));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setAceitaCusto(0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.toString();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      hashMap0.clear();
      encomenda1.setProdutos(hashMap0);
      encomenda1.getProdutos();
      encomenda1.setEnc("");
      encomenda0.getPeso();
      encomenda0.setClassificacao(0);
      encomenda1.getNomTrans();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      encomenda0.addLinhaEncomenda(linhaEncomenda1);
      encomenda0.setEnc((String) null);
      encomenda0.setData((LocalDateTime) null);
      encomenda0.toString();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setProdutos(map0);
      encomenda0.setPeso(1250.700015);
      encomenda0.setEnc("<I,DsW{40Sm!PsX'Rl?");
      encomenda0.toString();
      encomenda0.getClassificacao();
      encomenda0.toString();
      encomenda0.setMedicamentos(0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda((-1095), (LocalDateTime) null, (-1095), 0, "tLLL0(nQZ.");
      encomenda0.setClassificacao(0.0);
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda0.setMedicamentos((-1568));
      encomenda1.setUser("#v~./5L-");
      encomenda1.toString();
      encomenda0.getNomTrans();
      encomenda1.getMedicamentos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      hashMap0.put("j'ebfj", linhaEncomenda0);
      encomenda0.setProdutos(hashMap0);
      encomenda0.getLoja();
      encomenda0.getTempo();
      encomenda0.setEnc("Encomenda");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("CvT", "XK", 26.9843, (-1319), 0.0);
      hashMap0.put((String) null, linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda("--Descri\u00E7ao: ", "--Descri\u00E7ao: ", "--Referencia: ", 0.0, hashMap0, (-1319), (-1), 1097, "", 0.0, 1097, (LocalDateTime) null, 0.0);
      encomenda0.setAceitaCusto(1194);
      encomenda0.pesoEncomenda();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEnc("4ACROTc26");
      encomenda0.getLoja();
      encomenda0.preparaEnc();
      encomenda0.setEstado((-2709));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      String string0 = "l/.Y?87<G$EwI";
      encomenda0.getProdutos();
      encomenda0.setClassificacao(133.39159104);
      encomenda0.setEnc("LinhaEncomenda");
      // Undeclared exception!
      try { 
        encomenda0.setProdutos((Map<String, LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("\nEncomenda: ", (String) null, 2622.0, 2622.0, (-3837.35));
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      encomenda0.addLinhaEncomenda(linhaEncomenda1);
      encomenda0.setMedicamentos(1740);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setNomTrans("");
      encomenda0.setPeso(0.0);
      encomenda0.getClassificacao();
      encomenda0.preparaEnc();
      encomenda0.preparaEnc();
      encomenda0.getEstado();
      encomenda0.getTempo();
      encomenda0.getAceitaCusto();
      encomenda0.getData();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setNomTrans("");
      encomenda0.setLoja("gAEI,a'{w!cBB8");
      encomenda0.preparaEnc();
      encomenda1.setMedicamentos((-450));
      Encomenda encomenda2 = encomenda1.Clone();
      encomenda2.getProdutos();
      encomenda0.getLoja();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setClassificacao((-1365.181995234));
      encomenda0.pesoEncomenda();
      encomenda0.precoEncomenda();
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda1.setCusto(0.0);
      encomenda0.toString();
      encomenda0.setAceitaCusto(0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("'I^aZ.n,P- n,xD", "'I^aZ.n,P- n,xD", "", 0.0, hashMap0, 0, 0, 0, "", 0.0, 0, (LocalDateTime) null, 0);
      encomenda0.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setTempo(0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.preparaEnc();
      encomenda0.setNomTrans("Encomenda");
      encomenda0.setUser(";lrlbZKdnUbGkW");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setClassificacao(869.710122);
      encomenda0.getCusto();
      // Undeclared exception!
      try { 
        encomenda0.setProdutos((Map<String, LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>(308);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda("", "", "", 0.0, hashMap0, (-51), (-51), 308, "", 0.0, 0.0, localDateTime0, 308);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.precoEncomenda();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCusto(0.0);
      encomenda0.pesoEncomenda();
      encomenda0.getAceitaCusto();
      encomenda0.getProdutos();
      encomenda0.setMedicamentos(0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEnc((String) null);
      encomenda0.preparaEnc();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.toString();
      encomenda1.precoEncomenda();
      encomenda1.getEnc();
      encomenda0.getMedicamentos();
      encomenda0.Clone();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getEnc();
      encomenda0.setEnc("");
      encomenda0.setLoja("");
      encomenda0.setAceitaCusto((-1));
      encomenda0.getUser();
      encomenda0.setAceitaCusto(614);
      encomenda0.getAceitaCusto();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(0, (LocalDateTime) null, 3152.903, 0, "_loKc`|pLZuu!0B");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setEnc("_loKc`|pLZuu!0B");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setData((LocalDateTime) null);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.precoEncomenda();
      encomenda0.pesoEncomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("Vm'L|", "Vm'L|", (-3557.2467), (-3557.2467), 0.0);
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      linhaEncomenda0.clone();
      encomenda0.getData();
      encomenda0.setTempo(0.0);
      linhaEncomenda0.setReferencia("Vm'L|");
      encomenda0.setCusto(0.0);
      encomenda0.toString();
      encomenda0.setClassificacao((-3557.2467));
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setNomTrans("_");
      encomenda0.getNomTrans();
      encomenda0.getTempo();
      encomenda0.setLoja("\nCusto: ");
      encomenda0.setEnc("");
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda1.Clone();
      encomenda0.getClassificacao();
      encomenda0.setCusto(0.0F);
      Encomenda encomenda2 = encomenda0.Clone();
      encomenda2.setPeso(1452.0);
      encomenda1.precoEncomenda();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("CvT", "XK", 26.9843, (-1268), 0.0);
      hashMap0.put((String) null, linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda("--Descri\u00E7ao: ", "--Descri\u00E7ao: ", "--Referencia: ", 0.0, hashMap0, (-1268), (-1), 1097, "", 0.0, 1097, (LocalDateTime) null, 0.0);
      encomenda0.setAceitaCusto(1194);
      encomenda0.pesoEncomenda();
      encomenda0.pesoEncomenda();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda(0, localDateTime0, 0.0, 0, "");
      encomenda0.setData(localDateTime0);
      encomenda0.setData(localDateTime0);
      encomenda0.setEstado((-1388));
      encomenda0.preparaEnc();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      linhaEncomenda1.setDescricao("");
      LinhaEncomenda linhaEncomenda2 = linhaEncomenda1.clone();
      linhaEncomenda2.setDescricao("");
      linhaEncomenda0.setReferencia("");
      linhaEncomenda2.setValorUni(0.0);
      encomenda0.precoEncomenda();
      encomenda0.addLinhaEncomenda(linhaEncomenda2);
      encomenda0.setTempo(3097.7);
      encomenda0.getUser();
      encomenda0.setMedicamentos((-1388));
      encomenda0.getCusto();
      encomenda0.setAceitaCusto(0);
      encomenda0.setNomTrans("BAg");
      encomenda0.setUser("");
      encomenda0.setClassificacao(0);
      encomenda0.getUser();
      encomenda0.pesoEncomenda();
      double double0 = encomenda0.getTempo();
      assertEquals(1, encomenda0.getEstado());
      assertEquals(3097.7, double0, 0.01);
  }
}
