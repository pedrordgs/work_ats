/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:21:38 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("--Referencia: ", "", 1.0, (-6), 1);
      linhaEncomenda0.toString();
      hashMap0.put("--Referencia: ", linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda("BhQ", "--Referencia: ", "--Referencia: ", 1.0, hashMap0, (-6), 1, 1, "--Referencia: ", (-6), (-6), (LocalDateTime) null, 1.0);
      encomenda0.setClassificacao(1);
      encomenda0.getProdutos();
      System.setCurrentTimeMillis((-6));
      System.setCurrentTimeMillis((-6));
      encomenda0.precoEncomenda();
      encomenda0.getProdutos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Encomenda encomenda0 = new Encomenda((-616), (LocalDateTime) null, (-1.0), 0, (String) null);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getNomTrans();
      encomenda1.getProdutos();
      encomenda1.precoEncomenda();
      Encomenda encomenda2 = encomenda1.Clone();
      encomenda2.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("--Referencia: ", "", 1.0, 2591.24, 1);
      linhaEncomenda0.toString();
      hashMap0.put("--Referencia: ", linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda("BhQ", "--Referencia: ", "--Referencia: ", 1.0, hashMap0, (-6), 1, 1, "$\"MG]4%.72^;?A0exQJ", (-6), (-6), (LocalDateTime) null, 1.0);
      encomenda0.setClassificacao(1);
      encomenda0.getProdutos();
      System.setCurrentTimeMillis((-6));
      System.setCurrentTimeMillis((-6));
      encomenda0.precoEncomenda();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      encomenda0.toString();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", "", (-3038.99241), 0.0, 0.0);
      hashMap0.put("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", linhaEncomenda0);
      encomenda0.setProdutos(hashMap0);
      encomenda0.getMedicamentos();
      encomenda0.setEstado(0);
      encomenda0.setMedicamentos(0);
      encomenda0.setAceitaCusto(0);
      encomenda0.getCusto();
      encomenda0.pesoEncomenda();
      encomenda0.setAceitaCusto((-1));
      encomenda0.setPeso(0);
      encomenda0.getAceitaCusto();
      encomenda0.getUser();
      encomenda0.setMedicamentos((-1));
      encomenda0.getAceitaCusto();
      encomenda0.setTempo(2389.357158185082);
      encomenda0.toString();
      encomenda0.setProdutos(map0);
      LocalDateTime localDateTime0 = encomenda0.getData();
      encomenda0.setEstado((-1));
      encomenda0.getClassificacao();
      encomenda0.setData(localDateTime0);
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setEnc("\nUtilizador: ");
      encomenda0.getTempo();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Encomenda encomenda0 = new Encomenda("7lYY>[", "7lYY>[", "7lYY>[", 31.07, hashMap0, 620, (-975), (-1), "7lYY>[", (-1.0), 307.8648135899, localDateTime0, (-1399.0));
      encomenda0.getTempo();
      encomenda0.getProdutos();
      encomenda0.Clone();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("e]btP>C-1!FZBS?}9j", (String) null, "\nPeso: ", 0.0, hashMap0, 67, 1985, 67, (String) null, 2286.026167, 1985, (LocalDateTime) null, 0.0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getUser();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.from(zonedDateTime0);
      Encomenda encomenda0 = new Encomenda(0, localDateTime0, (-1424.514509901), 1, "tKS*B{$7T#Q>j");
      encomenda0.getData();
      encomenda0.setEstado(0);
      encomenda0.setClassificacao((-1424.514509901));
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      encomenda0.toString();
      encomenda0.getAceitaCusto();
      encomenda0.getNomTrans();
      encomenda0.setClassificacao(0.0);
      encomenda0.setUser("0~");
      Map<String, LinhaEncomenda> map1 = encomenda0.getProdutos();
      encomenda0.setProdutos(map1);
      encomenda0.getProdutos();
      encomenda0.getClassificacao();
      encomenda0.setCusto(0);
      encomenda0.getMedicamentos();
      encomenda0.pesoEncomenda();
      encomenda0.setPeso((-1424.514509901));
      encomenda0.pesoEncomenda();
      encomenda0.getEnc();
      encomenda0.getAceitaCusto();
      encomenda0.getLoja();
      encomenda0.getEstado();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      hashMap0.clone();
      Encomenda encomenda0 = new Encomenda("o!o-p'G)", "o!o-p'G)", " ", 3596.4, hashMap0, 0, 2018, 1, "\nProdutos:\n", 0, 3596.4, (LocalDateTime) null, 1886.8844624604146);
      encomenda0.getUser();
      encomenda0.getUser();
      encomenda0.precoEncomenda();
      encomenda0.getNomTrans();
      encomenda0.getProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      hashMap0.put("sY!=%zasL%N]", linhaEncomenda1);
      encomenda0.getNomTrans();
      encomenda0.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      double double0 = (-1719.8190937688596);
      encomenda0.setClassificacao((-1719.8190937688596));
      encomenda0.getProdutos();
      int int0 = (-474);
      encomenda0.setTempo((-474));
      encomenda0.setTempo(0.0);
      encomenda0.setData((LocalDateTime) null);
      encomenda0.setEstado((-474));
      encomenda0.setAceitaCusto((-474));
      encomenda0.setLoja("");
      encomenda0.setEnc((String) null);
      encomenda0.getProdutos();
      encomenda0.setTempo((-474));
      encomenda0.Clone();
      encomenda0.setEstado((-474));
      encomenda0.setAceitaCusto((-474));
      encomenda0.setLoja("]1fX;Ri_h+NULYZd#t*");
      // Undeclared exception!
      try { 
        MockInstant.minusMillis((Instant) null, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      encomenda0.getLoja();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      encomenda0.pesoEncomenda();
      encomenda0.getEstado();
      encomenda0.setPeso((-1));
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("p%Ws=3LYL", "", (-1), 0.0F, (-426.1981));
      linhaEncomenda0.clone();
      linhaEncomenda0.setValorUni((-426.1981));
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setEstado(1);
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda0.setMedicamentos(1);
      encomenda1.setEstado(1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("r!;CCyFAj\"]cI;F7pmI", "", (String) null, 0.0, hashMap0, 0, 0, 0, (String) null, 0, (-1.0), (LocalDateTime) null, (-1.0));
      encomenda0.getMedicamentos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("E*bwzs!qscz5j>", "", (-349.7011461497355), 0.0, 1.0);
      linhaEncomenda0.setDescricao("--Descri\u00E7ao: ");
      linhaEncomenda0.setPeso(0);
      hashMap0.put("--Descri\u00E7ao: ", linhaEncomenda0);
      encomenda0.toString();
      encomenda0.setEnc("");
      encomenda0.setCusto((-1022.0));
      encomenda0.setEstado(3604);
      encomenda0.getClassificacao();
      encomenda0.getData();
      encomenda0.getCusto();
      encomenda0.getCusto();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      encomenda0.setProdutos(hashMap0);
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda1.pesoEncomenda();
      encomenda0.setTempo(3566.98);
      Encomenda encomenda2 = encomenda0.Clone();
      encomenda0.setPeso(3566.98);
      encomenda0.setPeso(0.0);
      encomenda1.setData((LocalDateTime) null);
      encomenda1.getCusto();
      encomenda1.setEnc("^okDke+w[ekeJ14");
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setReferencia("$)N,@0");
      linhaEncomenda0.setPeso(0.0F);
      encomenda2.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setNomTrans("^okDke+w[ekeJ14");
      encomenda0.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setTempo(0.0);
      encomenda0.getTempo();
      encomenda0.setEstado(0);
      encomenda0.precoEncomenda();
      encomenda0.setEnc("s}(^p- /p@G");
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda1.setCusto(0.0F);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      encomenda1.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setAceitaCusto(0);
      encomenda0.setAceitaCusto(0);
      encomenda1.getEnc();
      encomenda1.setClassificacao(0.0);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      linhaEncomenda1.clone();
      encomenda1.addLinhaEncomenda(linhaEncomenda1);
      encomenda1.getCusto();
      encomenda1.setPeso((-1548.70520916105));
      linhaEncomenda1.setReferencia("s}(^p- /p@G");
      encomenda1.pesoEncomenda();
      encomenda0.getTempo();
      encomenda1.setClassificacao(0.0);
      encomenda0.setUser("o'9nVxzRL|~");
      encomenda0.addLinhaEncomenda(linhaEncomenda1);
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      encomenda1.setProdutos(hashMap0);
      encomenda1.getProdutos();
      encomenda0.getUser();
      encomenda1.getPeso();
      encomenda1.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setEnc("$B.gT|qEo?kPPEbx1W");
      encomenda1.setUser("$B.gT|qEo?kPPEbx1W");
      encomenda1.getData();
      encomenda0.getData();
      encomenda1.setNomTrans(",saS[hr}0m3mf;:(uK");
      encomenda0.getTempo();
      encomenda0.getCusto();
      encomenda1.setMedicamentos((-356));
      encomenda1.setClassificacao((-356));
      encomenda0.setPeso(0.0);
      encomenda1.pesoEncomenda();
      encomenda0.getEstado();
      encomenda0.getLoja();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      encomenda0.setMedicamentos(0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setNomTrans((String) null);
      encomenda0.setProdutos(hashMap0);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      linhaEncomenda1.setDescricao("\n");
      linhaEncomenda1.setQuantidade(0);
      encomenda0.addLinhaEncomenda(linhaEncomenda1);
      encomenda0.setClassificacao(0.0);
      encomenda0.preparaEnc();
      encomenda0.getMedicamentos();
      encomenda0.setLoja((String) null);
      encomenda0.getLoja();
      encomenda0.setProdutos(hashMap0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getEstado();
      encomenda1.setEstado((-1));
      encomenda1.setMedicamentos((-293));
      Encomenda encomenda2 = encomenda0.Clone();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda("MV$df~(S{?>Q#Gs", "r()jWN%U4] fy7&", (-2848.0), (-293), 522.4536321);
      encomenda1.addLinhaEncomenda(linhaEncomenda1);
      encomenda0.setEstado((-293));
      LinhaEncomenda linhaEncomenda2 = new LinhaEncomenda("G}bqxn804URRozD1>8z", "--Valor por unidade : ", 0.0, 522.4536321, (-293));
      LinhaEncomenda linhaEncomenda3 = new LinhaEncomenda(linhaEncomenda2);
      encomenda2.addLinhaEncomenda(linhaEncomenda3);
      encomenda2.getProdutos();
      encomenda0.setEnc("");
      encomenda2.setNomTrans("MV$df~(S{?>Q#Gs");
      encomenda1.getMedicamentos();
      encomenda2.setMedicamentos(4993);
      encomenda1.setMedicamentos(4993);
      // Undeclared exception!
      try { 
        encomenda1.addLinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda("T30wno?T]k", "T30wno?T]k", "T30wno?T]k", 0.0, hashMap0, 1, 1, 1, "T30wno?T]k", 0.0, 0.0, localDateTime0, 0.0);
      encomenda0.setUser("T30wno?T]k");
      encomenda0.getMedicamentos();
      encomenda0.getAceitaCusto();
      encomenda0.getTempo();
      encomenda0.pesoEncomenda();
      encomenda0.getCusto();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setDescricao("n/a");
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setPeso((-1.0));
      encomenda0.setNomTrans((String) null);
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1, 1L);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      ZoneId zoneId0 = zoneOffset0.normalized();
      LocalDateTime localDateTime1 = MockLocalDateTime.ofInstant(instant0, zoneId0);
      encomenda0.setData(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda(0, localDateTime0, 293.55069093, 1, "p;WRh1Q2BdU|[}`\"");
      encomenda0.setTempo(0.0);
      encomenda0.toString();
      encomenda0.getAceitaCusto();
      encomenda0.pesoEncomenda();
      encomenda0.getEstado();
      encomenda0.getMedicamentos();
      encomenda0.setUser("p;WRh1Q2BdU|[}`\"");
      encomenda0.setLoja("2Sc:~cq0");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.pesoEncomenda();
      encomenda0.setClassificacao(0.0F);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setLoja("");
      encomenda0.getMedicamentos();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      LocalTime localTime0 = MockLocalTime.of(0, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      encomenda0.setData(localDateTime0);
      encomenda0.getEnc();
      encomenda0.setEnc((String) null);
      encomenda0.getUser();
      encomenda0.getPeso();
      encomenda0.setLoja("");
      encomenda0.getProdutos();
      encomenda0.getProdutos();
      encomenda0.getEstado();
      encomenda0.getEnc();
      encomenda0.getNomTrans();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("'t#2G*E F6kpjO\"*[*6", "/", 793.51527885, 793.51527885, 793.51527885);
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      linhaEncomenda0.setReferencia("/");
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda1.setClassificacao((-1.0));
      encomenda0.setCusto(5867.21);
      linhaEncomenda0.setQuantidade(1768.880805);
      linhaEncomenda0.setQuantidade((-931.64835638));
      linhaEncomenda0.setDescricao("DTL3(0wg");
      linhaEncomenda0.setDescricao("'t#2G*E F6kpjO\"*[*6");
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setNomTrans("DTL3(0wg");
      encomenda0.setEstado(4411);
      encomenda0.setCusto(793.51527885);
      encomenda0.pesoEncomenda();
      encomenda0.setLoja("'t#2G*E F6kpjO\"*[*6");
      encomenda0.setNomTrans("z6|A}KAQ&\u0004>");
      encomenda0.preparaEnc();
      encomenda0.getEnc();
      encomenda0.getPeso();
      encomenda1.getEnc();
      encomenda0.setNomTrans("/");
      encomenda1.toString();
      encomenda0.setNomTrans("DTL3(0wg");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      encomenda0.toString();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", "", (-3038.99241), 0.0, 0.0);
      hashMap0.put("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", linhaEncomenda0);
      encomenda0.setProdutos(hashMap0);
      encomenda0.getMedicamentos();
      encomenda0.setEstado(0);
      encomenda0.setMedicamentos(0);
      encomenda0.setAceitaCusto(0);
      encomenda0.getCusto();
      encomenda0.pesoEncomenda();
      encomenda0.setPeso(0);
      encomenda0.getAceitaCusto();
      encomenda0.getUser();
      encomenda0.setMedicamentos(0);
      encomenda0.getAceitaCusto();
      encomenda0.setTempo(2389.357158185082);
      encomenda0.toString();
      encomenda0.setProdutos(map0);
      LocalDateTime localDateTime0 = encomenda0.getData();
      encomenda0.setEstado(0);
      encomenda0.getClassificacao();
      encomenda0.setData(localDateTime0);
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setEnc("\nUtilizador: ");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      hashMap0.keySet();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda("bu$o`R8Y:{*-", "bu$o`R8Y:{*-", "bu$o`R8Y:{*-", 0.0, hashMap0, 0, 1, 1, "", 497.0, 54.5105107, localDateTime0, 0.0);
      encomenda0.getCusto();
      encomenda0.getCusto();
      encomenda0.getAceitaCusto();
      encomenda0.setClassificacao(497.0);
      encomenda0.setAceitaCusto(1);
      encomenda0.setPeso((-1.0));
      encomenda0.setLoja("\nTData: ");
      encomenda0.getUser();
      encomenda0.pesoEncomenda();
      encomenda0.setEnc("bu$o`R8Y:{*-");
      hashMap0.put("oJ]l#G@\"`;9y,.x", (LinhaEncomenda) null);
      // Undeclared exception!
      try { 
        encomenda0.addLinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Map<String, LinhaEncomenda> map0 = encomenda1.getProdutos();
      encomenda0.setProdutos(map0);
      encomenda1.Clone();
      encomenda1.setEstado((-14));
      Encomenda encomenda2 = new Encomenda("\n", "\n", "", 0.0, map0, 1380, 1380, 2906, "{dxC].f16Qde#", (-40.46331863), 0.0, (LocalDateTime) null, 757.1);
      encomenda2.getUser();
      encomenda1.getProdutos();
      encomenda1.setAceitaCusto(1380);
      encomenda2.getPeso();
      encomenda1.setEstado(1380);
      encomenda1.getEnc();
      Encomenda encomenda3 = encomenda2.Clone();
      encomenda3.setLoja("\n");
      encomenda2.getEnc();
      encomenda0.getAceitaCusto();
      encomenda1.toString();
      encomenda0.setUser("\n");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(1063, (LocalDateTime) null, 1063, 1063, "n/a");
      encomenda0.setAceitaCusto(1063);
      encomenda0.setNomTrans((String) null);
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda1.pesoEncomenda();
      encomenda0.precoEncomenda();
      encomenda0.setData((LocalDateTime) null);
      encomenda1.precoEncomenda();
      encomenda1.setNomTrans("Mh4'u_rd");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCusto(0.0);
      encomenda0.setUser("v~)");
      encomenda0.getProdutos();
      encomenda0.setTempo(0.0);
      encomenda0.setMedicamentos((-499));
      encomenda0.toString();
      encomenda0.setAceitaCusto((-1));
      encomenda0.pesoEncomenda();
      encomenda0.getUser();
      encomenda0.setAceitaCusto((-1));
      encomenda0.setMedicamentos(0);
      encomenda0.setCusto(0);
      encomenda0.precoEncomenda();
      encomenda0.precoEncomenda();
      encomenda0.getAceitaCusto();
      encomenda0.getProdutos();
      encomenda0.getEnc();
      encomenda0.getUser();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(0, (LocalDateTime) null, 0, 0, "--Referencia: ");
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      encomenda0.toString();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setEnc("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 0\nTransporte: --Referencia: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: null\nClassifica\u00E7ao: 0.0\n\n\n");
      encomenda1.setEstado((-55));
      encomenda0.getMedicamentos();
      encomenda0.getProdutos();
      encomenda1.getEnc();
      encomenda1.setPeso((-2287.35525));
      encomenda1.getClassificacao();
      encomenda0.pesoEncomenda();
      encomenda1.getProdutos();
      encomenda0.toString();
      encomenda0.toString();
      encomenda1.setClassificacao(0);
      encomenda0.preparaEnc();
      encomenda0.pesoEncomenda();
      encomenda1.setLoja("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: 0\nTransporte: --Referencia: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: null\nClassifica\u00E7ao: 0.0\n\n\n");
      encomenda0.getCusto();
      encomenda0.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-1447.5407));
      encomenda0.precoEncomenda();
      encomenda0.setClassificacao(0.0F);
      encomenda0.setCusto(0.0F);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("\"o", "--Referencia: ", 0.0F, (-1.0), (-1447.5407));
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setUser("M{N'ONHp");
      encomenda0.getLoja();
      encomenda0.getTempo();
      encomenda0.pesoEncomenda();
      encomenda0.setTempo(0.0F);
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      linhaEncomenda0.setValorUni(0.0);
      hashMap0.remove((Object) null);
      hashMap0.put("--Referencia: ", linhaEncomenda0);
      hashMap0.put("hUa_fPdv0I", linhaEncomenda0);
      encomenda0.setProdutos(hashMap0);
      encomenda0.getLoja();
      encomenda0.setAceitaCusto(2853);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      Encomenda encomenda0 = new Encomenda(0, (LocalDateTime) null, 0, 534, "");
      Encomenda encomenda1 = encomenda0.Clone();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      encomenda1.setCusto(534);
      hashMap0.put("minutos", (LinhaEncomenda) null);
      hashMap0.put("minutos", (LinhaEncomenda) null);
      encomenda1.setCusto(0.0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 0.0, 0.0, 0);
      encomenda1.setTempo((-1518.10533971579));
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      hashMap0.put("", linhaEncomenda1);
      hashMap0.put("", linhaEncomenda0);
      encomenda1.setData((LocalDateTime) null);
      hashMap0.replace("minutos", (LinhaEncomenda) null);
      encomenda1.setLoja("");
      // Undeclared exception!
      try { 
        encomenda0.setProdutos(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEnc("");
      encomenda0.setTempo((-1013.0));
      encomenda0.setEstado((-1210));
      encomenda0.setAceitaCusto((-1210));
      encomenda0.setEnc("");
      encomenda0.setEnc("");
      encomenda0.getUser();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      encomenda0.addLinhaEncomenda(linhaEncomenda1);
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda2 = new LinhaEncomenda("", (String) null, (-1210), 0.0, 0.0);
      linhaEncomenda2.setPeso((-1210));
      hashMap0.put("", linhaEncomenda2);
      encomenda0.setProdutos(hashMap0);
      encomenda0.precoEncomenda();
      encomenda0.Clone();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCusto((-1086.5969029));
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda1.setEstado((-1));
      encomenda1.preparaEnc();
      encomenda0.toString();
      encomenda0.setNomTrans("?\"?vwk).qSm=P-eLfp");
      encomenda0.setPeso(0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setEnc("");
      encomenda1.setUser("");
      encomenda1.setMedicamentos(383);
      encomenda1.setClassificacao(766.541500593181);
      encomenda1.setPeso((-1363.47239818));
      encomenda1.setEnc("");
      encomenda1.getProdutos();
      encomenda1.setPeso((-1357.88019379166));
      encomenda1.setLoja("\nAceita o Custo: ");
      encomenda1.getEnc();
      encomenda1.pesoEncomenda();
      encomenda0.getProdutos();
      encomenda1.getLoja();
      encomenda0.setEstado(0);
      encomenda1.precoEncomenda();
      encomenda0.getCusto();
      encomenda0.setAceitaCusto(0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.preparaEnc();
      encomenda0.setEstado(0);
      encomenda0.getPeso();
      encomenda0.setNomTrans("");
      encomenda0.setUser("");
      encomenda0.precoEncomenda();
      encomenda0.pesoEncomenda();
      encomenda0.getTempo();
      encomenda0.getTempo();
      encomenda0.setCusto(0.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso(0.0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.getAceitaCusto();
      encomenda1.precoEncomenda();
      encomenda0.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.pesoEncomenda();
      encomenda0.setClassificacao((-1055.14795301733));
      encomenda0.pesoEncomenda();
      encomenda0.setEnc("7kM&z4Gt1J'=For");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setClassificacao(0.0);
      encomenda0.setPeso(0.0);
      encomenda0.getProdutos();
      encomenda0.getProdutos();
      encomenda0.precoEncomenda();
      encomenda0.setPeso(1804.1);
      encomenda0.getTempo();
      encomenda0.getEnc();
      encomenda0.getProdutos();
      encomenda0.setEstado(0);
      encomenda0.setUser("");
      encomenda0.precoEncomenda();
      encomenda0.setAceitaCusto((-799));
      encomenda0.setMedicamentos((-799));
      encomenda0.getPeso();
      encomenda0.setEstado(2774);
      encomenda0.getNomTrans();
      encomenda0.getAceitaCusto();
      encomenda0.setClassificacao(0.0);
      encomenda0.setUser("");
      encomenda0.pesoEncomenda();
      encomenda0.getCusto();
      encomenda0.setAceitaCusto((-1));
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 2774, 972.55080133, (-4261.227260550819));
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda((-1637), (LocalDateTime) null, 0.0, (-1637), "4yLNR");
      encomenda0.pesoEncomenda();
      encomenda0.getEstado();
      encomenda0.getLoja();
      encomenda0.setData((LocalDateTime) null);
      encomenda0.getEnc();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      encomenda0.setNomTrans("--Referencia: ");
      encomenda0.setMedicamentos((-2342));
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "gc|+7'R", (-2718.5464111227925), 0.0, (-2187.775142583995));
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setClassificacao((-2187.775142583995));
      encomenda0.setAceitaCusto(1068);
      encomenda0.setTempo(1068);
      encomenda0.pesoEncomenda();
      encomenda0.getUser();
      encomenda0.precoEncomenda();
      encomenda0.preparaEnc();
      encomenda0.setNomTrans("--Referencia: ");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      int int0 = 67;
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(67, 0, zoneOffset0);
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda("", "`$=MvjOW6b1voP*P%", "", (-1.0), (Map<String, LinhaEncomenda>) null, 67, 67, 67, "`$=MvjOW6b1voP*P%", (-1.0), (-2243.71627842), localDateTime0, (-2243.71627842));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.pesoEncomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      linhaEncomenda1.toString();
      encomenda0.addLinhaEncomenda(linhaEncomenda1);
      encomenda0.precoEncomenda();
      encomenda0.setNomTrans("_");
      encomenda0.setEstado(307);
      encomenda0.getData();
      encomenda0.pesoEncomenda();
      encomenda0.setEstado(307);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.preparaEnc();
      encomenda0.preparaEnc();
      encomenda0.setLoja("\u0000WlTbi0&x{wO1");
      encomenda0.setTempo(1764.543037108982);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      encomenda0.setData(localDateTime0);
      encomenda0.precoEncomenda();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZoneId zoneId0 = ZoneId.ofOffset("", zoneOffset0);
      Clock clock0 = MockClock.tickSeconds(zoneId0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Encomenda encomenda0 = new Encomenda("", "", "", 0.0, hashMap0, (-1859), (-1859), (-2820), "", (-2820), (-2820), localDateTime0, (-1859));
      encomenda0.setMedicamentos((-2820));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda(0, (LocalDateTime) null, 0.0, 0, "");
      encomenda0.precoEncomenda();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setNomTrans("R-");
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setAceitaCusto(1);
      encomenda0.getNomTrans();
      encomenda0.setEstado(64);
      encomenda0.setCusto(1);
      encomenda0.setMedicamentos(64);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      // Undeclared exception!
      try { 
        encomenda0.addLinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.pesoEncomenda();
      encomenda0.setClassificacao(0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setMedicamentos(0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEstado(0);
      encomenda0.setAceitaCusto(1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setTempo(738.48169731);
      encomenda0.setUser("j");
      encomenda0.getLoja();
      encomenda0.getEnc();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.precoEncomenda();
      encomenda0.setClassificacao(0.0F);
      encomenda0.pesoEncomenda();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.pesoEncomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.precoEncomenda();
      encomenda0.getData();
      encomenda0.pesoEncomenda();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      double double0 = 4381.3289719;
      hashMap0.putIfAbsent("--Referencia: ", (LinhaEncomenda) null);
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda("", "", "", (-917.1), hashMap0, (-419), (-419), (-419), "", 4381.3289719, 318.8493922712197, (LocalDateTime) null, (-917.1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda(1, localDateTime0, 1, (-15), "n/a");
      encomenda0.setEstado(1);
      encomenda0.setCusto((-15));
      encomenda0.preparaEnc();
      encomenda0.setCusto(4265.194754919107);
      encomenda0.setTempo(1);
      encomenda0.getData();
      encomenda0.setNomTrans("\nClassifica\u00E7ao: ");
      encomenda0.precoEncomenda();
      encomenda0.getCusto();
      encomenda0.setLoja("n/a");
      encomenda0.setEnc("^V(U7Ns=xA");
      encomenda0.setUser("jFG");
      encomenda0.getLoja();
      encomenda0.toString();
      Encomenda encomenda1 = encomenda0.Clone();
      encomenda0.setUser("^V(U7Ns=xA");
      encomenda1.setUser("s};9BzgD/]&I:r^h3\"~");
      encomenda0.setEstado(2139);
      encomenda1.getEnc();
      assertEquals(2139, encomenda0.getEstado());
      assertEquals(1, encomenda1.getAceitaCusto());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      String string0 = encomenda0.toString();
      assertEquals("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", string0);
      
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", "", (-3038.99241), 0.0, 0.0);
      hashMap0.put("\nEncomenda: \nLoja: \nUtilizador: \nPeso: 0.0\nProdutos:\n\nAceita o Custo: 0\nContem Medicamentos: 0\nEstado da Encomenda: -1\nTransporte: \nCusto: 0.0euros\nTempo: -1.0minutos\nTData: 2014-02-14T20:21:21.320\nClassifica\u00E7ao: 0.0\n\n\n", linhaEncomenda0);
      encomenda0.setProdutos(hashMap0);
      encomenda0.getMedicamentos();
      encomenda0.setEstado(0);
      encomenda0.setMedicamentos(0);
      encomenda0.setAceitaCusto(0);
      encomenda0.getCusto();
      encomenda0.setPeso(0);
      encomenda0.getAceitaCusto();
      encomenda0.getUser();
      encomenda0.setMedicamentos(0);
      encomenda0.getAceitaCusto();
      encomenda0.setTempo(0);
      encomenda0.toString();
      encomenda0.setProdutos(map0);
      LocalDateTime localDateTime0 = encomenda0.getData();
      encomenda0.getClassificacao();
      encomenda0.setData(localDateTime0);
      encomenda0.addLinhaEncomenda(linhaEncomenda0);
      encomenda0.setEnc("\nUtilizador: ");
      assertEquals(0.0, encomenda0.getTempo(), 0.01);
  }
}
