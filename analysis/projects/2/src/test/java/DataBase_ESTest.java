/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 17:42:36 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataBase_ESTest extends DataBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      String string0 = null;
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.Clone();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      dataBase0.getEncomendaAceitaCusto();
      encomenda0.pesoEncomenda();
      encomenda1.setUser("DataBase");
      encomenda0.pesoEncomenda();
      dataBase0.getUtilizador("Tempo de espera: ");
      String string1 = "hxR.A|Xe2|&";
      encomenda1.setNomTrans("hxR.A|Xe2|&");
      encomenda1.setProdutos(map0);
      encomenda1.Clone();
      encomenda1.toString();
      dataBase0.addEnc(encomenda1);
      try { 
        dataBase0.addEnc(encomenda0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setPeso(0.0);
      encomenda1.Clone();
      encomenda0.preparaEnc();
      encomenda0.setData((LocalDateTime) null);
      Encomenda encomenda2 = encomenda1.Clone();
      encomenda2.preparaEnc();
      dataBase0.addEnc(encomenda2);
      dataBase0.getEncomenda("");
      dataBase0.existeUtilizador("");
      dataBase0.getEncomendasUser("\"6\"m7WY*W?.R\"cTS$^m");
      dataBase0.getEncomendaNaoAceitaCusto();
      dataBase0.getEncomendaNaoAceitaCusto();
      // Undeclared exception!
      try { 
        dataBase0.add((Empresa) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendas();
      Ponto2D ponto2D0 = new Ponto2D();
      Loja loja0 = new Loja("", "", "", ponto2D0, (-1), (String) null);
      Loja loja1 = new Loja(loja0);
      loja1.setLocal(ponto2D0);
      Loja loja2 = loja1.clone();
      loja2.setTempoEspera((-1));
      loja2.setLocal(ponto2D0);
      ponto2D0.setY(92.70117273991);
      loja2.setMorada("\nTData: ");
      dataBase0.add(loja2);
      dataBase0.addEncAceite("DataBase");
      dataBase0.totalFaturado("DataBase", (LocalDateTime) null);
      dataBase0.getEncomendasLoja("");
      dataBase0.getPerfil("");
      dataBase0.getEncomendaNaoAceitaCusto();
      // Undeclared exception!
      try { 
        dataBase0.ordenarUsers((Comparator<Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      String string0 = "e3400";
      // Undeclared exception!
      try { 
        dataBase0.addEnc((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("", "", "", 2.0, map0, 578, 578, 0, "", 2.0, 578, (LocalDateTime) null, 0.0);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda1.setPeso(0.0);
      encomenda2.Clone();
      encomenda1.preparaEnc();
      encomenda1.setData((LocalDateTime) null);
      Encomenda encomenda3 = encomenda2.Clone();
      encomenda3.preparaEnc();
      dataBase0.addEnc(encomenda3);
      dataBase0.getEncomenda("");
      dataBase0.existeUtilizador("");
      dataBase0.getEncomendasUser("\"6\"m7WY*W?.R\"cTS$^m");
      dataBase0.getEncomendaNaoAceitaCusto();
      dataBase0.getEncomendaNaoAceitaCusto();
      // Undeclared exception!
      try { 
        dataBase0.add((Empresa) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Empresa empresa0 = new Empresa();
      Empresa empresa1 = new Empresa(empresa0);
      Ponto2D ponto2D0 = empresa1.getLocal();
      Ponto2D ponto2D1 = ponto2D0.clone();
      ponto2D1.clone();
      empresa0.setLocal(ponto2D0);
      empresa0.setLocal(ponto2D1);
      Empresa empresa2 = new Empresa("Transporte", "Transporte", "Transporte", ponto2D1, 7.0, 2008, 2008, (String) null, 7.0, 2008);
      dataBase0.add(empresa2);
      Voluntario voluntario0 = new Voluntario();
      dataBase0.add(voluntario0);
      Utilizador utilizador0 = new Utilizador();
      dataBase0.add(utilizador0);
      dataBase0.existeUtilizador("}3E4vLGT|H4|=&y2xd)");
      dataBase0.existeUtilizador("");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      DataBase dataBase1 = new DataBase();
      Ponto2D ponto2D0 = new Ponto2D();
      Ponto2D ponto2D1 = new Ponto2D(ponto2D0);
      dataBase0.getVoluntario("Tp94k*]&zs3E|Y Wy ");
      Voluntario voluntario0 = new Voluntario("`'p\"+<x#a_*", "Tp94k*]&zs3E|Y Wy ", "I'2,1sM?", ponto2D1, 3618.1286231454924, (-1510), (-1510), false);
      dataBase1.add(voluntario0);
      dataBase1.getUtilizador("I'2,1sM?");
      dataBase0.getEncomendas();
      dataBase1.existeUtilizador("Tp94k*]&zs3E|Y Wy ");
      dataBase1.existeUtilizador("`'p\"+<x#a_*");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      String string0 = null;
      // Undeclared exception!
      try { 
        dataBase0.gravaEmObjStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendaNaoAceitaCusto();
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setPassword("=v OhiTG_w");
      utilizador0.setNum((-2092));
      dataBase0.add((Perfil) utilizador0);
      Empresa empresa0 = new Empresa();
      int int0 = 0;
      empresa0.setVelmed(0);
      empresa0.toString();
      Ponto2D ponto2D0 = new Ponto2D((-2282.30666629), 0.0);
      Voluntario voluntario0 = new Voluntario("=v OhiTG_w", "=v OhiTG_w", "", ponto2D0, (-2092), 3217, (-1899), false);
      dataBase0.add(voluntario0);
      dataBase0.add(empresa0);
      dataBase0.getUtilizador("W,");
      Loja loja0 = new Loja();
      Loja loja1 = new Loja(loja0);
      dataBase0.add(loja1);
      dataBase0.add(utilizador0);
      // Undeclared exception!
      try { 
        dataBase0.getLoja("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Utilizador cannot be cast to Loja
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Ponto2D ponto2D0 = new Ponto2D(0.0, 0.0);
      Ponto2D ponto2D1 = ponto2D0.clone();
      ponto2D1.setY((-763.3280908));
      ponto2D0.setX((-763.3280908));
      Loja loja0 = new Loja((String) null, (String) null, (String) null, ponto2D1, 2008, (String) null);
      loja0.setTempoEspera(1263);
      ponto2D1.setX(2008);
      ponto2D0.setY((-2054));
      loja0.setTempoEspera((-2054));
      dataBase0.add((Perfil) loja0);
      dataBase0.getEncomendasUser("");
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      loja0.setMorada((String) null);
      dataBase0.ordenarUsers(comparator0);
      ponto2D0.setY(1310.920089948503);
      dataBase0.getPerfis();
      dataBase0.add(loja0);
      dataBase0.add(loja0);
      dataBase0.getEncomendasLoja((String) null);
      // Undeclared exception!
      try { 
        dataBase0.getVoluntario((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Loja cannot be cast to Voluntario
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getUtilizador("g=v-_+l5X!x[ JRJ9lU");
      Voluntario voluntario0 = new Voluntario();
      voluntario0.toString();
      voluntario0.clone();
      dataBase0.add(voluntario0);
      dataBase0.getLoja("g=v-_+l5X!x[ JRJ9lU");
      String string0 = "";
      dataBase0.getEncomendasLoja("");
      dataBase0.getEncomendaAceitaCusto();
      String string1 = "";
      // Undeclared exception!
      try { 
        dataBase0.getEmpresa("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Voluntario cannot be cast to Empresa
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Ponto2D ponto2D0 = new Ponto2D(0.0, 0.0);
      String string0 = "%aZ:o'";
      dataBase0.getUtilizador("");
      dataBase0.getEncomendasLoja("%aZ:o'");
      Empresa empresa0 = new Empresa((String) null, "Iba+^`.*", "Iba+^`.*", ponto2D0, 419.29141, (-1203), (-1203), "7F^kYj$=`z<Hc%", 0.0, (-3423.336940050716));
      Empresa empresa1 = new Empresa(empresa0);
      Ponto2D ponto2D1 = empresa1.getLocal();
      empresa0.clone();
      Voluntario voluntario0 = new Voluntario("h,^MZIv6'tP>h1kw-AV", "h,^MZIv6'tP>h1kw-AV", (String) null, ponto2D1, (-1548.8729822317), (-1), (-1), true);
      dataBase0.add(voluntario0);
      dataBase0.add(voluntario0);
      empresa0.clone();
      voluntario0.setLocal(ponto2D0);
      dataBase0.getUtilizador("Iba+^`.*");
      dataBase0.getLoja("7F^kYj$=`z<Hc%");
      dataBase0.getUtilizador("<?U>=?#kp'OC,N");
      dataBase0.add(voluntario0);
      // Undeclared exception!
      try { 
        dataBase0.getEncomendaAceite((-1203));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Encomenda encomenda0 = new Encomenda(3416, (LocalDateTime) null, 3416, 3416, "");
      encomenda0.setLoja("");
      Encomenda encomenda1 = encomenda0.Clone();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda1.setProdutos(map0);
      dataBase0.addEnc(encomenda1);
      dataBase0.getUtilizador("");
      dataBase0.getEncomenda("");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.addEncAceite("ojBZKf!=");
      dataBase0.getEncomendasLoja("P&~j\u0007yf8:G");
      dataBase0.getLoja((String) null);
      dataBase0.getVoluntario("P&~j\u0007yf8:G");
      dataBase0.getEncomendas();
      String string0 = "j1tH=\"f@M02Coaa\\*";
      dataBase0.getEncomendasUser("j1tH=\"f@M02Coaa*");
      dataBase0.getEncomendaAceite(0);
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      dataBase0.ordenarUsers(comparator0);
      dataBase0.getEncomendaNaoAceitaCusto();
      dataBase0.getEncomendasLoja("@oDM:wk^q `a^wc5");
      Empresa empresa0 = new Empresa();
      Empresa empresa1 = new Empresa(empresa0);
      empresa1.setCustokm(0);
      Empresa empresa2 = empresa1.clone();
      empresa2.setNome("wXwzv]E7(}");
      dataBase0.add(empresa2);
      // Undeclared exception!
      try { 
        dataBase0.getUtilizador("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Empresa cannot be cast to Utilizador
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Utilizador> comparator1 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      dataBase0.ordenarUsers(comparator1);
      dataBase0.ordenarUsers(comparator0);
      String string0 = "s/^";
      String string1 = "n/a";
      Ponto2D ponto2D0 = new Ponto2D();
      Ponto2D ponto2D1 = new Ponto2D(ponto2D0);
      LinkedList<Ponto2D> linkedList0 = new LinkedList<Ponto2D>();
      // Undeclared exception!
      try { 
        ponto2D1.closest(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Empresa empresa0 = new Empresa();
      Empresa empresa1 = new Empresa(empresa0);
      Empresa empresa2 = empresa1.clone();
      Ponto2D ponto2D0 = empresa2.getLocal();
      empresa1.setEmail("");
      Empresa empresa3 = new Empresa("", "", "", ponto2D0, (-36.49239867232728), (-1), 463, "v?]d0Q]Mbc8O1v2~", 0.0, (-2648.096463324));
      empresa3.setLocal((Ponto2D) null);
      empresa3.setLicMedicamentos(0);
      dataBase0.add(empresa3);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      dataBase0.totalFaturado("{J=", localDateTime0);
      dataBase0.getEncomendasUser("GM#Hz~");
      dataBase0.getLoja("Mo4/psDo)zvI");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendaNaoAceitaCusto();
      dataBase0.getEmpresa("");
      dataBase0.getEncomendaNaoAceitaCusto();
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      dataBase0.add(utilizador1);
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      dataBase0.ordenarUsers(comparator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      String string0 = "";
      // Undeclared exception!
      try { 
        dataBase0.ordenarUsers((Comparator<Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Utilizador utilizador0 = new Utilizador();
      dataBase0.add(utilizador0);
      try { 
        dataBase0.gravaEmObjStream("+g^r #8/0iJ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getVoluntario("S");
      dataBase0.getEncomendas();
      dataBase0.addEncAceite("HFvP\"ZzE+9U");
      dataBase0.getEncomendasUser("DataBase");
      dataBase0.addEncAceite("z");
      dataBase0.getEncomendasUser("");
      dataBase0.getEmpresa("");
      dataBase0.getPerfil("Uw(tR;5sjz=");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getPerfis();
      Empresa empresa0 = new Empresa();
      empresa0.toString();
      dataBase0.add(empresa0);
      empresa0.setRaio(0.0);
      dataBase0.add((Perfil) empresa0);
      dataBase0.getEncomendasLoja(".nG(%G");
      dataBase0.getLoja(".nG(%G");
      String string0 = "^2w";
      dataBase0.getEncomendasLoja("^2w");
      dataBase0.getVoluntario("%");
      dataBase0.getEncomendasLoja("");
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      dataBase0.ordenarUsers(comparator0);
      try { 
        dataBase0.getEncomenda("5Or^]p}@z");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encomenda nao existe
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Empresa empresa0 = new Empresa();
      Empresa empresa1 = new Empresa(empresa0);
      Ponto2D ponto2D0 = empresa1.getLocal();
      Ponto2D ponto2D1 = ponto2D0.clone();
      ponto2D1.move(ponto2D0);
      empresa1.setRaio(319.8668);
      empresa1.setLocal(ponto2D1);
      dataBase0.add(empresa1);
      String string0 = "";
      // Undeclared exception!
      try { 
        dataBase0.getUtilizador("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Empresa cannot be cast to Utilizador
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Ponto2D ponto2D0 = new Ponto2D();
      ponto2D0.toString();
      Utilizador utilizador0 = new Utilizador("oS$D@(y", "K&a1j;8\"+^Bw", "ytDFC]=5wE<]Q3+3", ponto2D0, 535);
      utilizador0.clone();
      dataBase0.add(utilizador0);
      dataBase0.getUtilizador("oS$D@(y");
      Empresa empresa0 = new Empresa();
      dataBase0.getEncomendasUser((String) null);
      empresa0.setVelmed((-357));
      dataBase0.add(empresa0);
      dataBase0.getEncomendasUser("t9");
      dataBase0.existeUtilizador("(0.0,0.0)");
      dataBase0.addEncAceite("&+S");
      dataBase0.addEncAceite("%J5jOh52(r/f<SD.K");
      dataBase0.getLoja((String) null);
      dataBase0.getEncomendas();
      dataBase0.existeUtilizador((String) null);
      dataBase0.getVoluntario("ytDFC]=5wE<]Q3+3");
      dataBase0.getEncomendaAceitaCusto();
      dataBase0.getPerfis();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendasUser("\"DRn B|3nnRFQ&k{<?");
      dataBase0.getEmpresa("4H6zOAf4'");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendaNaoAceitaCusto();
      // Undeclared exception!
      try { 
        dataBase0.add((Perfil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      String string0 = "KQ[IIjF";
      int int0 = (-1);
      // Undeclared exception!
      try { 
        dataBase0.add((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Empresa empresa0 = new Empresa();
      Loja loja0 = new Loja();
      dataBase0.add(loja0);
      dataBase0.add(empresa0);
      dataBase0.getEncomendas();
      dataBase0.getEncomendasTrans("Pc$Y>!?u|%~h");
      dataBase0.getLoja("13sJ'Veqqv*:o/.4");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getVoluntario((String) null);
      // Undeclared exception!
      try { 
        dataBase0.add((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      int int0 = 0;
      // Undeclared exception!
      try { 
        dataBase0.getEncomendaAceite(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendaNaoAceitaCusto();
      String string0 = "G";
      dataBase0.getLoja("G");
      // Undeclared exception!
      try { 
        dataBase0.add((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Encomenda encomenda0 = new Encomenda();
      dataBase0.addEnc(encomenda0);
      dataBase0.getVoluntario("6vlW{#]~*f?1pWobp");
      // Undeclared exception!
      try { 
        dataBase0.getEncomendaAceite(1350);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1350, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEmpresa("\n");
      dataBase0.getVoluntario("");
      dataBase0.getPerfil("\n\n\n");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      String string0 = "";
      dataBase0.getLoja("");
      // Undeclared exception!
      try { 
        dataBase0.add((Perfil) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      String string0 = null;
      dataBase0.getEmpresa((String) null);
      // Undeclared exception!
      try { 
        dataBase0.add((Empresa) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dataBase0.getVoluntario((String) null);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso(7.0);
      dataBase0.getEncomendasTrans((String) null);
      encomenda0.setPeso(1541.0229);
      encomenda0.setUser((String) null);
      dataBase0.addEnc(encomenda0);
      dataBase0.getLoja((String) null);
      encomenda0.setUser((String) null);
      dataBase0.getLoja((String) null);
      dataBase0.getEncomendas();
      dataBase0.getEncomendaNaoAceitaCusto();
      try { 
        dataBase0.addEnc(encomenda0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.addEncAceite("ojBZKf!=");
      dataBase0.getEncomendasLoja("P&~j\u0007yf8:G");
      dataBase0.getLoja((String) null);
      dataBase0.getVoluntario("P&~j\u0007yf8:G");
      dataBase0.getEncomendas();
      dataBase0.getEncomendasUser("j1tH=\"f@M02Coaa*");
      dataBase0.getEncomendaAceite(0);
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      dataBase0.ordenarUsers(comparator0);
      dataBase0.getEncomendaNaoAceitaCusto();
      dataBase0.getEncomendasLoja("@oDM:wk^q `a^wc5");
      Empresa empresa0 = new Empresa();
      Empresa empresa1 = new Empresa(empresa0);
      empresa1.setCustokm(0);
      Empresa empresa2 = empresa1.clone();
      empresa2.setNome("wXwzv]E7(}");
      dataBase0.add(empresa2);
      Utilizador utilizador0 = new Utilizador();
      dataBase0.getEncomendasUser("j1tH=\"f@M02Coaa*");
      dataBase0.getEncomendas();
      dataBase0.getEncomendasUser("A)=");
      // Undeclared exception!
      try { 
        dataBase0.getEncomendaAceite(784);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 784, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      String string0 = "";
      try { 
        dataBase0.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encomenda nao existe
         //
         verifyException("DataBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      Voluntario voluntario0 = new Voluntario();
      dataBase0.add((Perfil) voluntario0);
      dataBase0.add(voluntario0);
      dataBase0.totalFaturado("-e;>DGM`qu*~p'7p(m'", (LocalDateTime) null);
      Encomenda encomenda0 = new Encomenda();
      dataBase0.addEnc(encomenda0);
      try { 
        dataBase0.gravaEmObjStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      String string0 = "Velocidade media: ";
      // Undeclared exception!
      try { 
        ZoneOffset.of((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offsetId
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getLoja("p2/` ~");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEmpresa("Encomenda nao existe");
      Loja loja0 = new Loja();
      loja0.setPassword("+");
      Loja loja1 = new Loja(loja0);
      Loja loja2 = loja1.clone();
      dataBase0.getEncomendas();
      Utilizador utilizador0 = new Utilizador();
      dataBase0.add(utilizador0);
      dataBase0.add(loja2);
      dataBase0.existeUtilizador((String) null);
      dataBase0.getVoluntario("+");
      dataBase0.getPerfis();
      Comparator<Utilizador> comparator0 = (Comparator<Utilizador>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      dataBase0.ordenarUsers(comparator0);
      dataBase0.getUtilizador((String) null);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      dataBase0.getEncomendaNaoAceitaCusto();
      dataBase0.getEncomendasTrans((String) null);
      String string0 = "e3422";
      dataBase0.getEncomendasTrans("e3422");
      dataBase0.getEncomendasLoja((String) null);
      dataBase0.getEncomendaAceitaCusto();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.pesoEncomenda();
      String string1 = "x|!+E28?NjIqm-T";
      encomenda0.toString();
      encomenda0.setLoja("x|!+E28?NjIqm-T");
      dataBase0.addEnc(encomenda0);
      dataBase0.addEncAceite("e3482");
      dataBase0.getEncomendas();
      dataBase0.existeUtilizador("");
      dataBase0.getEncomendaAceitaCusto();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setRaio((-638.871280455091));
      voluntario0.clone();
      voluntario0.setRaio(688.7628);
      dataBase0.add((Perfil) voluntario0);
      dataBase0.getEncomendasUser("e3482");
      try { 
        dataBase0.gravaEmObjStream("x|!+E28?NjIqm-T");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      String string0 = null;
      Empresa empresa0 = new Empresa();
      Empresa empresa1 = new Empresa(empresa0);
      dataBase0.add((Perfil) empresa1);
      dataBase0.getPerfil((String) null);
      dataBase0.getEncomendasUser((String) null);
      dataBase0.getEncomendas();
      dataBase0.getPerfil((String) null);
      // Undeclared exception!
      try { 
        MockLocalDateTime.ofEpochSecond(0L, 1566, (ZoneOffset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offset
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DataBase dataBase0 = new DataBase();
      DataBase dataBase1 = new DataBase();
      Ponto2D ponto2D0 = new Ponto2D();
      Ponto2D ponto2D1 = new Ponto2D(ponto2D0);
      dataBase1.getUtilizador("");
      // Undeclared exception!
      try { 
        dataBase0.add((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DataBase", e);
      }
  }
}
