/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:23:35 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transporte_ESTest extends Transporte_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("X\"6@j^pH&w#Dh)KQb", "X\"6@j^pH&w#Dh)KQb", "AYlyh^&+lN(@im9^`$", (Ponto2D) null, (-2846.420006), 499, 499, true);
      int int0 = voluntario0.getVelmed();
      assertEquals(499, voluntario0.getLicMedicamentos());
      assertEquals(499, int0);
      assertEquals((-2846.420006), voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      empresa0.setVelmed((-4741));
      int int0 = empresa0.getVelmed();
      assertEquals((-4741), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "", "KXHGU! i", (Ponto2D) null, 977.992, (-2759), 0, true);
      double double0 = voluntario0.getRaio();
      assertEquals(0, voluntario0.getLicMedicamentos());
      assertEquals(977.992, double0, 0.01);
      assertEquals((-2759), voluntario0.getVelmed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      Voluntario voluntario0 = new Voluntario("Velocidade media: ", "Velocidade media: ", "Velocidade media: ", ponto2D0, (-1.0), 1, 1243, true);
      double double0 = voluntario0.getRaio();
      assertEquals(1243, voluntario0.getLicMedicamentos());
      assertEquals(1, voluntario0.getVelmed());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLicMedicamentos((-1731));
      int int0 = voluntario0.getLicMedicamentos();
      assertEquals((-1731), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("X\"6@j^pH&w#Dh)KQb", "X\"6@j^pH&w#Dh)KQb", "AYlyh^&+lN(@im9^`$", (Ponto2D) null, (-2846.420006), 499, 499, true);
      Transporte transporte0 = voluntario0.clone();
      assertEquals(499, transporte0.getLicMedicamentos());
      assertEquals(499, voluntario0.getVelmed());
      assertEquals(499, transporte0.getVelmed());
      assertEquals((-2846.420006), voluntario0.getRaio(), 0.01);
      assertEquals(499, voluntario0.getLicMedicamentos());
      assertEquals((-2846.420006), transporte0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Transporte transporte0 = voluntario0.clone();
      assertEquals(0, transporte0.getVelmed());
      assertEquals(0, transporte0.getLicMedicamentos());
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Empresa empresa0 = new Empresa("AO", "\n", "S", (Ponto2D) null, 1.0, 52, 1740, "\n", (-1685.9657374312133), 2087.212867088);
      Transporte transporte0 = empresa0.clone();
      assertEquals(1740, empresa0.getLicMedicamentos());
      assertEquals(52, empresa0.getVelmed());
      assertEquals(1.0, empresa0.getRaio(), 0.01);
      assertEquals(52, transporte0.getVelmed());
      assertEquals(1.0, transporte0.getRaio(), 0.01);
      assertEquals(1740, transporte0.getLicMedicamentos());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      Empresa empresa0 = new Empresa("\n", "F:Unk", "F:Unk", ponto2D0, 0.0, (-903), (-1), "", 181.223049637608, 0.0);
      Transporte transporte0 = empresa0.clone();
      assertEquals((-903), transporte0.getVelmed());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals((-903), empresa0.getVelmed());
      assertEquals((-1), empresa0.getLicMedicamentos());
      assertEquals((-1), transporte0.getLicMedicamentos());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("*o/3+^j*dgI`G|zm", "*o/3+^j*dgI`G|zm", "(", (Ponto2D) null, 186.144222302, 1770, 1770, true);
      // Undeclared exception!
      try { 
        voluntario0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Perfil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      int int0 = empresa0.getVelmed();
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      double double0 = empresa0.getRaio();
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      int int0 = empresa0.getLicMedicamentos();
      assertEquals(0, int0);
      assertEquals(0, empresa0.getVelmed());
      assertEquals(0.0, empresa0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      Empresa empresa0 = new Empresa("ITxpZc=IR#Zc+Q5", "ITxpZc=IR#Zc+Q5", "ITxpZc=IR#Zc+Q5", ponto2D0, 215.44600755, 1, 1, "ITxpZc=IR#Zc+Q5", 215.44600755, 1);
      empresa0.setRaio(1);
      assertEquals(1.0, empresa0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      doReturn("ITxpZc=IR#Zc+Q5").when(ponto2D0).toString();
      Empresa empresa0 = new Empresa("ITxpZc=IR#Zc+Q5", "ITxpZc=IR#Zc+Q5", "ITxpZc=IR#Zc+Q5", ponto2D0, 215.44600755, 1, 1, "ITxpZc=IR#Zc+Q5", 215.44600755, 1);
      String string0 = empresa0.toString();
      assertEquals("Perfil: ITxpZc=IR#Zc+Q5\nITxpZc=IR#Zc+Q5\nITxpZc=IR#Zc+Q5\nITxpZc=IR#Zc+Q5\nRaio de a\u00E7ao: 215.44600755\nVelocidade media: 1\nLicen\u00E7a de transporte de medicamentos: 1\nNif: ITxpZc=IR#Zc+Q5\nCusto por km: 1.0\nCusto por quilo: 215.44600755\n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0, voluntario0.getLicMedicamentos());
      
      voluntario0.setLicMedicamentos(1);
      int int0 = voluntario0.getLicMedicamentos();
      assertEquals(1, int0);
  }
}
