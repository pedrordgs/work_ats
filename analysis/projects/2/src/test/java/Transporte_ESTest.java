/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 17:45:41 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transporte_ESTest extends Transporte_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      int int0 = empresa0.getVelmed();
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0, int0);
      assertEquals(0, empresa0.getLicMedicamentos());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      empresa0.setVelmed((-1883));
      int int0 = empresa0.getVelmed();
      assertEquals((-1883), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      Voluntario voluntario0 = new Voluntario("YN-qm-<;#,1&&,8ud{", (String) null, "YN-qm-<;#,1&&,8ud{", ponto2D0, 1.0, 0, 2888, false);
      double double0 = voluntario0.getRaio();
      assertEquals(1.0, double0, 0.01);
      assertEquals(2888, voluntario0.getLicMedicamentos());
      assertEquals(0, voluntario0.getVelmed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      empresa0.setRaio((-1816.3459673226794));
      double double0 = empresa0.getRaio();
      assertEquals((-1816.3459673226794), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      int int0 = empresa0.getLicMedicamentos();
      assertEquals(0, int0);
      assertEquals(0.0, empresa0.getRaio(), 0.01);
      assertEquals(0, empresa0.getVelmed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLicMedicamentos(1523);
      int int0 = voluntario0.getLicMedicamentos();
      assertEquals(1523, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelmed(298);
      voluntario0.clone();
      assertEquals(298, voluntario0.getVelmed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      empresa0.setRaio(1439.94);
      empresa0.clone();
      assertEquals(1439.94, empresa0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      empresa0.setLicMedicamentos(163);
      empresa0.clone();
      assertEquals(163, empresa0.getLicMedicamentos());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      Empresa empresa0 = new Empresa("", "", "", ponto2D0, (-1329.3), (-1), (-1), "", (-1329.3), 0.0);
      Transporte transporte0 = empresa0.clone();
      assertEquals((-1), transporte0.getVelmed());
      assertEquals((-1329.3), empresa0.getRaio(), 0.01);
      assertEquals((-1), empresa0.getLicMedicamentos());
      assertEquals((-1), transporte0.getLicMedicamentos());
      assertEquals((-1329.3), transporte0.getRaio(), 0.01);
      assertEquals((-1), empresa0.getVelmed());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("!", "!", "!", (Ponto2D) null, (-7535.87135475654), (-2608), (-2608), false);
      // Undeclared exception!
      try { 
        voluntario0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Perfil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("+mXI8\"G#~5<VFo|J", (String) null, "+mXI8\"G#~5<VFo|J", (Ponto2D) null, (-2876.6582549800223), 1122, 1122, false);
      int int0 = voluntario0.getVelmed();
      assertEquals(1122, voluntario0.getLicMedicamentos());
      assertEquals((-2876.6582549800223), voluntario0.getRaio(), 0.01);
      assertEquals(1122, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      Empresa empresa0 = new Empresa("", "", "", ponto2D0, (-1329.3), (-1), (-1), "", (-1329.3), 0.0);
      int int0 = empresa0.getLicMedicamentos();
      assertEquals((-1329.3), empresa0.getRaio(), 0.01);
      assertEquals((-1), int0);
      assertEquals((-1), empresa0.getVelmed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ponto2D ponto2D0 = mock(Ponto2D.class, new ViolatedAssumptionAnswer());
      doReturn("^o!@T`8Y").when(ponto2D0).toString();
      Voluntario voluntario0 = new Voluntario("Z", "Z", "^o!@T`8Y", ponto2D0, 18.020354391879966, 643, 643, false);
      String string0 = voluntario0.toString();
      assertEquals("Perfil: Z\nZ\n^o!@T`8Y\n^o!@T`8Y\nRaio de a\u00E7ao: 18.020354391879966\nVelocidade media: 643\nLicen\u00E7a de transporte de medicamentos: 643\n", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Empresa empresa0 = new Empresa();
      double double0 = empresa0.getRaio();
      assertEquals(0, empresa0.getLicMedicamentos());
      assertEquals(0, empresa0.getVelmed());
      assertEquals(0.0, double0, 0.01);
  }
}
