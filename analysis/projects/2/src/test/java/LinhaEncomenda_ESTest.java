/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:20:49 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("TV.?}vnX`XV[&?5HLa", "TV.?}vnX`XV[&?5HLa", (-1235.0), (-1235.0), (-674.1));
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      assertEquals((-1235.0), linhaEncomenda1.getValorUni(), 0.01);
      
      linhaEncomenda1.setValorUni((-674.1));
      boolean boolean0 = linhaEncomenda1.equals(linhaEncomenda0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", " Q{-~bU<XK.J>x_jaF!", (-1469.5551265482136), (-2046.67402), (-1.0));
      double double0 = linhaEncomenda0.precoLinha();
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
      assertEquals(" Q{-~bU<XK.J>x_jaF!", linhaEncomenda0.getDescricao());
      assertEquals(3007700.2984640407, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, "a+:3dHKs-ST", 562.408392018968, 562.408392018968, 562.408392018968);
      linhaEncomenda0.setQuantidade((-1978.9098730438939));
      double double0 = linhaEncomenda0.precoLinha();
      assertEquals((-1978.9098730438939), linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals((-1112955.5196490765), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 0.0, 0.0, 465.5);
      double double0 = linhaEncomenda0.getValorUni();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(465.5, linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 412.8886194554952, 412.8886194554952, 412.8886194554952);
      double double0 = linhaEncomenda0.getValorUni();
      assertEquals(412.8886194554952, double0, 0.01);
      assertEquals(412.8886194554952, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(412.8886194554952, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, "", 648.75338, 648.75338, 413.8527101406);
      linhaEncomenda0.getReferencia();
      assertEquals(413.8527101406, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(420880.94806142437, linhaEncomenda0.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", " Q{-~bU<XK.J>x_jaF!", (-1469.5551265482136), (-2046.67402), (-1.0));
      linhaEncomenda0.getReferencia();
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
      assertEquals(3007700.2984640407, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(" Q{-~bU<XK.J>x_jaF!", linhaEncomenda0.getDescricao());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, "", 648.75338, 648.75338, 413.8527101406);
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(413.8527101406, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(420880.94806142437, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(648.75338, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getPeso();
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-1.0), 0.0, 967.007053);
      double double0 = linhaEncomenda0.getPeso();
      assertEquals(-0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(967.007053, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      
      linhaEncomenda0.setDescricao((String) null);
      linhaEncomenda0.getDescricao();
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 412.8886194554952, 412.8886194554952, 412.8886194554952);
      linhaEncomenda0.getDescricao();
      assertEquals(170477.0120758647, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(412.8886194554952, linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("5/=Aw!GV$K/h>,>Jj", "5/=Aw!GV$K/h>,>Jj", 1.0, 1.0, (-277.489));
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      int int0 = linhaEncomenda0.compareTo(linhaEncomenda1);
      assertEquals((-277.489), linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda1.getDescricao());
      assertEquals(1.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals((-57), int0);
      assertEquals(0.0, linhaEncomenda1.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("wXctmp", "u(V{|]}m!|1hB5lR0", (-1.0), 255.5857447843, (-1.0));
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
      assertEquals("u(V{|]}m!|1hB5lR0", linhaEncomenda1.getDescricao());
      assertEquals((-255.5857447843), linhaEncomenda1.precoLinha(), 0.01);
      assertEquals((-1.0), linhaEncomenda1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", " Q{-~bU<XK.J>x_jaF!", (-1469.5551265482136), (-2046.67402), (-1.0));
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(3007700.2984640407, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals((-1.0), linhaEncomenda1.getPeso(), 0.01);
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
      assertEquals(" Q{-~bU<XK.J>x_jaF!", linhaEncomenda1.getDescricao());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda((String) null, (String) null, (-1.0), 0.0, 0.0);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      // Undeclared exception!
      try { 
        linhaEncomenda1.equals(linhaEncomenda0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("z|", (String) null, 1.0, 1.0, (-2084.6268));
      linhaEncomenda0.setReferencia((String) null);
      // Undeclared exception!
      try { 
        linhaEncomenda0.compareTo(linhaEncomenda0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", " Q{-~bU<XK.J>x_jaF!", (-1469.5551265482136), (-2046.67402), (-1.0));
      double double0 = linhaEncomenda0.getPeso();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(" Q{-~bU<XK.J>x_jaF!", linhaEncomenda0.getDescricao());
      assertEquals(3007700.2984640407, linhaEncomenda0.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", " Q{-~bU<XK.J>x_jaF!", (-1469.5551265482136), (-2046.67402), (-1.0));
      double double0 = linhaEncomenda0.getValorUni();
      assertEquals((-1.0), linhaEncomenda0.getPeso(), 0.01);
      assertEquals(" Q{-~bU<XK.J>x_jaF!", linhaEncomenda0.getDescricao());
      assertEquals(3007700.2984640407, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals((-1469.5551265482136), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.getDescricao();
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", string0);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda0.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("TV.?}vnX`XV[&?5HLa", "TV.?}vnX`XV[&?5HLa", (-1235.0), (-1235.0), (-674.1));
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(1525225.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals((-1235.0), double0, 0.01);
      assertEquals((-674.1), linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      String string0 = linhaEncomenda0.getReferencia();
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("n/a", string0);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      assertTrue(linhaEncomenda1.equals((Object)linhaEncomenda0));
      
      linhaEncomenda0.setReferencia("--Referencia: n/a--Descri\u00E7ao: --Quanidade : --Valor por unidade : 0.0--Quanidade : 0.0");
      int int0 = linhaEncomenda1.compareTo(linhaEncomenda0);
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      linhaEncomenda0.setValorUni(1716.3261126213247);
      boolean boolean0 = linhaEncomenda1.equals(linhaEncomenda0);
      assertEquals(1716.3261126213247, linhaEncomenda0.getValorUni(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      
      linhaEncomenda0.setDescricao("i9H");
      boolean boolean0 = linhaEncomenda1.equals(linhaEncomenda0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" ;R", (String) null, 2271.8670797764075, 2271.8670797764075, 2271.8670797764075);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertFalse(boolean0);
      assertEquals("n/a", linhaEncomenda1.getDescricao());
      assertEquals(2271.8670797764075, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getValorUni(), 0.01);
      assertEquals(5161380.028171781, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals("n/a", linhaEncomenda1.getReferencia());
      assertEquals(0.0, linhaEncomenda1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda1);
      assertTrue(boolean0);
      assertEquals("n/a", linhaEncomenda1.getDescricao());
      assertEquals(0.0, linhaEncomenda1.getValorUni(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda1.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda1.getReferencia());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals((Object) null);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      boolean boolean0 = linhaEncomenda0.equals(linhaEncomenda0);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertTrue(boolean0);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" ;R", (String) null, 2271.8670797764075, 2271.8670797764075, 2271.8670797764075);
      boolean boolean0 = linhaEncomenda0.equals("--Referencia:  ;R--Descri\u00E7ao: 7L$xi_o--Valor por unidade : 2271.8670797764075--Quanidade : 2271.8670797764075");
      assertFalse(boolean0);
      assertEquals(2271.8670797764075, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(5161380.028171781, linhaEncomenda0.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("z|", (String) null, 1.0, 1.0, (-2084.6268));
      linhaEncomenda0.compareTo(linhaEncomenda0);
      assertEquals(1.0, linhaEncomenda0.precoLinha(), 0.01);
      assertEquals((-2084.6268), linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.precoLinha();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getReferencia());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getPeso(), 0.01);
      assertEquals("n/a", linhaEncomenda0.getDescricao());
      assertEquals(0.0, linhaEncomenda0.getValorUni(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" ;R", (String) null, 2271.8670797764075, 2271.8670797764075, 2271.8670797764075);
      String string0 = linhaEncomenda0.toString();
      assertEquals("--Referencia:  ;R--Descri\u00E7ao: null--Valor por unidade : 2271.8670797764075--Quanidade : 2271.8670797764075", string0);
      assertEquals(2271.8670797764075, linhaEncomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" ;R", (String) null, 2271.8670797764075, 2271.8670797764075, 2271.8670797764075);
      linhaEncomenda0.setPeso(2271.8670797764075);
      assertEquals(2271.8670797764075, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(5161380.028171781, linhaEncomenda0.precoLinha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" ;R", (String) null, 2271.8670797764075, 2271.8670797764075, 2271.8670797764075);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(2271.8670797764075, linhaEncomenda0.getPeso(), 0.01);
      assertEquals(5161380.028171781, linhaEncomenda1.precoLinha(), 0.01);
      assertEquals(2271.8670797764075, linhaEncomenda1.getPeso(), 0.01);
  }
}
