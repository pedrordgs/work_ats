/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:40:27 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.OffsetTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAmount;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockOffsetTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntario_ESTest extends Voluntario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNome();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      voluntario0.existe("");
      Encomenda encomenda2 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda2.getProdutos();
      encomenda1.setProdutos(map0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, (-1));
      encomenda0.setCodigo_user("");
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      encomenda1.setCodigo("");
      encomenda1.setPreparada(false);
      encomenda1.setData(localDateTime0);
      voluntario0.setLatitude(0L);
      voluntario0.updateEncomendaLoja(encomenda1);
      voluntario0.existe("");
      voluntario0.setTypeUser("");
      voluntario0.setClassificacao((-1654.5991801));
      voluntario0.setDisponibilidade(true);
      voluntario0.getNaoEntregue();
      LocalDate localDate0 = MockLocalDate.now();
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.getPreparadas();
      voluntario0.setAvaliacoes(2071);
      voluntario0.getVelocidade();
      voluntario0.setLatitude(2071);
      voluntario0.getMinutosDeEspera();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.updateEncomendaPreparada(encomenda2);
      try { 
        voluntario0.getEncomenda("Entre as datas 31/12/1969 e 31/12/1969 foram realizadas 1 encomendas pelo volunt\u00E1rio \nEfetuou encomendas em 1 lojas");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "z}";
      String string1 = "C\u00F3digo: ";
      boolean boolean0 = false;
      double double0 = 3013.3713919983143;
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      List<Encomenda> list0 = voluntario1.getHistorico();
      Voluntario voluntario2 = new Voluntario("z}", "z}", "C\u00F3digo: ", "z}", false, 3013.3713919983143, 3013.3713919983143, (LocalDate) null, 3013.3713919983143, list0, 3013.3713919983143, (-3422), false, (-3422), (-3422));
      voluntario2.getAvaliacoes();
      String string2 = "UtilizadorSistema";
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getProdutos();
      // Undeclared exception!
      try { 
        MockLocalDateTime.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Map<String, LinhaEncomenda> map0 = encomenda1.getProdutos();
      encomenda1.setProdutos(map0);
      encomenda1.clone();
      encomenda1.setCodigo("FCA[o");
      voluntario0.existe("@@0fQ$kXsK)");
      encomenda0.setData(localDateTime0);
      encomenda1.setCodigo("-?I1}PNqX");
      encomenda1.setPeso(1224.77340668821);
      encomenda1.equals(encomenda0);
      encomenda1.setComprador("@@0fQ$kXsK)");
      voluntario0.addEncomenda(encomenda1);
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.getClassificacao();
      voluntario0.porLevantar();
      voluntario0.setAvaliacoes(0);
      voluntario0.setLongitude(0.0);
      encomenda0.toString();
      voluntario0.setCodigo("");
      voluntario0.setVelocidade(0);
      voluntario0.getPreparadas();
      voluntario0.getNaoEntregue();
      // Undeclared exception!
      try { 
        voluntario0.removeEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Period period0 = Period.ofWeeks(1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("7Bbj(:6%i9Ci1*q6{r%", (String) null, "&S&1#(u", "ynFWXIP)5F", true, 0.0, (-1714.792547289298), localDate0, 1, list0, (-1714.792547289298), 1, true, 1, 1);
      Encomenda encomenda0 = new Encomenda();
      voluntario1.updateEncomendaPreparada(encomenda0);
      Double double0 = new Double(1.0);
      voluntario1.updateRate(double0);
      voluntario1.getDisponibilidade();
      Encomenda encomenda1 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda1);
      voluntario0.getPreparadas();
      voluntario0.calculaAtrasos();
      voluntario0.getNaoEntregue();
      voluntario1.porLevantar();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.porLevantar();
      voluntario0.setRaio_acao((-1203.508688));
      voluntario0.existe("t$Pd(5a!4`<yy}f_W");
      voluntario0.equals(voluntario0);
      voluntario0.calculaAtrasos();
      voluntario0.setVelocidade(60);
      voluntario0.getPreparadas();
      voluntario0.getMinutosDeEspera();
      voluntario0.getDisponibilidade();
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.getRaio_acao();
      voluntario0.setCodigo("0");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNome();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      voluntario0.existe("");
      Encomenda encomenda2 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda2.getProdutos();
      encomenda1.setProdutos(map0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, (-1));
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      encomenda1.setCodigo("");
      encomenda1.setPreparada(false);
      voluntario0.setLatitude(0L);
      voluntario0.updateEncomendaLoja(encomenda1);
      voluntario0.setTypeUser("");
      voluntario0.setClassificacao((-1654.5991801));
      voluntario0.setDisponibilidade(true);
      voluntario0.getNaoEntregue();
      LocalDate localDate0 = MockLocalDate.now();
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.getPreparadas();
      voluntario0.setAvaliacoes(2071);
      voluntario0.getVelocidade();
      voluntario0.setLatitude(2071);
      voluntario0.getMinutosDeEspera();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNome();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      voluntario0.existe("");
      Encomenda encomenda2 = new Encomenda();
      encomenda2.setPeso(589.3);
      Map<String, LinhaEncomenda> map0 = encomenda2.getProdutos();
      encomenda1.setProdutos(map0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, (-1));
      encomenda0.clone();
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      encomenda1.setCodigo("");
      encomenda1.setPreparada(false);
      encomenda1.setData(localDateTime0);
      voluntario0.setLatitude(0L);
      voluntario0.updateEncomendaLoja(encomenda1);
      voluntario0.setTypeUser("");
      voluntario0.setClassificacao((-1654.5991801));
      voluntario0.setDisponibilidade(true);
      voluntario0.getNaoEntregue();
      LocalDate localDate0 = MockLocalDate.now();
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.getPreparadas();
      voluntario0.setAvaliacoes(2071);
      voluntario0.getVelocidade();
      voluntario0.setLatitude(2071);
      voluntario0.getMinutosDeEspera();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.clone();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.porLevantar();
      voluntario0.setRaio_acao((-1203.508688));
      Voluntario voluntario1 = new Voluntario();
      voluntario0.existe("t$Pd(5a!4`<yy}f_W");
      voluntario1.equals(voluntario0);
      voluntario1.calculaAtrasos();
      voluntario1.setVelocidade(60);
      voluntario0.getPreparadas();
      voluntario0.porEntregar();
      voluntario1.getMinutosDeEspera();
      voluntario0.getDisponibilidade();
      voluntario1.aceitoTransporteMedicamentos();
      voluntario0.getRaio_acao();
      voluntario0.setCodigo("0");
      voluntario0.setNome("F3Dpdht \"~wA'q&m+f");
      voluntario1.removeEncomenda("J+#");
      voluntario0.getMinutosDeEspera();
      voluntario0.getNaoEntregue();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNome();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      voluntario0.existe("");
      Encomenda encomenda2 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda2.getProdutos();
      encomenda1.setProdutos(map0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, (-1));
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      encomenda1.setCodigo("");
      encomenda1.setPreparada(false);
      encomenda1.setData(localDateTime0);
      voluntario0.setLatitude(0L);
      voluntario0.updateEncomendaLoja(encomenda1);
      voluntario0.setTypeUser("");
      voluntario0.setClassificacao((-1654.5991801));
      voluntario0.setDisponibilidade(true);
      voluntario0.getNaoEntregue();
      LocalDate localDate0 = MockLocalDate.now();
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.getPreparadas();
      voluntario0.setAvaliacoes(2071);
      voluntario0.getVelocidade();
      voluntario0.setLatitude(2071);
      voluntario0.getMinutosDeEspera();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.getHistorico();
      voluntario0.porEntregar();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNome();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      voluntario0.existe("");
      Encomenda encomenda2 = new Encomenda();
      ZoneOffset.ofHoursMinutes(0, (-1));
      encomenda1.setCodigo("");
      encomenda1.setPreparada(false);
      voluntario0.setLatitude(0L);
      voluntario0.updateEncomendaLoja(encomenda1);
      voluntario0.setTypeUser("");
      voluntario0.setClassificacao((-1654.5991801));
      voluntario0.setDisponibilidade(true);
      voluntario0.getNaoEntregue();
      LocalDate localDate0 = MockLocalDate.now();
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.getPreparadas();
      voluntario0.setAvaliacoes(2071);
      voluntario0.getVelocidade();
      voluntario0.setLatitude(2071);
      voluntario0.getMinutosDeEspera();
      voluntario0.porEntregar();
      voluntario0.calculaAtrasos();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.calculaAtrasos();
      voluntario0.existe((String) null);
      voluntario0.setAvaliacoes(0);
      voluntario0.setTypeUser("0");
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        voluntario0.getInfoEncomendas(localDateTime0, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.toString();
      encomenda0.setLevantada(false);
      encomenda0.setVendedor("J:9.,A-6");
      voluntario0.getNaoEntregue();
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.setEncomendaMedica(false);
      voluntario0.setNome(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000003");
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.getAvaliacoes();
      voluntario0.removeEncomenda("Q");
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getAvaliacoes();
      voluntario0.getAvaliacoes();
      Encomenda encomenda1 = new Encomenda();
      voluntario0.equals(encomenda1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.calculaAtrasos();
      voluntario0.existe((String) null);
      voluntario0.setAvaliacoes(0);
      voluntario0.setTypeUser("0");
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      encomenda0.setCodigo_user((String) null);
      encomenda0.getProdutos();
      encomenda1.setComprador((String) null);
      voluntario0.updateEncomendaPreparada(encomenda1);
      voluntario0.getMinutosDeEspera();
      voluntario0.existe((String) null);
      voluntario0.updateEncomendaLoja(encomenda1);
      Encomenda encomenda2 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda2);
      voluntario0.getPreparadas();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.porEntregar();
      voluntario0.porLevantar();
      voluntario1.setClassificacao(2855.0);
      voluntario1.setDisponibilidade(true);
      voluntario0.getHistorico();
      voluntario1.calculaAtrasos();
      voluntario1.getHistorico();
      voluntario1.porEntregar();
      voluntario1.setClassificacao(2855.0);
      voluntario1.aceitaMedicamentos(true);
      voluntario0.equals(voluntario1);
      voluntario0.getPreparadas();
      voluntario1.getHistorico();
      voluntario0.setDisponibilidade(false);
      voluntario0.getRaio_acao();
      try { 
        voluntario0.getEncomenda("pZ#T^8IP[_+!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.porLevantar();
      voluntario0.setRaio_acao((-1203.508688));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setDisponibilidade(true);
      voluntario0.existe("t$Pd(5a!4`<yy}f_W");
      voluntario1.equals(voluntario0);
      voluntario1.calculaAtrasos();
      voluntario1.setVelocidade(60);
      voluntario0.getPreparadas();
      voluntario1.getMinutosDeEspera();
      voluntario0.getDisponibilidade();
      voluntario1.aceitoTransporteMedicamentos();
      voluntario0.getRaio_acao();
      voluntario0.setCodigo("0");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.calculaAtrasos();
      voluntario0.existe((String) null);
      voluntario0.setAvaliacoes(0);
      voluntario0.setTypeUser("0");
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      encomenda0.getProdutos();
      encomenda1.toString();
      encomenda1.setComprador((String) null);
      voluntario0.updateEncomendaPreparada(encomenda1);
      voluntario0.getMinutosDeEspera();
      voluntario0.existe((String) null);
      voluntario0.updateEncomendaLoja(encomenda1);
      Encomenda encomenda2 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda2);
      voluntario0.getPreparadas();
      voluntario0.getMinutosDeEspera();
      voluntario0.removeEncomenda("0");
      voluntario0.existe((String) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Map<String, LinhaEncomenda> map0 = encomenda1.getProdutos();
      encomenda1.setProdutos(map0);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda1.setCodigo("FCA[o");
      voluntario0.existe("@@0DfQ$kXsK)");
      encomenda0.setData(localDateTime0);
      encomenda1.setCodigo("-?I1}PNqX");
      encomenda1.equals(encomenda0);
      encomenda1.setComprador("@@0DfQ$kXsK)");
      voluntario0.addEncomenda(encomenda1);
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.getClassificacao();
      voluntario0.porLevantar();
      voluntario0.setAvaliacoes(0);
      voluntario0.setLongitude(0.0);
      voluntario0.setCodigo("");
      voluntario0.setVelocidade(0);
      voluntario0.getNaoEntregue();
      Encomenda encomenda3 = new Encomenda(encomenda2);
      voluntario0.porLevantar();
      voluntario0.updateEncomenda(encomenda1);
      voluntario0.porEntregar();
      voluntario0.setRaio_acao(0);
      voluntario0.getLongitude();
      Encomenda encomenda4 = new Encomenda();
      voluntario0.updateEncomenda(encomenda4);
      voluntario0.getAvaliacoes();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "DFQ";
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1924L));
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("DFQ", "DFQ", "DFQ", "DFQ", true, 1.0, 1.0, localDate0, 1.0, linkedList0, 1.0, 1, true, 75, 75);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.getAvaliacoes();
      voluntario0.removeEncomenda("");
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Object object0 = new Object();
      voluntario0.equals(object0);
      voluntario0.setRaio_acao(1254.388);
      voluntario0.calculaAtrasos();
      voluntario0.calculaAtrasos();
      voluntario0.existe("0");
      voluntario0.aceitaMedicamentos(false);
      voluntario0.porEntregar();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo_user("0");
      encomenda0.setEntregue(false);
      voluntario0.updateEncomendaPreparada(encomenda0);
      encomenda0.clone();
      voluntario0.getNaoEntregue();
      voluntario0.updateEncomenda(encomenda0);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      // Undeclared exception!
      try { 
        MockOffsetTime.ofInstant((Instant) null, zoneOffset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // instant
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.porLevantar();
      voluntario0.setLongitude((-2655.125412));
      voluntario0.getNome();
      voluntario0.setAvaliacoes(0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      Voluntario voluntario1 = voluntario0.clone();
      voluntario1.setInicio_Transporte(localDate0);
      voluntario0.setAvaliacoes(0);
      voluntario1.equals(voluntario0);
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario2.removeEncomenda("");
      List<Encomenda> list0 = voluntario2.getHistorico();
      voluntario1.setHistorico(list0);
      voluntario1.setDisponibilidade(false);
      voluntario1.getClassificacao();
      voluntario1.getMinutosDeEspera();
      voluntario0.setClassificacao(0.0);
      voluntario2.getLatitude();
      voluntario1.porEntregar();
      Double double0 = new Double(4576.627088046447);
      voluntario2.updateRate(double0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.porLevantar();
      voluntario0.setLongitude((-2655.125412));
      voluntario0.getNome();
      voluntario0.setAvaliacoes(0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      Voluntario voluntario1 = voluntario0.clone();
      voluntario1.setInicio_Transporte(localDate0);
      voluntario0.setAvaliacoes(0);
      voluntario1.equals(voluntario0);
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario2.removeEncomenda("");
      List<Encomenda> list0 = voluntario2.getHistorico();
      voluntario1.setHistorico(list0);
      voluntario1.setDisponibilidade(false);
      voluntario1.getClassificacao();
      voluntario1.getMinutosDeEspera();
      voluntario0.setClassificacao(0.0);
      voluntario2.getLatitude();
      voluntario1.porEntregar();
      Double double0 = new Double(0.0);
      voluntario2.updateRate(double0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1;
      Period period0 = Period.ofWeeks(1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      List<Encomenda> list0 = voluntario1.getHistorico();
      Voluntario voluntario2 = new Voluntario("7Bbj(:6%i9Ci1*q6{r%", (String) null, "&S&1#(u", "ynFWXIP)5F", true, 0.0, (-1714.792547289298), localDate0, 1, list0, (-1714.792547289298), 1, true, 1, 1);
      Encomenda encomenda0 = new Encomenda();
      voluntario2.updateEncomendaPreparada(encomenda0);
      Double double0 = new Double(1.0);
      voluntario2.updateRate(double0);
      voluntario2.getDisponibilidade();
      Encomenda encomenda1 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda1);
      voluntario0.getPreparadas();
      voluntario0.calculaAtrasos();
      try { 
        voluntario2.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getMinutosDeEspera();
      Double double0 = Double.valueOf((double) 0);
      Double.sum(450.61, 0.0);
      Double.isFinite(450.61);
      Double.min(450.61, 0);
      voluntario0.updateRate(double0);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setLevantada(false);
      encomenda0.setVendedor(" ");
      encomenda0.setCodigo_user("i{?wu9l:RbPN8<KM");
      encomenda0.getProdutos();
      voluntario0.updateEncomenda(encomenda0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      encomenda0.setData(localDateTime0);
      voluntario0.calculaAtrasos();
      voluntario0.porEntregar();
      voluntario0.existe(">8");
      voluntario0.porEntregar();
      voluntario0.equals(encomenda0);
      voluntario0.porEntregar();
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.calculaAtrasos();
      voluntario0.toString();
      voluntario0.getMinutosDeEspera();
      voluntario0.calculaAtrasos();
      voluntario0.calculaAtrasos();
      voluntario0.porEntregar();
      Random.setNextRandom(0);
      voluntario0.getHistorico();
      voluntario0.getCodigo();
      voluntario0.calculaAtrasos();
      voluntario0.getCodigo();
      voluntario0.clone();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario((String) null, (String) null, (String) null, (String) null, false, 0.0, 0.0, localDate0, (-1948.992516484), list0, (-1948.992516484), (-425), false, (-1982571266), 1);
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario2.getNaoEntregue();
      voluntario2.getNaoEntregue();
      Encomenda encomenda0 = new Encomenda();
      voluntario1.updateEncomendaPreparada(encomenda0);
      Object object0 = new Object();
      encomenda0.setCodigo("0");
      voluntario0.equals(object0);
      voluntario2.getNome();
      voluntario0.getNome();
      voluntario0.getNaoEntregue();
      voluntario1.updateEncomendaLoja(encomenda0);
      voluntario2.getHistorico();
      encomenda0.setCodigo_loja((String) null);
      System.setCurrentTimeMillis(0L);
      Random.setNextRandom(1);
      voluntario2.updateEncomenda(encomenda0);
      Random.setNextRandom(0);
      // Undeclared exception!
      try { 
        MockLocalDateTime.ofEpochSecond(0L, (-894), zoneOffset0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for NanoOfSecond (valid values 0 - 999999999): -894
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("", " e ", "", " e ", false, 0.0, 0.0, localDate0, 0.0, list0, 824.694109, (-1), false, (-1), (-1));
      voluntario1.calculaAtrasos();
      voluntario1.clone();
      voluntario0.porEntregar();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setEmail("Entre as datas ");
      voluntario0.setCodigo("Entre as datas ");
      voluntario0.setVelocidade(2574);
      voluntario0.calculaAtrasos();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      linkedList0.add(encomenda1);
      voluntario0.setMinutosDeEspera(0);
      voluntario0.setHistorico(linkedList0);
      voluntario0.toString();
      voluntario0.addEncomenda(encomenda1);
      voluntario0.getLatitude();
      voluntario0.getHistorico();
      voluntario0.setLongitude(0.0);
      voluntario0.setAvaliacoes(1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      Voluntario voluntario0 = new Voluntario("02}]^|O>", "JI/08@$", "fdSE0q6", "(#", false, 5587.8759222, 1.0, localDate0, 1.0, linkedList0, (-4020), (-1982571266), false, (-4020), (-4020));
      voluntario0.calculaAtrasos();
      voluntario0.getCodigo();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Period period0 = Period.ofDays(4080);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      linkedList0.add(encomenda0);
      Voluntario voluntario0 = new Voluntario("7)_;D|advC5^{", "R-KA>65Hk", (String) null, "", false, 4080, (-1308), localDate0, (-426.891), linkedList0, 0, (-1308), true, 0, 4212);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.porLevantar();
      Voluntario voluntario2 = new Voluntario("Saco de lixo 30l", "=#}Y(/o", (String) null, "H! w[TjOVG77a;_oBh/", false, (-426.891), (-549.5861070490847), localDate0, 1.0, linkedList0, (-426.891), (-1308), false, (-1), 0);
      // Undeclared exception!
      try { 
        voluntario2.getEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Random.setNextRandom((-1043));
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario((String) null, (String) null, "", "", false, (-1043), (-1203.508688), localDate0, (-1203.508688), linkedList0, (-1298.5), 0, false, 828, 0);
      linkedList0.removeLastOccurrence("");
      voluntario0.setClassificacao((-1203.508688));
      voluntario0.porEntregar();
      voluntario0.toString();
      voluntario0.calculaAtrasos();
      voluntario0.getMinutosDeEspera();
      voluntario0.getLongitude();
      voluntario0.equals(" <--- O utilizador \u00E9: \nVoluntario\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: -1043.0\nLongitude: -1203.508688\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: -1203.508688\nRegistos de encomendas: java.util.ArrayList@0000000002");
      voluntario0.removeEncomenda("EncomendaNotFoundException");
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-52L));
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("Longitude: ", "Longitude: ", "Longitude: ", "Longitude: ", true, 0.0, (-5375.741100103804), localDate0, (-3466.7255111425), linkedList0, (-52L), (-808), true, (-808), (-808));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.getHistorico();
      voluntario1.aceitoTransporteMedicamentos();
      // Undeclared exception!
      try { 
        MockLocalDateTime.parse((CharSequence) "Longitude: ");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'Longitude: ' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setEmail("Hora de registo: ");
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomenda(encomenda0);
      voluntario0.setRaio_acao(3698.9);
      Voluntario voluntario1 = voluntario0.clone();
      voluntario0.setLongitude(0);
      voluntario0.setMinutosDeEspera(0);
      voluntario0.setRaio_acao((-622.8114150840327));
      voluntario0.porEntregar();
      voluntario0.getNaoEntregue();
      voluntario0.getCodigo();
      voluntario0.getPreparadas();
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.setHistorico(list0);
      voluntario0.porEntregar();
      voluntario0.getAvaliacoes();
      voluntario0.existe("7)_;D|advC5^{");
      voluntario0.equals("Hora de registo: ");
      voluntario0.getPreparadas();
      voluntario1.getRaio_acao();
      voluntario1.setMinutosDeEspera(0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLatitude(233.452384);
      voluntario0.getLatitude();
      voluntario0.setLatitude(233.452384);
      voluntario0.removeEncomenda("");
      try { 
        voluntario0.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      List<Encomenda> list0 = voluntario1.getHistorico();
      Voluntario voluntario2 = new Voluntario("`2fV", "", "0", "0", true, (-2516.115455131), 1.0, (LocalDate) null, 1829.115706, list0, (-2516.115455131), 75, true, 75, (-3357));
      voluntario2.clone();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      voluntario0.toString();
      voluntario0.setLongitude((-4591.0));
      voluntario0.setHistorico(linkedList0);
      // Undeclared exception!
      try { 
        voluntario0.getInfoEncomendas((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "Encomenda";
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("Encomenda", (String) null, (String) null, (String) null, true, (-988.92414516), (-988.92414516), (LocalDate) null, (-988.92414516), list0, (-988.92414516), 0, false, 0, 75);
      voluntario1.clone();
      try { 
        voluntario0.getEncomenda("Encomenda");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("U&,l0K", "", "U&,l0K", "", true, (-1716.788166236), (-1071.2501701009928), (LocalDate) null, (-1071.2501701009928), linkedList0, (-1071.2501701009928), (-641), true, 1, 60);
      voluntario0.getNaoEntregue();
      voluntario0.setHistorico(linkedList0);
      voluntario0.removeEncomenda("");
      linkedList0.add((Encomenda) null);
      voluntario0.setCodigo("");
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setNome("U&,l0K");
      voluntario0.setLongitude((-1071.2501701009928));
      voluntario0.setInicio_Transporte((LocalDate) null);
      voluntario0.getPreparadas();
      voluntario1.getVelocidade();
      voluntario0.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Period period0 = Period.ofDays(60);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("7`[9B7SP#Ej0c", "Hora de registo: ", "7`[9B7SP#Ej0c", "Hora de registo: ", false, (-2830.45838048719), (-936.041), localDate0, (-2550.8), list0, (-1.0), 156, false, 1, 156);
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario2.getLatitude();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setNome("k;w?<^Nl");
      String string0 = "";
      voluntario0.setEmail("");
      voluntario0.setAvaliacoes(0);
      voluntario0.setRaio_acao(0.0);
      voluntario0.getNome();
      String string1 = "M]3LK@5>tM|";
      String string2 = "*>{wt:yhV";
      double double0 = 0.0;
      String string3 = ",WM";
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      boolean boolean0 = true;
      hashMap0.clear();
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(0, 0, 4652, 4652, (-1870), (-672), (-1870));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 0
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "Saco de lixo 30l";
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("!{Hac%Q:6kC", "Registos de encomendas: ", "Registos de encomendas: ", "Saco de lixo 30l", false, 2421.648732415805, 2421.648732415805, localDate0, 2421.648732415805, linkedList0, 2421.648732415805, 30, false, 0, 0);
      voluntario0.setDisponibilidade(true);
      voluntario0.setInicio_Transporte(localDate0);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.removeEncomenda("Saco de lixo 30l");
      // Undeclared exception!
      try { 
        voluntario0.updateEncomendaLoja((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Period period0 = Period.of(689, 689, 689);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("qXf:G)!-|", "qXf:G)!-|", (String) null, (String) null, true, 1.0, 420.169171450091, localDate0, 420.169171450091, list0, 420.169171450091, (-883), false, (-883), 689);
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario2.getVelocidade();
      voluntario1.getDisponibilidade();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.removeEncomenda("=M{M?");
      voluntario0.setNome("'d.");
      // Undeclared exception!
      try { 
        voluntario1.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      Voluntario voluntario2 = new Voluntario(voluntario0);
      voluntario2.removeEncomenda("");
      // Undeclared exception!
      try { 
        voluntario1.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario((String) null, "Pre\u00E7o: ", "VH`.Rd00zQ7B:L6;", "", true, 1.0, 1.0, localDate0, (-1.0), linkedList0, 1.0, 2597, true, 2597, 2762);
      voluntario0.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setDisponibilidade(true);
      voluntario0.getLatitude();
      voluntario0.setClassificacao(0.0);
      voluntario0.clone();
      voluntario0.aceitaMedicamentos(true);
      voluntario0.getDisponibilidade();
      voluntario0.getInicio_transporte();
      // Undeclared exception!
      try { 
        voluntario0.updateEncomendaPreparada((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.porLevantar();
      voluntario0.setRaio_acao((-1203.508688));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.existe("t$Pd(5a!4`<yy}f_W");
      voluntario1.equals(voluntario0);
      voluntario1.calculaAtrasos();
      voluntario1.setVelocidade(60);
      voluntario0.getPreparadas();
      voluntario1.getMinutosDeEspera();
      voluntario0.getDisponibilidade();
      voluntario1.aceitoTransporteMedicamentos();
      voluntario0.getRaio_acao();
      voluntario0.setCodigo("0");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "TKCv>FzNz9?+.Hz+,$";
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      List<Encomenda> list0 = voluntario1.getHistorico();
      voluntario0.setDisponibilidade(true);
      int int0 = (-2928);
      boolean boolean0 = true;
      Voluntario voluntario2 = new Voluntario("TKCv>FzNz9?+.Hz+,$", "TKCv>FzNz9?+.Hz+,$", "TKCv>FzNz9?+.Hz+,$", "TKCv>FzNz9?+.Hz+,$", true, 15.444341842806, 15.444341842806, localDate0, 15.444341842806, list0, 15.444341842806, (-2928), true, (-2928), (-2928));
      // Undeclared exception!
      try { 
        voluntario2.updateRate((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Period period0 = Period.ofWeeks(1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      List<Encomenda> list0 = voluntario1.getHistorico();
      Voluntario voluntario2 = new Voluntario("7Bbj(:6%i9Ci1*q6{r%", (String) null, "&S&1#(u", "ynFWXIP)5F", true, 0.0, (-1714.792547289298), localDate0, 1, list0, (-1714.792547289298), 1, true, 1, 1);
      Encomenda encomenda0 = new Encomenda();
      voluntario2.updateEncomendaPreparada(encomenda0);
      Double double0 = new Double(1.0);
      voluntario2.updateRate(double0);
      voluntario2.getDisponibilidade();
      Encomenda encomenda1 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda1);
      voluntario0.getPreparadas();
      voluntario0.calculaAtrasos();
      voluntario1.removeEncomenda((String) null);
      voluntario2.equals((Object) null);
      voluntario0.porEntregar();
      Random.setNextRandom(1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.setLatitude(0.0);
      Voluntario voluntario1 = new Voluntario("", "", "", "h8At~  0", false, (-1725.5), (-1725.5), localDate0, (-1.0), list0, 0.0, (-1), false, (-1), 1);
      voluntario1.setMinutosDeEspera((-1));
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario2.calculaAtrasos();
      voluntario0.porLevantar();
      voluntario1.getMinutosDeEspera();
      // Undeclared exception!
      try { 
        voluntario1.updateRate((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.getNaoEntregue();
      voluntario1.setRaio_acao(0.0);
      Double double0 = new Double((-688.0));
      voluntario0.updateRate(double0);
      voluntario1.setNome((String) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.getNaoEntregue();
      voluntario1.setAvaliacoes(0);
      voluntario1.setCodigo((String) null);
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario1.setHistorico(list0);
      voluntario1.equals((Object) null);
      int int0 = 251;
      voluntario1.setVelocidade(251);
      voluntario1.getNaoEntregue();
      voluntario0.setVelocidade(251);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      voluntario0.setHistorico(linkedList0);
      voluntario0.getDisponibilidade();
      int int1 = (-2101);
      int int2 = 170;
      int int3 = 0;
      int int4 = (-1);
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario2 = new Voluntario("", "y5,xk~B;#%li7=~IueS", "y5,xk~B;#%li7=~IueS", "Saco de lixo de 50l", false, (-2101), 0.0, localDate0, 479.8824, linkedList0, (-726.12936205), 251, true, 0, 0);
      try { 
        voluntario2.getEncomenda("y5,xk~B;#%li7=~IueS");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.calculaAtrasos();
      voluntario0.toString();
      voluntario0.setAvaliacoes((-330));
      voluntario0.setVelocidade((-330));
      voluntario0.setTypeUser("f");
      voluntario0.getInicio_transporte();
      voluntario0.setMinutosDeEspera(350);
      voluntario0.setClassificacao(350);
      voluntario0.setPassword(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
      voluntario0.setNome((String) null);
      voluntario0.getPreparadas();
      voluntario0.setClassificacao(1774.259);
      voluntario0.setLongitude(1774.259);
      voluntario0.getNaoEntregue();
      voluntario0.getLongitude();
      voluntario0.calculaAtrasos();
      voluntario0.getLongitude();
      try { 
        voluntario0.getEncomenda(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000002");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getLatitude();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getCodigo();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.getHistorico();
      voluntario0.getAvaliacoes();
      voluntario0.calculaAtrasos();
      voluntario1.getPreparadas();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = voluntario0.clone();
      Voluntario voluntario2 = voluntario0.clone();
      voluntario1.aceitaMedicamentos(true);
      voluntario0.clone();
      voluntario1.setTypeUser("");
      voluntario0.getHistorico();
      voluntario2.getMinutosDeEspera();
      voluntario1.existe("Encomenda: ");
      Object object0 = new Object();
      voluntario0.equals(object0);
      voluntario0.getRaio_acao();
      voluntario0.getLongitude();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getDisponibilidade();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("Latitude: ", "LinhaEncomenda", "Latitude: ", "vYV!", false, 0.0, 0.0, localDate0, 1873.2611440698124, linkedList0, 0.0, (-4020), false, 2016, (-1926));
      voluntario0.setNome("Rc!1N^<P");
      voluntario0.porLevantar();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario0.getRaio_acao();
      Encomenda encomenda0 = new Encomenda();
      voluntario1.addEncomenda(encomenda0);
      voluntario0.getVelocidade();
      voluntario2.getLongitude();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "pt`";
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario("Glo@Ekt'Q36", "pt`", "pt`", "Glo@Ekt'Q36", true, 0.0, 0.0, localDate0, 0.0, (List<Encomenda>) null, 0.0, (-1182), false, (-1182), (-1182));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.calculaAtrasos();
      voluntario0.setPassword(":b]nkMs.");
      voluntario0.calculaAtrasos();
      voluntario0.existe("Latitude: ");
      voluntario0.removeEncomenda("Latitude: ");
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      linkedList0.add((Encomenda) null);
      // Undeclared exception!
      try { 
        voluntario0.setHistorico(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLongitude(736.392489732);
      voluntario0.setDisponibilidade(true);
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.setHistorico(list0);
      voluntario0.getDisponibilidade();
      voluntario0.setLongitude(736.392489732);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UtilizadorSistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      boolean boolean0 = false;
      voluntario1.porEntregar();
      voluntario0.porLevantar();
      voluntario1.setClassificacao(2855.0);
      voluntario1.setDisponibilidade(false);
      voluntario0.getHistorico();
      voluntario1.calculaAtrasos();
      voluntario1.getHistorico();
      double double0 = (-1829.867);
      String string0 = "";
      try { 
        voluntario0.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setNome("");
      Encomenda encomenda0 = new Encomenda();
      voluntario1.updateEncomendaLoja(encomenda0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLatitude(2000.654);
      voluntario0.setAvaliacoes(506);
      voluntario0.aceitaMedicamentos(false);
      voluntario0.porEntregar();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setEmail("i1_W9");
      Double double0 = new Double(0.0);
      Double.sum(0.0, 1534.144397443);
      Double.min(0.0, 0.0);
      voluntario0.updateRate(double0);
      voluntario0.aceitaMedicamentos(false);
      voluntario0.setLatitude((-981.3067505757916));
      voluntario0.clone();
      voluntario1.setLongitude(0.0);
      voluntario0.setLatitude(1335.170642871907);
      voluntario0.setLongitude((-1444.8555));
      voluntario0.getVelocidade();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setLongitude(0.0);
      voluntario0.setRaio_acao(0.0);
      voluntario1.setLongitude(0.0);
      voluntario1.aceitoTransporteMedicamentos();
      voluntario0.setCodigo("A");
      voluntario1.setDisponibilidade(false);
      voluntario1.getLongitude();
      voluntario1.porLevantar();
      try { 
        voluntario0.getEncomenda((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setMinutosDeEspera(0);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.getHistorico();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("Nome: ", "Nome: ", "Nome: ", "<N3J8[", true, (-1618.678020575907), (-2092.86755), localDate0, (-1618.678020575907), list0, (-973.8212623295), 5214, false, 0, 0);
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario1.removeEncomenda("za");
      // Undeclared exception!
      try { 
        voluntario2.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      Object object0 = new Object();
      voluntario1.equals(object0);
      voluntario1.toString();
      voluntario1.calculaAtrasos();
      voluntario0.removeEncomenda("F$)O3cwCM|2B5Go");
      voluntario1.setInicio_Transporte((LocalDate) null);
      voluntario1.setClassificacao(0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("E;\"6mQrM=bUQnIs", "h'%;AQl9rqSi}Y=' \"", "h'%;AQl9rqSi}Y=' \"", "h'%;AQl9rqSi}Y=' \"", false, 0.0, 0.0, (LocalDate) null, (-1510.03344667138), linkedList0, 0.0, (-1), true, 1088, 94);
      voluntario0.getInicio_transporte();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setMinutosDeEspera(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.getHistorico();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.calculaAtrasos();
      voluntario0.existe((String) null);
      voluntario0.setAvaliacoes(0);
      voluntario0.setTypeUser("0");
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      encomenda0.setCodigo_user((String) null);
      encomenda0.getProdutos();
      encomenda1.setComprador((String) null);
      voluntario0.updateEncomendaPreparada(encomenda1);
      voluntario0.getMinutosDeEspera();
      voluntario0.existe((String) null);
      voluntario0.updateEncomendaLoja(encomenda1);
      voluntario0.updateEncomendaPreparada(encomenda1);
      voluntario0.getPreparadas();
      Encomenda encomenda2 = new Encomenda(encomenda1);
      voluntario0.updateEncomenda(encomenda2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNome();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      voluntario0.existe("");
      Encomenda encomenda2 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda2.getProdutos();
      encomenda1.setProdutos(map0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, (-1));
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0L, 0, zoneOffset0);
      encomenda1.setCodigo("");
      encomenda1.setPreparada(false);
      encomenda1.setData(localDateTime0);
      voluntario0.setLatitude(0L);
      voluntario0.updateEncomendaLoja(encomenda1);
      voluntario0.setTypeUser("");
      voluntario0.setClassificacao((-1654.5991801));
      voluntario0.setDisponibilidade(true);
      voluntario0.getNaoEntregue();
      LocalDate localDate0 = MockLocalDate.now();
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.getPreparadas();
      voluntario0.setAvaliacoes(2071);
      voluntario0.getVelocidade();
      voluntario0.setLatitude(2071);
      voluntario0.getMinutosDeEspera();
      voluntario0.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.updateEncomendaPreparada(encomenda2);
      try { 
        voluntario0.getEncomenda("Entre as datas 31/12/1969 e 31/12/1969 foram realizadas 1 encomendas pelo volunt\u00E1rio \nEfetuou encomendas em 1 lojas");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNaoEntregue();
      voluntario0.setEmail("0");
      String string0 = "ZV]R&5^so-,kE,~Y";
      voluntario0.setPassword("ZV]R&5^so-,kE,~Y");
      voluntario0.toString();
      voluntario0.getNaoEntregue();
      try { 
        voluntario0.getEncomenda("0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.porLevantar();
      voluntario0.setLongitude((-2655.125412));
      voluntario0.setAvaliacoes(0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1L);
      voluntario0.setInicio_Transporte(localDate0);
      Voluntario voluntario1 = voluntario0.clone();
      voluntario1.setInicio_Transporte(localDate0);
      voluntario0.setAvaliacoes(0);
      voluntario1.equals(voluntario0);
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario2.removeEncomenda("");
      List<Encomenda> list0 = voluntario2.getHistorico();
      voluntario1.setHistorico(list0);
      voluntario2.setVelocidade(0);
      voluntario1.setDisponibilidade(true);
      voluntario1.getClassificacao();
      voluntario1.getMinutosDeEspera();
      voluntario0.setClassificacao(0.0);
      voluntario2.getLatitude();
      voluntario1.porEntregar();
      Double double0 = new Double(4576.627088046447);
      voluntario2.updateRate(double0);
      voluntario2.getNaoEntregue();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.porLevantar();
      voluntario0.setRaio_acao((-1203.508688));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.setAvaliacoes(0);
      voluntario0.existe("t$Pd(5a!4`<yy}f_W");
      voluntario1.equals(voluntario0);
      voluntario1.calculaAtrasos();
      voluntario1.setVelocidade(60);
      voluntario0.getPreparadas();
      voluntario1.getMinutosDeEspera();
      voluntario0.getDisponibilidade();
      voluntario1.aceitoTransporteMedicamentos();
      voluntario0.getRaio_acao();
      voluntario0.setCodigo("0");
      voluntario0.setNome("F3Dpdht \"~wA'q&m+f");
      voluntario1.removeEncomenda("JPJ`XF");
      voluntario0.getMinutosDeEspera();
      // Undeclared exception!
      try { 
        voluntario0.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Map<String, LinhaEncomenda> map0 = encomenda1.getProdutos();
      encomenda1.setProdutos(map0);
      encomenda1.clone();
      encomenda1.setCodigo("FCA[o");
      voluntario0.existe("@@0fQ$kXsK)");
      encomenda0.setData(localDateTime0);
      encomenda1.setCodigo("-?I1}PNqX");
      encomenda1.equals(encomenda0);
      encomenda1.setComprador("@@0fQ$kXsK)");
      voluntario0.addEncomenda(encomenda1);
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.getClassificacao();
      voluntario0.porLevantar();
      voluntario0.setAvaliacoes(0);
      voluntario0.setLongitude(0.0);
      voluntario0.setCodigo("");
      voluntario0.setVelocidade(0);
      voluntario0.getNaoEntregue();
      // Undeclared exception!
      try { 
        voluntario0.removeEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Period period0 = Period.ofWeeks(1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      List<Encomenda> list0 = voluntario1.getHistorico();
      Voluntario voluntario2 = new Voluntario("7Bbj(:6%i9Ci1*q6{r%", (String) null, "&S&1#(u", "ynFWXIP)5F", true, 0.0, (-1714.792547289298), localDate0, 1, list0, (-1714.792547289298), 1, true, 1, 1);
      Encomenda encomenda0 = new Encomenda();
      voluntario2.updateEncomendaPreparada(encomenda0);
      voluntario2.removeEncomenda("ynFWXIP)5F");
      Double double0 = new Double(1.0);
      voluntario2.updateRate(double0);
      voluntario2.getDisponibilidade();
      Encomenda encomenda1 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda1);
      voluntario0.getPreparadas();
      voluntario0.calculaAtrasos();
      voluntario1.updateEncomendaPreparada(encomenda0);
      assertTrue(encomenda0.isPreparada());
      
      voluntario0.getHistorico();
      assertFalse(voluntario0.getDisponibilidade());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      boolean boolean0 = true;
      voluntario1.porEntregar();
      voluntario0.porLevantar();
      voluntario1.setClassificacao(2855.0);
      voluntario1.setDisponibilidade(true);
      voluntario0.getHistorico();
      voluntario1.calculaAtrasos();
      voluntario1.getHistorico();
      String string0 = "";
      try { 
        voluntario0.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }
}
