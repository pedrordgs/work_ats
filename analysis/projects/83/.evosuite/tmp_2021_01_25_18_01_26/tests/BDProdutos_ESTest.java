/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 18:07:13 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BDProdutos_ESTest extends BDProdutos_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Set<String> set0 = bDProdutos0.getCodigos();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      bDProdutos0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = bDProdutos0.toString();
      assertNotNull(string0);
      assertEquals("Total de Produtos: \n{}", string0);
      
      bDProdutos0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      
      BDProdutos bDProdutos1 = new BDProdutos();
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      boolean boolean0 = bDProdutos1.equals("Total de Produtos: \n{}");
      assertFalse(boolean0);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos1, bDProdutos0);
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn("Total de Produtos: \n{}").when(linhaEncomenda0).getDescricao();
      bDProdutos0.add(linhaEncomenda0);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      boolean boolean1 = bDProdutos0.existe("Total de Produtos: \n{}");
      assertTrue(boolean1);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      boolean boolean2 = bDProdutos0.existeProd("Total de Produtos: \n{}");
      assertTrue(boolean2);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      String string1 = bDProdutos1.listProdutosNormais();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(bDProdutos1, bDProdutos0);
      
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      doReturn("Total de Produtos: \n{}").when(linhaEncomenda1).getDescricao();
      bDProdutos0.add(linhaEncomenda1);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      String string2 = bDProdutos0.listProdutosNormais();
      assertNotNull(string2);
      assertEquals("LISTA DE PRODUTOS\n--> Total de Produtos: \n{}\n", string2);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      try { 
        bDProdutos0.existeProd("LISTA DE PRODUTOS\n--> Total de Produtos: \n{}\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Set<String> set0 = bDProdutos1.getCodigos();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      bDProdutos0.setCodigos(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn("Alcool").when(linhaEncomenda1).getDescricao();
      bDProdutos1.add(linhaEncomenda1);
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      String string0 = bDProdutos1.listProdutosMedicos();
      assertNotNull(string0);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n--> Alcool\n", string0);
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Set<String> set1 = bDProdutos0.getCodigos();
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(set1.contains("Alcool"));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(set1, set0);
      
      Set<String> set2 = bDProdutos0.getCodigos();
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertFalse(set2.contains("Alcool"));
      assertTrue(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      BDProdutos bDProdutos2 = bDProdutos0.clone();
      assertNotNull(bDProdutos2);
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos2, bDProdutos0);
      assertNotSame(bDProdutos2, bDProdutos1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Set<String> set0 = bDProdutos1.getCodigos();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      bDProdutos0.setCodigos(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn("Saco de lixo 30l").when(linhaEncomenda1).getDescricao();
      bDProdutos1.add(linhaEncomenda1);
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      String string0 = bDProdutos1.listProdutosMedicos();
      assertNotNull(string0);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n--> Saco de lixo 30l\n", string0);
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Set<String> set1 = bDProdutos0.getCodigos();
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(set1.contains(string0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(set1, set0);
      
      Set<String> set2 = bDProdutos0.getCodigos();
      assertNotNull(set2);
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertFalse(set2.contains(string0));
      assertTrue(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      BDProdutos bDProdutos2 = bDProdutos0.clone();
      assertNotNull(bDProdutos2);
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Set<String> set0 = bDProdutos0.getCodigos();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      bDProdutos0.setCodigos(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string0 = bDProdutos0.toString();
      assertNotNull(string0);
      assertEquals("Total de Produtos: \n{}", string0);
      
      bDProdutos0.setCodigos(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      BDProdutos bDProdutos1 = new BDProdutos();
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      boolean boolean0 = bDProdutos1.equals("Total de Produtos: \n{}");
      assertFalse(boolean0);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos1, bDProdutos0);
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn("Total de Produtos: \n{}").when(linhaEncomenda0).getDescricao();
      bDProdutos0.add(linhaEncomenda0);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      boolean boolean1 = bDProdutos0.equals("Total de Produtos: \n{}");
      assertFalse(boolean1);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      boolean boolean2 = bDProdutos0.existeProd("Total de Produtos: \n{}");
      assertTrue(boolean2);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      String string1 = bDProdutos1.listProdutosNormais();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(bDProdutos1, bDProdutos0);
      
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      doReturn((String) null).when(linhaEncomenda1).getDescricao();
      // Undeclared exception!
      try { 
        bDProdutos0.add(linhaEncomenda1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      String string0 = bDProdutos0.listProdutosMedicos();
      assertNotNull(string0);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string0);
      
      String string1 = bDProdutos0.listProdutosNormais();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = bDProdutos0.existe("?J38rGC@+qo2!");
      assertFalse(boolean0);
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      bDProdutos0.setProdutos(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Set<String> set0 = bDProdutos0.getCodigos();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("?J38rGC@+qo2!"));
      
      String string2 = bDProdutos0.listProdutosMedicos();
      assertNotNull(string2);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0, (LinhaEncomenda) null).when(linhaEncomenda1).clone();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda1).when(linhaEncomenda2).clone();
      doReturn("Desinfetante").when(linhaEncomenda2).getDescricao();
      bDProdutos0.add(linhaEncomenda2);
      bDProdutos0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string2));
      
      Map<String, LinhaEncomenda> map1 = bDProdutos0.getProdutos();
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertFalse(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      
      String string3 = bDProdutos0.listProdutosMedicos();
      assertNotNull(string3);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n--> Desinfetante\n", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda3).clone();
      doReturn((String) null).when(linhaEncomenda3).getDescricao();
      // Undeclared exception!
      try { 
        bDProdutos0.add(linhaEncomenda3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      Map<String, LinhaEncomenda> map1 = bDProdutos1.getProdMedicos(map0);
      assertNotNull(map1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      bDProdutos1.setProdutos(map1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(map0.equals((Object)map1));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Map<String, LinhaEncomenda> map2 = bDProdutos0.getProdutos();
      assertNotNull(map2);
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(map2, map0);
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda1).when(linhaEncomenda2).clone();
      doReturn("Z\"m!b%ggSz").when(linhaEncomenda2).getDescricao();
      bDProdutos0.add(linhaEncomenda2);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda3).clone();
      doReturn((String) null).when(linhaEncomenda3).getDescricao();
      Map<String, LinhaEncomenda> map3 = bDProdutos0.getProdutos();
      assertNotNull(map3);
      assertFalse(map3.isEmpty());
      assertEquals(1, map3.size());
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(map3.equals((Object)map1));
      assertFalse(map3.equals((Object)map2));
      assertFalse(map3.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(map3, map2);
      assertNotSame(map3, map0);
      
      // Undeclared exception!
      try { 
        bDProdutos0.add(linhaEncomenda3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Set<String> set0 = bDProdutos0.getCodigos();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Map<String, LinhaEncomenda> map1 = bDProdutos0.getProdutos();
      assertNotNull(map1);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.equals((Object)map0));
      assertNotSame(map1, map0);
      
      Map<String, LinhaEncomenda> map2 = bDProdutos0.getProdMedicos(map1);
      assertNotNull(map2);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertTrue(map1.equals((Object)map0));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertNotSame(map1, map0);
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn("@5G\"pK(").when(linhaEncomenda1).getDescricao();
      bDProdutos0.add(linhaEncomenda1);
      Set<String> set1 = bDProdutos0.getCodigos();
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(set1.contains("@5G\"pK("));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      
      String string0 = bDProdutos0.listProdutosNormais();
      assertNotNull(string0);
      assertEquals("LISTA DE PRODUTOS\n--> @5G\"pK(\n", string0);
      
      boolean boolean0 = bDProdutos0.existe("LISTA DE PRODUTOS\n--> @5G\"pK(\n");
      assertFalse(boolean0);
      
      bDProdutos0.setProdutos(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(map0.equals((Object)map2));
      assertTrue(map0.equals((Object)map1));
      assertNotSame(map0, map1);
      
      boolean boolean1 = bDProdutos0.equals("LISTA DE PRODUTOS\n--> @5G\"pK(\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = bDProdutos0.listProdutosNormais();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS\n", string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = bDProdutos0.existe("LISTA DE PRODUTOS\n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      BDProdutos bDProdutos1 = new BDProdutos();
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      Set<String> set2 = bDProdutos0.getCodigos();
      assertNotNull(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      assertFalse(set2.contains(string0));
      assertTrue(set2.equals((Object)set1));
      assertTrue(set2.equals((Object)set0));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      bDProdutos1.setCodigos(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      assertFalse(set2.contains(string0));
      assertTrue(set2.equals((Object)set1));
      assertTrue(set2.equals((Object)set0));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      String string2 = bDProdutos1.listProdutosMedicos();
      assertNotNull(string2);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos1, bDProdutos0);
      
      String string3 = bDProdutos1.listProdutosMedicos();
      assertNotNull(string3);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos1, bDProdutos0);
      
      boolean boolean3 = bDProdutos0.equals(bDProdutos1);
      assertTrue(boolean3);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      boolean boolean4 = bDProdutos0.existe("LISTA DE PRODUTOS\n");
      assertFalse(boolean4);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      String string4 = bDProdutos1.toString();
      assertNotNull(string4);
      assertEquals("Total de Produtos: \n{}", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos1, bDProdutos0);
      
      boolean boolean5 = bDProdutos1.equals(map1);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertFalse(boolean5);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(map1.equals((Object)map2));
      assertTrue(map1.equals((Object)map0));
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(map1, map0);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Set<String> set3 = bDProdutos0.getCodigos();
      assertNotNull(set3);
      assertEquals(0, set3.size());
      assertTrue(set3.isEmpty());
      assertFalse(set3.contains(string0));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(set3.equals((Object)set2));
      assertTrue(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(set3, set0);
      assertNotSame(set3, set2);
      assertNotSame(set3, set1);
      
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda2).clone();
      doReturn((String) null).when(linhaEncomenda2).getDescricao();
      // Undeclared exception!
      try { 
        bDProdutos1.add(linhaEncomenda2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      Map<String, LinhaEncomenda> map0 = bDProdutos1.getProdutos();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Set<String> set0 = bDProdutos0.getCodigos();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      BDProdutos bDProdutos2 = new BDProdutos(map0, set0);
      assertNotNull(bDProdutos2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      
      Set<String> set1 = bDProdutos0.getCodigos();
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(set1, set0);
      
      Set<String> set2 = bDProdutos0.getCodigos();
      assertNotNull(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      Map<String, LinhaEncomenda> map1 = bDProdutos2.getProdMedicos(map0);
      assertNotNull(map1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(set0.equals((Object)set2));
      assertTrue(set0.equals((Object)set1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(set0, set2);
      assertNotSame(set0, set1);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
      
      boolean boolean0 = bDProdutos0.equals(bDProdutos0);
      assertTrue(boolean0);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos2);
      
      String string0 = bDProdutos0.listProdutosNormais();
      assertNotNull(string0);
      assertEquals("LISTA DE PRODUTOS\n", string0);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos2);
      
      BDProdutos bDProdutos3 = bDProdutos1.clone();
      assertNotNull(bDProdutos3);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos3.equals((Object)bDProdutos1));
      assertTrue(bDProdutos3.equals((Object)bDProdutos0));
      assertTrue(bDProdutos3.equals((Object)bDProdutos2));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos3);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos3);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos3, bDProdutos1);
      assertNotSame(bDProdutos3, bDProdutos2);
      assertNotSame(bDProdutos3, bDProdutos0);
      
      Set<String> set3 = bDProdutos2.getCodigos();
      assertNotNull(set3);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set3.isEmpty());
      assertEquals(0, set3.size());
      assertFalse(set0.contains(string0));
      assertFalse(set3.contains(string0));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos3));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos3));
      assertTrue(map0.equals((Object)map1));
      assertTrue(set0.equals((Object)set2));
      assertTrue(set0.equals((Object)set1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos3));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertTrue(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set2));
      assertTrue(set3.equals((Object)set0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos3);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos3);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(set0, set3);
      assertNotSame(set0, set2);
      assertNotSame(set0, set1);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
      assertNotSame(bDProdutos2, bDProdutos3);
      assertNotSame(set3, set0);
      assertNotSame(set3, set1);
      assertNotSame(set3, set2);
      
      String string1 = bDProdutos1.listProdutosNormais();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS\n", string1);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos3));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos3));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos3);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos3);
      assertNotSame(bDProdutos1, bDProdutos2);
      
      Set<String> set4 = bDProdutos2.getCodigos();
      assertNotNull(set4);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, set4.size());
      assertTrue(set4.isEmpty());
      assertFalse(set0.contains(string1));
      assertFalse(set4.contains(string1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos3));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos3));
      assertTrue(map0.equals((Object)map1));
      assertTrue(set0.equals((Object)set3));
      assertTrue(set0.equals((Object)set2));
      assertTrue(set0.equals((Object)set1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos3));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertTrue(set4.equals((Object)set3));
      assertTrue(set4.equals((Object)set1));
      assertTrue(set4.equals((Object)set0));
      assertTrue(set4.equals((Object)set2));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos3);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos3);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(set0, set4);
      assertNotSame(set0, set3);
      assertNotSame(set0, set2);
      assertNotSame(set0, set1);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
      assertNotSame(bDProdutos2, bDProdutos3);
      assertNotSame(set4, set2);
      assertNotSame(set4, set0);
      assertNotSame(set4, set3);
      assertNotSame(set4, set1);
      
      Set<String> set5 = bDProdutos2.getCodigos();
      assertNotNull(set5);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, set5.size());
      assertTrue(set5.isEmpty());
      assertFalse(set0.contains(string1));
      assertFalse(set5.contains(string1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos3));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos3));
      assertTrue(map0.equals((Object)map1));
      assertTrue(set0.equals((Object)set3));
      assertTrue(set0.equals((Object)set4));
      assertTrue(set0.equals((Object)set2));
      assertTrue(set0.equals((Object)set1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos3));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertTrue(set5.equals((Object)set0));
      assertTrue(set5.equals((Object)set2));
      assertTrue(set5.equals((Object)set3));
      assertTrue(set5.equals((Object)set4));
      assertTrue(set5.equals((Object)set1));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos3);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos3);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(set0, set4);
      assertNotSame(set0, set3);
      assertNotSame(set0, set2);
      assertNotSame(set0, set1);
      assertNotSame(set0, set5);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
      assertNotSame(bDProdutos2, bDProdutos3);
      assertNotSame(set5, set4);
      assertNotSame(set5, set3);
      assertNotSame(set5, set1);
      assertNotSame(set5, set0);
      assertNotSame(set5, set2);
      
      bDProdutos3.setCodigos(set5);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, set5.size());
      assertTrue(set5.isEmpty());
      assertFalse(set0.contains(string1));
      assertFalse(set5.contains(string1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos3));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos3));
      assertTrue(map0.equals((Object)map1));
      assertTrue(set0.equals((Object)set3));
      assertTrue(set0.equals((Object)set5));
      assertTrue(set0.equals((Object)set4));
      assertTrue(set0.equals((Object)set2));
      assertTrue(set0.equals((Object)set1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos3));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertTrue(bDProdutos3.equals((Object)bDProdutos1));
      assertTrue(bDProdutos3.equals((Object)bDProdutos0));
      assertTrue(bDProdutos3.equals((Object)bDProdutos2));
      assertTrue(set5.equals((Object)set0));
      assertTrue(set5.equals((Object)set2));
      assertTrue(set5.equals((Object)set3));
      assertTrue(set5.equals((Object)set4));
      assertTrue(set5.equals((Object)set1));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos3);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos3);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(set0, set4);
      assertNotSame(set0, set3);
      assertNotSame(set0, set2);
      assertNotSame(set0, set1);
      assertNotSame(set0, set5);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
      assertNotSame(bDProdutos2, bDProdutos3);
      assertNotSame(bDProdutos3, bDProdutos1);
      assertNotSame(bDProdutos3, bDProdutos2);
      assertNotSame(bDProdutos3, bDProdutos0);
      assertNotSame(set5, set4);
      assertNotSame(set5, set3);
      assertNotSame(set5, set1);
      assertNotSame(set5, set0);
      assertNotSame(set5, set2);
      
      BDProdutos bDProdutos4 = bDProdutos0.clone();
      assertNotNull(bDProdutos4);
      assertTrue(bDProdutos4.equals((Object)bDProdutos3));
      assertTrue(bDProdutos4.equals((Object)bDProdutos2));
      assertTrue(bDProdutos4.equals((Object)bDProdutos0));
      assertTrue(bDProdutos4.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos3));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertNotSame(bDProdutos4, bDProdutos3);
      assertNotSame(bDProdutos4, bDProdutos1);
      assertNotSame(bDProdutos4, bDProdutos2);
      assertNotSame(bDProdutos4, bDProdutos0);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos3);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      bDProdutos1.setProdutos(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      String string0 = bDProdutos1.listProdutosMedicos();
      assertNotNull(string0);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string0);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      String string1 = bDProdutos0.listProdutosMedicos();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string1);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      Map<String, LinhaEncomenda> map1 = bDProdutos1.getProdMedicos(map0);
      assertNotNull(map1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Map<String, LinhaEncomenda> map2 = bDProdutos0.getProdMedicos(map0);
      assertNotNull(map2);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(map0.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(map2, map1);
      
      String string2 = bDProdutos1.toString();
      assertNotNull(string2);
      assertEquals("Total de Produtos: \n{}", string2);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn("LISTA DE PRODUTOS M\u00C9DICOS\n").when(linhaEncomenda0).getDescricao();
      Map<String, LinhaEncomenda> map3 = bDProdutos1.getProdMedicos(map2);
      assertNotNull(map3);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertEquals(0, map3.size());
      assertTrue(map3.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(map0.equals((Object)map2));
      assertTrue(map0.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertTrue(map3.equals((Object)map2));
      assertTrue(map3.equals((Object)map1));
      assertTrue(map3.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(map2, map3);
      assertNotSame(map2, map1);
      assertNotSame(map3, map1);
      assertNotSame(map3, map2);
      
      Set<String> set0 = bDProdutos0.getCodigos();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      bDProdutos0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      bDProdutos1.add(linhaEncomenda0);
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Map<String, LinhaEncomenda> map4 = bDProdutos0.getProdutos();
      assertNotNull(map4);
      assertEquals(0, map4.size());
      assertTrue(map4.isEmpty());
      assertTrue(map4.equals((Object)map1));
      assertTrue(map4.equals((Object)map3));
      assertTrue(map4.equals((Object)map2));
      assertTrue(map4.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(map4, map0);
      
      // Undeclared exception!
      try { 
        bDProdutos1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn("i2").when(linhaEncomenda1).getDescricao();
      bDProdutos1.add(linhaEncomenda1);
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      // Undeclared exception!
      try { 
        bDProdutos1.getProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      BDProdutos bDProdutos1 = new BDProdutos();
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      boolean boolean0 = bDProdutos0.equals(bDProdutos1);
      assertTrue(boolean0);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      String string0 = bDProdutos1.toString();
      assertNotNull(string0);
      assertEquals("Total de Produtos: \n{}", string0);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos1, bDProdutos0);
      
      boolean boolean1 = bDProdutos0.equals("");
      assertFalse(boolean1);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      String string1 = bDProdutos1.listProdutosNormais();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS\n", string1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(bDProdutos1, bDProdutos0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      String string0 = bDProdutos1.listProdutosMedicos();
      assertNotNull(string0);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string0);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      String string1 = bDProdutos0.listProdutosMedicos();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string1);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      String string2 = bDProdutos0.toString();
      assertNotNull(string2);
      assertEquals("Total de Produtos: \n{}", string2);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(bDProdutos0, bDProdutos1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Set<String> set0 = null;
      BDProdutos bDProdutos1 = null;
      try {
        bDProdutos1 = new BDProdutos(map0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      Map<String, LinhaEncomenda> map0 = bDProdutos1.getProdutos();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Set<String> set0 = bDProdutos1.getCodigos();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      BDProdutos bDProdutos2 = new BDProdutos(map0, set0);
      assertNotNull(bDProdutos2);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      
      String string0 = bDProdutos2.listProdutosNormais();
      assertNotNull(string0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      assertEquals("LISTA DE PRODUTOS\n", string0);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos2, bDProdutos0);
      assertNotSame(bDProdutos2, bDProdutos1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Map<String, LinhaEncomenda> map0 = null;
      // Undeclared exception!
      try { 
        bDProdutos0.getProdMedicos((Map<String, LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Map<String, LinhaEncomenda> map0 = null;
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      // Undeclared exception!
      try { 
        bDProdutos0.setCodigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      String string0 = bDProdutos0.listProdutosMedicos();
      assertNotNull(string0);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string0);
      
      Map<String, LinhaEncomenda> map0 = null;
      // Undeclared exception!
      try { 
        bDProdutos0.setProdutos((Map<String, LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BDProdutos bDProdutos0 = null;
      try {
        bDProdutos0 = new BDProdutos((BDProdutos) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String string0 = "X%";
      try { 
        bDProdutos0.existeProd("X%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Set<String> set0 = bDProdutos0.getCodigos();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      BDProdutos bDProdutos1 = new BDProdutos(map0, set0);
      assertNotNull(bDProdutos1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      BDProdutos bDProdutos2 = new BDProdutos(bDProdutos1);
      assertNotNull(bDProdutos2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      Set<String> set0 = bDProdutos1.getCodigos();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      BDProdutos bDProdutos2 = bDProdutos1.clone();
      assertNotNull(bDProdutos2);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
      
      String string0 = bDProdutos0.listProdutosNormais();
      assertNotNull(string0);
      assertEquals("LISTA DE PRODUTOS\n", string0);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      Set<String> set1 = bDProdutos2.getCodigos();
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(set1.contains(string0));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
      assertNotSame(set1, set0);
      
      boolean boolean0 = bDProdutos0.equals(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(boolean0);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      boolean boolean1 = bDProdutos0.existe("LISTA DE PRODUTOS\n");
      assertFalse(boolean1);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      String string1 = bDProdutos1.listProdutosMedicos();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string1);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos2);
      
      Set<String> set2 = bDProdutos0.getCodigos();
      assertNotNull(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      assertFalse(set2.contains("LISTA DE PRODUTOS\n"));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(set2.equals((Object)set1));
      assertTrue(set2.equals((Object)set0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      
      String string2 = bDProdutos0.listProdutosMedicos();
      assertNotNull(string2);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string2);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      Set<String> set3 = bDProdutos2.getCodigos();
      assertNotNull(set3);
      assertEquals(0, set3.size());
      assertTrue(set3.isEmpty());
      assertFalse(set3.contains("LISTA DE PRODUTOS\n"));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(set3.equals((Object)set0));
      assertTrue(set3.equals((Object)set2));
      assertTrue(set3.equals((Object)set1));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
      assertNotSame(set3, set2);
      assertNotSame(set3, set1);
      assertNotSame(set3, set0);
      
      Map<String, LinhaEncomenda> map1 = bDProdutos1.getProdutos();
      assertNotNull(map1);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(map1, map0);
      
      Set<String> set4 = bDProdutos0.getCodigos();
      assertNotNull(set4);
      assertEquals(0, set4.size());
      assertTrue(set4.isEmpty());
      assertFalse(set4.contains("LISTA DE PRODUTOS\n"));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(set4.equals((Object)set1));
      assertTrue(set4.equals((Object)set0));
      assertTrue(set4.equals((Object)set2));
      assertTrue(set4.equals((Object)set3));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(set4, set1);
      assertNotSame(set4, set3);
      assertNotSame(set4, set2);
      assertNotSame(set4, set0);
      
      // Undeclared exception!
      try { 
        bDProdutos1.add((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Set<String> set0 = bDProdutos0.getCodigos();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      bDProdutos0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = bDProdutos0.toString();
      assertNotNull(string0);
      assertEquals("Total de Produtos: \n{}", string0);
      
      bDProdutos0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      
      BDProdutos bDProdutos1 = new BDProdutos();
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      boolean boolean0 = bDProdutos1.equals("Total de Produtos: \n{}");
      assertFalse(boolean0);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos1, bDProdutos0);
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda0).clone();
      doReturn("Total de Produtos: \n{}").when(linhaEncomenda0).getDescricao();
      bDProdutos0.add(linhaEncomenda0);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      Set<String> set1 = bDProdutos1.getCodigos();
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(set1.contains("Total de Produtos: \n{}"));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(set1, set0);
      
      boolean boolean1 = bDProdutos0.equals("Total de Produtos: \n{}");
      assertFalse(boolean1);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      boolean boolean2 = bDProdutos0.existeProd("Total de Produtos: \n{}");
      assertTrue(boolean2);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      String string1 = bDProdutos1.listProdutosNormais();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(bDProdutos1, bDProdutos0);
      
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda1).clone();
      doReturn("").when(linhaEncomenda1).getDescricao();
      bDProdutos0.add(linhaEncomenda1);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      String string2 = bDProdutos0.listProdutosNormais();
      assertNotNull(string2);
      assertEquals("LISTA DE PRODUTOS\n--> \n--> Total de Produtos: \n{}\n", string2);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      try { 
        bDProdutos0.existeProd("LISTA DE PRODUTOS\n--> \n--> Total de Produtos: \n{}\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      BDProdutos bDProdutos1 = new BDProdutos(bDProdutos0);
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      String string0 = bDProdutos1.toString();
      assertNotNull(string0);
      assertEquals("Total de Produtos: \n{}", string0);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn("Total de Produtos: \n{}").when(linhaEncomenda1).getDescricao();
      BDProdutos bDProdutos2 = new BDProdutos();
      assertNotNull(bDProdutos2);
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      
      Set<String> set0 = bDProdutos2.getCodigos();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
      
      bDProdutos1.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertTrue(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
      
      String string1 = bDProdutos1.listProdutosNormais();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS\n", string1);
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos2));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      bDProdutos1.add(linhaEncomenda1);
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertFalse(bDProdutos1.equals((Object)bDProdutos2));
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Map<String, LinhaEncomenda> map1 = bDProdutos1.getProdMedicos(map0);
      assertNotNull(map1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertFalse(bDProdutos1.equals((Object)bDProdutos2));
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      String string2 = bDProdutos1.listProdutosMedicos();
      assertNotNull(string2);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string2);
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertFalse(bDProdutos1.equals((Object)bDProdutos2));
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Set<String> set1 = bDProdutos0.getCodigos();
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(set1.contains(string0));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(set1, set0);
      
      String string3 = bDProdutos0.listProdutosMedicos();
      assertNotNull(string3);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string3);
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      String string4 = bDProdutos0.listProdutosMedicos();
      assertNotNull(string4);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string4);
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      
      boolean boolean0 = bDProdutos1.equals("LISTA DE PRODUTOS M\u00C9DICOS\n");
      assertFalse(boolean0);
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertFalse(bDProdutos1.equals((Object)bDProdutos2));
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      bDProdutos2.setProdutos(map1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertFalse(bDProdutos1.equals((Object)bDProdutos2));
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertTrue(map0.equals((Object)map1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos0);
      
      bDProdutos0.setCodigos(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(set1.contains(string4));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(set1, set0);
      
      BDProdutos bDProdutos3 = bDProdutos0.clone();
      assertNotNull(bDProdutos3);
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertTrue(bDProdutos3.equals((Object)bDProdutos2));
      assertTrue(bDProdutos3.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos3);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos3, bDProdutos1);
      assertNotSame(bDProdutos3, bDProdutos0);
      assertNotSame(bDProdutos3, bDProdutos2);
      
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda2).clone();
      doReturn((String) null).when(linhaEncomenda2).getDescricao();
      // Undeclared exception!
      try { 
        bDProdutos1.add(linhaEncomenda2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Map<String, LinhaEncomenda> map1 = bDProdutos0.getProdMedicos(map0);
      assertNotNull(map1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.equals((Object)map0));
      
      Set<String> set0 = bDProdutos0.getCodigos();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      BDProdutos bDProdutos1 = new BDProdutos(map1, set0);
      assertNotNull(bDProdutos1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(map0.equals((Object)map1));
      assertTrue(map1.equals((Object)map0));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      
      bDProdutos0.setProdutos(map1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(map0.equals((Object)map1));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      bDProdutos0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos0, bDProdutos1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Set<String> set0 = bDProdutos0.getCodigos();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      bDProdutos0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = bDProdutos0.listProdutosMedicos();
      assertNotNull(string0);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string0);
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Map<String, LinhaEncomenda> map1 = bDProdutos0.getProdMedicos(map0);
      assertNotNull(map1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map1.equals((Object)map0));
      
      bDProdutos0.setProdutos(map1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map0.equals((Object)map1));
      assertTrue(map1.equals((Object)map0));
      
      boolean boolean0 = bDProdutos0.existe("LISTA DE PRODUTOS M\u00C9DICOS\n");
      assertFalse(boolean0);
      
      Map<String, LinhaEncomenda> map2 = bDProdutos0.getProdMedicos(map1);
      assertNotNull(map2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map2.isEmpty());
      assertEquals(0, map2.size());
      assertTrue(map0.equals((Object)map1));
      assertTrue(map1.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertNotSame(map1, map2);
      assertNotSame(map2, map1);
      
      bDProdutos0.setProdutos(map1);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map0.equals((Object)map2));
      assertTrue(map0.equals((Object)map1));
      assertTrue(map1.equals((Object)map0));
      assertTrue(map1.equals((Object)map2));
      assertNotSame(map1, map2);
      
      try { 
        bDProdutos0.existeProd("LISTA DE PRODUTOS M\u00C9DICOS\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      assertNotNull(bDProdutos0);
      
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, LinhaEncomenda> map1 = bDProdutos0.getProdMedicos(map0);
      assertNotNull(map1);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.equals((Object)map0));
      
      Map<String, LinhaEncomenda> map2 = bDProdutos0.getProdMedicos(map1);
      assertNotNull(map2);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      assertTrue(map0.equals((Object)map1));
      assertTrue(map1.equals((Object)map0));
      assertTrue(map2.equals((Object)map1));
      assertTrue(map2.equals((Object)map0));
      assertNotSame(map1, map2);
      assertNotSame(map2, map1);
      
      BDProdutos bDProdutos1 = bDProdutos0.clone();
      assertNotNull(bDProdutos1);
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Set<String> set0 = bDProdutos1.getCodigos();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      bDProdutos0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn("' PB:|2,y4u~2(").when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      Map<String, LinhaEncomenda> map3 = bDProdutos0.getProdutos();
      assertNotNull(map3);
      assertEquals(0, map3.size());
      assertTrue(map3.isEmpty());
      assertTrue(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(map3.equals((Object)map1));
      assertTrue(map3.equals((Object)map2));
      assertTrue(map3.equals((Object)map0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(map3, map0);
      
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda1).when(linhaEncomenda2).clone();
      doReturn("Saco de lixo 30l").when(linhaEncomenda2).getDescricao();
      bDProdutos1.add(linhaEncomenda2);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      String string0 = bDProdutos1.listProdutosMedicos();
      assertNotNull(string0);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n--> Saco de lixo 30l\n", string0);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      Set<String> set1 = bDProdutos0.getCodigos();
      assertNotNull(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(set1.contains("Saco de lixo 30l"));
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(set1, set0);
      
      String string1 = bDProdutos0.listProdutosMedicos();
      assertNotNull(string1);
      assertEquals("LISTA DE PRODUTOS M\u00C9DICOS\n", string1);
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(bDProdutos0, bDProdutos1);
      
      Set<String> set2 = bDProdutos0.getCodigos();
      assertNotNull(set2);
      assertTrue(set2.isEmpty());
      assertEquals(0, set2.size());
      assertFalse(set2.contains(string1));
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      
      BDProdutos bDProdutos2 = bDProdutos0.clone();
      assertNotNull(bDProdutos2);
      assertFalse(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertNotSame(bDProdutos2, bDProdutos0);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos2);
      
      String string2 = bDProdutos1.listProdutosNormais();
      assertNotNull(string2);
      assertEquals("LISTA DE PRODUTOS\n", string2);
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(bDProdutos1.equals((Object)bDProdutos2));
      assertFalse(bDProdutos1.equals((Object)bDProdutos0));
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos2);
      assertNotSame(bDProdutos1, bDProdutos0);
      
      BDProdutos bDProdutos3 = bDProdutos2.clone();
      assertNotNull(bDProdutos3);
      assertFalse(bDProdutos2.equals((Object)bDProdutos1));
      assertTrue(bDProdutos2.equals((Object)bDProdutos0));
      assertTrue(bDProdutos0.equals((Object)bDProdutos2));
      assertFalse(bDProdutos0.equals((Object)bDProdutos1));
      assertTrue(bDProdutos3.equals((Object)bDProdutos0));
      assertFalse(bDProdutos3.equals((Object)bDProdutos1));
      assertTrue(bDProdutos3.equals((Object)bDProdutos2));
      assertNotSame(bDProdutos2, bDProdutos0);
      assertNotSame(bDProdutos2, bDProdutos1);
      assertNotSame(bDProdutos2, bDProdutos3);
      assertNotSame(bDProdutos0, bDProdutos1);
      assertNotSame(bDProdutos0, bDProdutos3);
      assertNotSame(bDProdutos0, bDProdutos2);
      assertNotSame(bDProdutos3, bDProdutos1);
      assertNotSame(bDProdutos3, bDProdutos0);
      assertNotSame(bDProdutos3, bDProdutos2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      bDProdutos0.getCodigos();
      Map<String, LinhaEncomenda> map1 = bDProdutos0.getProdutos();
      bDProdutos0.getProdMedicos(map1);
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0).when(linhaEncomenda1).clone();
      doReturn("@5G\"pK(").when(linhaEncomenda1).getDescricao();
      bDProdutos0.add(linhaEncomenda1);
      bDProdutos0.getCodigos();
      bDProdutos0.toString();
      bDProdutos0.existe("Total de Produtos: \n{@5G\"pK(=Mock for LinhaEncomenda, hashCode: 1495231177}");
      bDProdutos0.setProdutos(map0);
      bDProdutos0.equals("Total de Produtos: \n{@5G\"pK(=Mock for LinhaEncomenda, hashCode: 1495231177}");
      bDProdutos0.listProdutosNormais();
      bDProdutos0.existe("LISTA DE PRODUTOS\n");
      BDProdutos bDProdutos1 = new BDProdutos();
      Set<String> set0 = bDProdutos0.getCodigos();
      bDProdutos1.setCodigos(set0);
      bDProdutos1.listProdutosMedicos();
      bDProdutos1.listProdutosMedicos();
      bDProdutos0.equals(bDProdutos1);
      bDProdutos0.existe("LISTA DE PRODUTOS\n");
      bDProdutos1.toString();
      bDProdutos1.equals(map1);
      bDProdutos0.getCodigos();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda2).clone();
      doReturn((String) null).when(linhaEncomenda2).getDescricao();
      // Undeclared exception!
      try { 
        bDProdutos1.add(linhaEncomenda2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.equals((Object) null);
      bDProdutos0.toString();
      bDProdutos0.listProdutosMedicos();
      try { 
        bDProdutos0.existeProd(";%e*P");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDProdutos", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      boolean boolean0 = bDProdutos0.equals(bDProdutos0);
      String string0 = bDProdutos0.toString();
      assertEquals("Total de Produtos: \n{}", string0);
      
      boolean boolean1 = bDProdutos0.equals("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BDProdutos bDProdutos0 = new BDProdutos();
      bDProdutos0.listProdutosMedicos();
      bDProdutos0.listProdutosNormais();
      bDProdutos0.existe("?J38rGC@+qo2!");
      Map<String, LinhaEncomenda> map0 = bDProdutos0.getProdutos();
      bDProdutos0.setProdutos(map0);
      Set<String> set0 = bDProdutos0.getCodigos();
      bDProdutos0.listProdutosMedicos();
      LinhaEncomenda linhaEncomenda0 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn("R/7\u0001qKsa4\"^c5Su").when(linhaEncomenda0).toString();
      LinhaEncomenda linhaEncomenda1 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linhaEncomenda1).toString();
      LinhaEncomenda linhaEncomenda2 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda0, linhaEncomenda1).when(linhaEncomenda2).clone();
      LinhaEncomenda linhaEncomenda3 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda2).when(linhaEncomenda3).clone();
      doReturn("Desinfetante").when(linhaEncomenda3).getDescricao();
      bDProdutos0.add(linhaEncomenda3);
      bDProdutos0.setCodigos(set0);
      bDProdutos0.getProdutos();
      bDProdutos0.listProdutosMedicos();
      LinhaEncomenda linhaEncomenda4 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn((LinhaEncomenda) null).when(linhaEncomenda4).clone();
      LinhaEncomenda linhaEncomenda5 = mock(LinhaEncomenda.class, new ViolatedAssumptionAnswer());
      doReturn(linhaEncomenda4).when(linhaEncomenda5).clone();
      doReturn("?J38rGC@+qo2!").when(linhaEncomenda5).getDescricao();
      bDProdutos0.add(linhaEncomenda5);
      // Undeclared exception!
      try { 
        bDProdutos0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
