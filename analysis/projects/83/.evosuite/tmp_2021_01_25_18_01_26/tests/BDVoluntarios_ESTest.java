/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 18:06:12 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BDVoluntarios_ESTest extends BDVoluntarios_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.setVoluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.setCodigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.existe((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = null;
      try {
        bDVoluntarios0 = new BDVoluntarios((BDVoluntarios) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Set<String> set0 = bDVoluntarios0.getCodigos();
      bDVoluntarios0.setCodigos(set0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      bDVoluntarios0.setVoluntarios(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      boolean boolean0 = bDVoluntarios0.existeEnc("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      try { 
        bDVoluntarios0.encontraEnc("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      try { 
        bDVoluntarios0.getEmail("TWaZQ5:T@2]5~za>Z");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Loja loja0 = mock(Loja.class, new ViolatedAssumptionAnswer());
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveis2(loja0, (Voluntario) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Loja loja0 = mock(Loja.class, new ViolatedAssumptionAnswer());
      Utilizador utilizador0 = mock(Utilizador.class, new ViolatedAssumptionAnswer());
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveisMed(loja0, utilizador0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Loja loja0 = mock(Loja.class, new ViolatedAssumptionAnswer());
      Utilizador utilizador0 = mock(Utilizador.class, new ViolatedAssumptionAnswer());
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDisponíveis(loja0, utilizador0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Loja loja0 = mock(Loja.class, new ViolatedAssumptionAnswer());
      String string0 = bDVoluntarios0.printVoluntarioLoja(loja0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      String string0 = bDVoluntarios0.printVoluntario();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Voluntario voluntario0 = bDVoluntarios0.tryLogin(",dqaSXn[bsJR", "UUR");
      assertNull(voluntario0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      boolean boolean0 = bDVoluntarios0.existeCodigo("Total de Voluntarios: \n{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      boolean boolean0 = bDVoluntarios0.existeEmail("Lista de encomendas recebidas: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      Set<String> set0 = bDVoluntarios0.getCodigos();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(map0, set0);
      boolean boolean0 = bDVoluntarios1.equals(bDVoluntarios0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      boolean boolean0 = bDVoluntarios0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      boolean boolean0 = bDVoluntarios0.equals(bDVoluntarios0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Set<String> set0 = bDVoluntarios0.getCodigos();
      boolean boolean0 = bDVoluntarios0.equals(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      String string0 = bDVoluntarios0.toString();
      assertEquals("Total de Voluntarios: \n{}", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.updateVoluntario((Voluntario) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.add((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      // Undeclared exception!
      try { 
        bDVoluntarios0.updateVoluntario2((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = null;
      try {
        bDVoluntarios0 = new BDVoluntarios((Map<String, Voluntario>) null, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }
}
