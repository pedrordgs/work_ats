/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:44:06 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.JapaneseEra;
import java.time.format.DateTimeParseException;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setVendedor("130:#wG(F>vT&Y!bC");
      encomenda0.setPeso(0.0);
      encomenda0.setPeso((-3798.0));
      encomenda0.setEntregue(true);
      encomenda0.getProdutos();
      encomenda0.setComprador((String) null);
      encomenda0.setCodigo_loja("");
      encomenda0.setPreparada(true);
      encomenda0.setEntregue(true);
      encomenda0.getCodigo();
      encomenda0.getProdutos();
      encomenda0.setPeso((-389.004));
      encomenda0.isEncomendaMedica();
      encomenda0.getComprador();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getProdutos();
      encomenda0.equals("Desinfetante");
      encomenda0.setCodigo_loja("Desinfetante");
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setVendedor("Desinfetante");
      encomenda0.setEncomendaMedica(false);
      encomenda1.getProdutos();
      encomenda1.toString();
      encomenda1.equals(map0);
      encomenda0.toString();
      encomenda1.equals(encomenda0);
      encomenda1.setCodigo_loja(" ");
      encomenda1.getCodigo_user();
      encomenda1.setEntregue(false);
      encomenda0.getProdutos();
      Encomenda encomenda2 = new Encomenda();
      encomenda1.equals(encomenda2);
      encomenda2.getProdutos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("", "i>ZO0#Qk:", "Comprador: ", 0.0, "Comprador: ", (String) null, map0, false, (LocalDateTime) null, true, false, true);
      Encomenda encomenda2 = encomenda1.clone();
      encomenda2.setCodigo_user("");
      encomenda1.setPreparada(true);
      Encomenda encomenda3 = new Encomenda((String) null, "", " ", 0.0, "Alcool", " ", map0, false, (LocalDateTime) null, true, true, true);
      encomenda2.equals(encomenda3);
      encomenda1.clone();
      encomenda0.clone();
      encomenda1.toString();
      encomenda1.equals("i>ZO0#Qk:");
      encomenda3.getCodigo_user();
      encomenda2.clone();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.equals((Object) null);
      Instant instant0 = MockInstant.ofEpochSecond((-959L), 0L);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneOffset0);
      Encomenda encomenda1 = new Encomenda((String) null, "z'83s:y+sTT", ".)aobR.a43>hm&]y.", 0.0, "z'83s:y+sTT", "z'83s:y+sTT", map0, false, localDateTime0, true, false, false);
      encomenda1.getProdutos();
      System.setCurrentTimeMillis(0L);
      Encomenda encomenda2 = encomenda0.clone();
      encomenda2.setCodigo_user("Xv8:clVaY`T");
      Object object0 = new Object();
      encomenda2.equals(object0);
      encomenda0.getProdutos();
      encomenda2.getProdutos();
      encomenda1.getCodigo();
      encomenda0.getCodigo_loja();
      encomenda2.getCodigo_loja();
      encomenda1.getCodigo_loja();
      encomenda0.getProdutos();
      encomenda2.getComprador();
      encomenda1.getCodigo();
      encomenda0.getComprador();
      encomenda0.getCodigo_user();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setData((LocalDateTime) null);
      encomenda1.getProdutos();
      encomenda1.getData();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setComprador("{=hgT{`(xz");
      Map<String, LinhaEncomenda> map0 = encomenda1.getProdutos();
      encomenda1.setProdutos(map0);
      encomenda0.equals(encomenda1);
      encomenda0.setCodigo_user("{=hgT{`(xz");
      Object object0 = new Object();
      encomenda0.equals(object0);
      encomenda0.getCodigo_user();
      encomenda1.setVendedor("[()8Qa5>AcS3P<X");
      encomenda0.getCodigo_loja();
      encomenda1.setProdutos(map0);
      encomenda0.setLevantada(false);
      encomenda1.setProdutos(map0);
      encomenda1.setPeso(0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.setCodigo_loja("wWcBD\"Bw!w<mdG8'");
      encomenda0.setLevantada(false);
      Encomenda encomenda2 = encomenda0.clone();
      encomenda0.equals(encomenda0);
      encomenda0.getProdutos();
      encomenda1.setPreparada(false);
      encomenda2.getProdutos();
      encomenda1.setVendedor("wWcBD\"Bw!w<mdG8'");
      encomenda1.setEncomendaMedica(false);
      encomenda1.getCodigo_loja();
      encomenda1.isPreparada();
      encomenda0.getCodigo();
      encomenda0.setPeso(1.0);
      encomenda1.setComprador("m+>Tg[O*.8\"$L.");
      encomenda0.getVendedor();
      encomenda2.getPeso();
      encomenda1.getVendedor();
      encomenda2.isPreparada();
      encomenda2.isLevantada();
      encomenda0.setCodigo_loja("");
      encomenda0.getData();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setCodigo_user((String) null);
      encomenda1.getCodigo_user();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(675L);
      System.setCurrentTimeMillis(675L);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setVendedor((String) null);
      encomenda0.toString();
      encomenda0.getVendedor();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setCodigo_user("z'83s:y+sTT");
      encomenda0.setProdutos(map0);
      encomenda0.toString();
      encomenda0.getComprador();
      encomenda0.getVendedor();
      encomenda0.getProdutos();
      encomenda0.getCodigo_user();
      encomenda0.toString();
      encomenda0.getData();
      encomenda0.getData();
      encomenda0.getVendedor();
      encomenda0.getData();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1296L));
      System.setCurrentTimeMillis(0L);
      encomenda0.getData();
      encomenda0.clone();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getProdutos();
      encomenda0.equals("Desinfetante");
      encomenda0.setCodigo_loja("Desinfetante");
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setEncomendaMedica(false);
      encomenda1.getProdutos();
      encomenda1.toString();
      encomenda1.equals(map0);
      encomenda0.toString();
      encomenda1.equals(encomenda0);
      encomenda1.getCodigo_user();
      encomenda1.setEntregue(false);
      encomenda0.getProdutos();
      Encomenda encomenda2 = new Encomenda();
      encomenda1.equals(encomenda2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Map<String, LinhaEncomenda> map1 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("Desinfetante", "Desinfetante", "Desinfetante", 14.049129, "Desinfetante", "Desinfetante", map0, false, (LocalDateTime) null, false, false, false);
      encomenda1.isEncomendaMedica();
      Encomenda encomenda2 = encomenda1.clone();
      encomenda1.isPreparada();
      encomenda0.getCodigo_loja();
      encomenda1.setProdutos(map0);
      encomenda0.setCodigo("Desinfetante");
      encomenda2.setCodigo_user("Desinfetante");
      encomenda2.setCodigo_loja("T6&8Q&{J=-ikx[Gw}<");
      encomenda1.setProdutos(map0);
      encomenda2.getCodigo_loja();
      encomenda2.getCodigo_user();
      encomenda2.setProdutos(map1);
      encomenda2.getPeso();
      encomenda2.isEntregue();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      ChronoLocalDate chronoLocalDate0 = ChronoLocalDate.from(zonedDateTime0);
      encomenda2.equals(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda1 = new Encomenda("89)eO", "89)eO", "", 0.0, "E;2f&6dH<r9", "", map0, true, localDateTime0, true, true, true);
      encomenda1.setCodigo("E;2f&6dH<r9");
      Encomenda encomenda2 = new Encomenda(encomenda1);
      encomenda2.setCodigo_loja("");
      encomenda2.getCodigo();
      encomenda1.getVendedor();
      encomenda2.setEncomendaMedica(true);
      encomenda2.toString();
      encomenda2.setEntregue(true);
      encomenda0.toString();
      encomenda1.getProdutos();
      encomenda2.setEncomendaMedica(true);
      encomenda0.equals("");
      encomenda2.setLevantada(false);
      encomenda2.isEncomendaMedica();
      encomenda2.setVendedor("E;2f&6dH<r9");
      encomenda2.isEntregue();
      encomenda2.isEncomendaMedica();
      encomenda1.isEntregue();
      encomenda2.setPeso((-264.9798));
      encomenda2.setProdutos(map0);
      encomenda0.clone();
      encomenda1.setVendedor("");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setCodigo("");
      encomenda1.setPeso(3456.5);
      Encomenda encomenda2 = new Encomenda();
      Encomenda encomenda3 = encomenda2.clone();
      encomenda1.setEntregue(true);
      encomenda3.toString();
      Encomenda encomenda4 = encomenda3.clone();
      encomenda4.setEntregue(false);
      encomenda3.setLevantada(true);
      encomenda3.setLevantada(false);
      encomenda2.setPreparada(true);
      encomenda1.setEncomendaMedica(true);
      Map<String, LinhaEncomenda> map0 = encomenda2.getProdutos();
      encomenda1.setProdutos(map0);
      encomenda2.isEncomendaMedica();
      encomenda0.toString();
      encomenda2.setCodigo("");
      encomenda1.toString();
      Encomenda encomenda5 = encomenda1.clone();
      encomenda5.getProdutos();
      encomenda2.setPeso(3456.5);
      encomenda0.getPeso();
      encomenda5.equals(encomenda0);
      encomenda3.clone();
      encomenda1.getCodigo();
      encomenda2.getCodigo_user();
      encomenda0.setVendedor("");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      Map<String, LinhaEncomenda> map0 = null;
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      boolean boolean0 = true;
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda("", "", "", 0.0, "", "", (Map<String, LinhaEncomenda>) null, false, localDateTime0, true, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.equals(encomenda0);
      encomenda1.setCodigo_loja("");
      encomenda1.getCodigo_user();
      encomenda0.setPeso((-1088.0690634863));
      encomenda0.setComprador(" ");
      encomenda0.setCodigo_loja(" ");
      encomenda1.isLevantada();
      encomenda0.toString();
      encomenda1.setCodigo_user("\nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador:  \nC\u00F3digo da loja:  \nPeso: -1088.0690634863\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n");
      encomenda0.setCodigo("\nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador:  \nC\u00F3digo da loja:  \nPeso: -1088.0690634863\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n");
      encomenda1.isPreparada();
      encomenda0.getData();
      encomenda1.getCodigo_loja();
      Object object0 = new Object();
      encomenda1.equals(object0);
      encomenda0.setEntregue(true);
      encomenda1.isPreparada();
      encomenda1.getPeso();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-297.24516701479));
      encomenda0.setLevantada(false);
      encomenda0.toString();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda0.setCodigo_loja("");
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.isPreparada();
      encomenda0.setCodigo_user("");
      encomenda0.setLevantada(true);
      encomenda0.setVendedor((String) null);
      encomenda1.isLevantada();
      encomenda0.setProdutos(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", ":vK95DgzZoA<hs4;N", 1191.99, 1191.99);
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      encomenda0.equals(linhaEncomenda1);
      encomenda0.setEntregue(true);
      encomenda0.getPeso();
      encomenda0.setPreparada(true);
      encomenda0.getComprador();
      encomenda0.isPreparada();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEncomendaMedica(true);
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setEntregue(true);
      encomenda0.setLevantada(true);
      encomenda0.equals(map0);
      encomenda0.isEntregue();
      encomenda0.getProdutos();
      encomenda0.getCodigo_loja();
      encomenda0.setComprador("");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getProdutos();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      encomenda0.setLevantada(false);
      encomenda0.isEntregue();
      encomenda0.setCodigo_user("");
      encomenda0.getVendedor();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      encomenda0.setData(localDateTime0);
      encomenda0.getCodigo_loja();
      encomenda0.getProdutos();
      encomenda0.getProdutos();
      encomenda0.setEntregue(false);
      encomenda0.setVendedor(" ");
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setEncomendaMedica(false);
      encomenda1.isPreparada();
      encomenda0.setPreparada(false);
      encomenda0.equals(" ");
      encomenda1.toString();
      encomenda0.setVendedor((String) null);
      encomenda1.isPreparada();
      // Undeclared exception!
      try { 
        encomenda0.equals(encomenda1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo((String) null);
      Object object0 = new Object();
      encomenda0.equals(object0);
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      encomenda0.toString();
      encomenda0.setVendedor("Alcool");
      encomenda0.setVendedor("");
      encomenda0.equals((Object) null);
      encomenda0.toString();
      encomenda0.setCodigo_loja("");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setPeso((-3194.5860813));
      encomenda1.setProdutos(map0);
      encomenda0.setCodigo("*\u0006.H_w/o}#_;");
      encomenda0.setVendedor("*\u0006.H_w/o}#_;");
      encomenda0.setLevantada(false);
      encomenda0.setEntregue(true);
      encomenda0.getProdutos();
      encomenda0.isPreparada();
      encomenda0.setEncomendaMedica(false);
      encomenda0.setVendedor("Jgx\"c");
      encomenda0.clone();
      encomenda0.isPreparada();
      encomenda0.setVendedor("");
      encomenda0.isLevantada();
      encomenda1.setPeso((-127.416339675216));
      encomenda1.equals(encomenda0);
      encomenda0.setCodigo_user("");
      encomenda0.setPeso(2651.60309);
      encomenda1.getPeso();
      encomenda1.getCodigo_loja();
      encomenda0.getCodigo_loja();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso(0.0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      Map<String, LinhaEncomenda> map0 = encomenda1.getProdutos();
      encomenda0.setPeso(0.0);
      encomenda1.setCodigo_loja("7o(\"W");
      Encomenda encomenda2 = new Encomenda("Produtos: ", "/HmaP-pN65w", "/HmaP-pN65w", 0.0, "Produtos: ", "7o(\"W", map0, false, (LocalDateTime) null, false, false, false);
      encomenda2.equals(encomenda1);
      Object object0 = new Object();
      encomenda2.setCodigo("/HmaP-pN65w");
      encomenda2.equals(object0);
      encomenda1.setComprador("");
      encomenda2.setLevantada(false);
      encomenda2.setPeso(0.0);
      encomenda2.setPeso(0.0);
      encomenda2.getProdutos();
      encomenda2.setLevantada(false);
      encomenda2.getCodigo();
      encomenda2.setComprador("Produtos: ");
      encomenda1.setCodigo("");
      encomenda1.isEncomendaMedica();
      encomenda0.getData();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getCodigo_loja();
      encomenda0.setEntregue(true);
      encomenda0.setVendedor((String) null);
      encomenda0.setCodigo("Saco de lixo 30l");
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setCodigo_loja("Produto: ");
      encomenda0.isEncomendaMedica();
      encomenda1.toString();
      encomenda0.setCodigo_loja("Saco de lixo 30l");
      encomenda0.getProdutos();
      encomenda1.getCodigo_user();
      encomenda1.getCodigo();
      encomenda0.isPreparada();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreparada(true);
      encomenda0.toString();
      encomenda0.setComprador("");
      // Undeclared exception!
      try { 
        encomenda0.setProdutos((Map<String, LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setLevantada(true);
      Encomenda encomenda1 = new Encomenda("a3`C`'h7~2N1TSV", "TlJG_0G9Sli+n+Bvac", "<6%@Hi0iS@_", 2902.16263, "Pre\u00E7o: ", "", map0, false, (LocalDateTime) null, false, true, false);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      Map<String, LinhaEncomenda> map1 = encomenda2.getProdutos();
      Encomenda encomenda3 = new Encomenda("", "TlJG_0G9Sli+n+Bvac", "a3`C`'h7~2N1TSV", 2902.16263, "", "bK1^l/JT7Z[f]t#\"N", map1, false, (LocalDateTime) null, true, true, true);
      encomenda2.setCodigo_user("<6%@Hi0iS@_");
      encomenda2.isLevantada();
      encomenda2.setEncomendaMedica(false);
      encomenda1.clone();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-922.998556068508));
      encomenda0.setPeso((-922.998556068508));
      encomenda0.setComprador("");
      encomenda0.getProdutos();
      encomenda0.getCodigo_loja();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.getCodigo_user();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      String string0 = "Data de emiss\u00E3o da encomenda: ";
      encomenda0.setEncomendaMedica(false);
      encomenda0.equals("Data de emiss\u00E3o da encomenda: ");
      encomenda0.setCodigo("Data de emiss\u00E3o da encomenda: ");
      encomenda0.isEncomendaMedica();
      encomenda0.setCodigo("Data de emiss\u00E3o da encomenda: ");
      encomenda0.getPeso();
      // Undeclared exception!
      try { 
        MockLocalDateTime.parse((CharSequence) "Data de emiss\u00E3o da encomenda: ");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'Data de emiss\u00E3o da encomenda: ' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getCodigo();
      encomenda0.isEncomendaMedica();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda1.getProdutos();
      encomenda0.setProdutos(map0);
      encomenda0.getProdutos();
      encomenda0.isLevantada();
      encomenda0.getProdutos();
      encomenda0.setPreparada(false);
      encomenda0.setCodigo(";S,n&($LZE@*ovU#%<");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda1 = new Encomenda("JmPjn", "C\u00F3digo da loja: ", "C\u00F3digo da loja: ", 0.0, "C\u00F3digo da loja: ", "Encomenda: ", map0, true, localDateTime0, true, false, true);
      encomenda1.equals(localDateTime0);
      encomenda1.getCodigo();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getProdutos();
      encomenda0.getData();
      encomenda0.getComprador();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setComprador("");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda0.setEncomendaMedica(false);
      encomenda1.setCodigo_user("z'83s:y+sTT");
      encomenda0.equals(encomenda1);
      encomenda0.setEncomendaMedica(true);
      encomenda0.setCodigo_user("]}s]Ek-[13m ]D*");
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda1.setProdutos(map0);
      encomenda1.toString();
      encomenda1.toString();
      encomenda1.getVendedor();
      encomenda0.getComprador();
      encomenda0.getProdutos();
      encomenda0.setCodigo_user("rl!G");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.equals("");
      encomenda0.getProdutos();
      encomenda0.setLevantada(false);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPeso((-571.574282134));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo_loja("\n");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setLevantada(true);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setPreparada(true);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("", "", "Peso: ", 0.0, "Peso: ", "", map0, false, (LocalDateTime) null, false, false, true);
      encomenda1.clone();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setEntregue(false);
      encomenda0.toString();
      encomenda0.setComprador("\nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador:  \nC\u00F3digo da loja:  \nPeso: 0.0\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n");
      encomenda0.setComprador("\nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador:  \nC\u00F3digo da loja:  \nPeso: 0.0\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n");
      encomenda0.setProdutos(map0);
      encomenda0.setCodigo_user("\nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador:  \nC\u00F3digo da loja:  \nPeso: 0.0\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.toString();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEntregue(true);
      encomenda0.setVendedor(" ");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.isEntregue();
      encomenda0.setEntregue(false);
      encomenda0.setComprador("V eUy]~Bq|1!\"@[~4");
      encomenda0.setEncomendaMedica(false);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.equals((Object) null);
      encomenda0.setEncomendaMedica(false);
      encomenda0.setCodigo("Wg");
      encomenda0.getProdutos();
      encomenda0.getCodigo_user();
      encomenda0.getCodigo();
      encomenda0.equals(" ");
      encomenda0.getProdutos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo_user("Alcool");
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setPreparada(true);
      encomenda0.setEncomendaMedica(false);
      encomenda1.getProdutos();
      encomenda1.setComprador("*\u0006.H_w/o}#_;");
      encomenda1.setComprador("*\u0006.H_w/o}#_;");
      encomenda1.getComprador();
      encomenda1.getProdutos();
      encomenda1.equals(encomenda0);
      encomenda0.getData();
      encomenda0.setPreparada(true);
      encomenda1.getCodigo_user();
      encomenda1.toString();
      Object object0 = new Object();
      encomenda1.equals(object0);
      encomenda0.getCodigo_loja();
      encomenda1.getCodigo_user();
      encomenda1.getCodigo();
      encomenda1.getData();
      encomenda0.getCodigo_user();
      encomenda1.getCodigo_loja();
      encomenda1.clone();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEncomendaMedica(true);
      encomenda0.getCodigo();
      encomenda0.getData();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Month month0 = Month.DECEMBER;
      // Undeclared exception!
      try { 
        MockLocalDateTime.of((-2538), month0, (-2538), (-2538), 1, (-2538), 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): -2538
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setData((LocalDateTime) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.toString();
      encomenda0.getProdutos();
      encomenda0.setCodigo_user("\nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador:  \nC\u00F3digo da loja:  \nPeso: 0.0\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n");
      encomenda0.toString();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.equals(encomenda0);
      Month month0 = Month.JANUARY;
      int int0 = 4344;
      encomenda0.setComprador("\nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador: \nEncomenda: \nC\u00F3digo:  \nC\u00F3digo do utilizador:  \nC\u00F3digo da loja:  \nPeso: 0.0\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n\nC\u00F3digo da loja:  \nPeso: 0.0\nComprador:  \nVendedor:  \nData de emiss\u00E3o da encomenda: 2014-02-14T20:21:21.320\nProdutos: \n{}\n");
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(1268, month0, 4344, 3070, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): 4344
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.isEntregue();
      encomenda0.getProdutos();
      Object object0 = new Object();
      encomenda0.setPreparada(false);
      encomenda0.isPreparada();
      encomenda0.isEntregue();
      encomenda0.setVendedor("Q");
      encomenda0.setEntregue(false);
      encomenda0.isPreparada();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      encomenda0.setLevantada(false);
      encomenda0.isEntregue();
      assertEquals(" ", encomenda0.getCodigo_user());
      
      encomenda0.setCodigo_user("");
      encomenda0.getVendedor();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      encomenda0.setData(localDateTime0);
      encomenda0.getCodigo_loja();
      encomenda0.getProdutos();
      encomenda0.getProdutos();
      encomenda0.setEntregue(false);
      encomenda0.setVendedor(" ");
      Encomenda encomenda1 = encomenda0.clone();
      encomenda1.setEncomendaMedica(false);
      encomenda1.isPreparada();
      encomenda0.setPreparada(false);
      encomenda1.setCodigo_user("Desinfetante");
      encomenda0.equals(" ");
      encomenda1.toString();
      encomenda0.setVendedor((String) null);
      encomenda1.setPreparada(true);
      encomenda1.isPreparada();
      encomenda0.equals(encomenda1);
      encomenda1.isEncomendaMedica();
      encomenda0.getData();
      encomenda0.getData();
      encomenda0.getCodigo();
      encomenda0.setComprador("Comprador: ");
      encomenda0.getProdutos();
      assertFalse(encomenda0.isEntregue());
  }
}
