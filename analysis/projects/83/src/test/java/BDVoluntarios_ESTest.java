/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:41:09 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BDVoluntarios_ESTest extends BDVoluntarios_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      String string0 = bDVoluntarios1.toString();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertEquals("Total de Voluntarios: \n{}", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(string0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertNotNull(voluntario0);
      
      voluntario0.setDisponibilidade(true);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      voluntario0.updateRate(double0);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      
      Loja loja0 = new Loja();
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertNotNull(loja0);
      
      bDVoluntarios1.updateVoluntario2(voluntario0);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      List<Voluntario> list0 = bDVoluntarios1.voluntariosDispon√≠veis2(loja0, voluntario0);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(list0);
      assertFalse(list0.contains(voluntario0));
      
      bDVoluntarios1.updateVoluntario(voluntario0, (-1114.92863));
      assertEquals((-557.464315), voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(2, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      String string1 = bDVoluntarios0.toString();
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("Total de Voluntarios: \n{}", string1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(string1);
      
      Set<String> set1 = bDVoluntarios1.getCodigos();
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.contains(string1));
      
      bDVoluntarios1.setCodigos(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string1));
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Utilizador utilizador0 = new Utilizador("Total de Voluntarios: \n{}", (String) null, "Total de Voluntarios: \n{}", "u}5U(_4", 1534.17544202656, 0.0, arrayList0);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNull(utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("u}5U(_4", utilizador0.getNome());
      assertEquals(1534.17544202656, utilizador0.getLatitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(utilizador0);
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNull(utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("u}5U(_4", utilizador0.getNome());
      assertEquals(1534.17544202656, utilizador0.getLatitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getEmail());
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getEmail());
      assertNull(utilizador1.getPassword());
      assertEquals(1534.17544202656, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("u}5U(_4", utilizador1.getNome());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(utilizador1);
      
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDispon√≠veis((Loja) null, utilizador1);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNull(utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("u}5U(_4", utilizador0.getNome());
      assertEquals(1534.17544202656, utilizador0.getLatitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getEmail());
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getEmail());
      assertNull(utilizador1.getPassword());
      assertEquals(1534.17544202656, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("u}5U(_4", utilizador1.getNome());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.contains(voluntario0));
      
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("u}5U(_4", "Total de Voluntarios: \n{}");
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario1);
      
      Voluntario voluntario2 = bDVoluntarios0.tryLogin("", "$]<TBK^%tG7-_");
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario2);
      
      bDVoluntarios0.updateVoluntario(voluntario0, 541.569);
      assertEquals((-191.11987666666673), voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getEmail());
      assertEquals(3, voluntario0.getAvaliacoes());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      
      Set<String> set2 = bDVoluntarios1.getCodigos();
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
      assertNotNull(set2);
      assertFalse(set2.contains(""));
      
      Voluntario voluntario3 = bDVoluntarios0.tryLogin("u}5U(_4", "Total de Voluntarios: \n{}");
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario3);
      
      Set<String> set3 = bDVoluntarios0.getCodigos();
      assertTrue(set3.isEmpty());
      assertEquals(0, set3.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set2));
      assertTrue(set3.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(set3, set0);
      assertNotSame(set3, set2);
      assertNotSame(set3, set1);
      assertNotNull(set3);
      assertFalse(set3.contains(""));
      
      Loja loja1 = new Loja();
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertEquals("", loja1.getNome());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertTrue(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      List<Voluntario> list2 = bDVoluntarios0.voluntariosDispon√≠veis(loja1, utilizador0);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNull(utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("u}5U(_4", utilizador0.getNome());
      assertEquals(1534.17544202656, utilizador0.getLatitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertEquals("", loja1.getNome());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list2);
      assertFalse(list2.contains(voluntario0));
      
      List<Voluntario> list3 = bDVoluntarios1.voluntariosDispon√≠veisMed(loja0, utilizador0);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNull(utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("u}5U(_4", utilizador0.getNome());
      assertEquals(1534.17544202656, utilizador0.getLatitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(loja0, loja1);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertNotNull(list3);
      assertFalse(list3.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      String string0 = bDVoluntarios1.toString();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertEquals("Total de Voluntarios: \n{}", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(string0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertNotNull(voluntario0);
      
      voluntario0.setDisponibilidade(true);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      voluntario0.updateRate(double0);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      
      Loja loja0 = new Loja();
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertNotNull(loja0);
      
      bDVoluntarios1.updateVoluntario2(voluntario0);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      List<Voluntario> list0 = bDVoluntarios1.voluntariosDispon√≠veis2(loja0, voluntario0);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(list0);
      assertFalse(list0.contains(voluntario0));
      
      bDVoluntarios1.updateVoluntario(voluntario0, (-1114.92863));
      assertEquals(2, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals((-557.464315), voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      String string1 = bDVoluntarios1.printVoluntarioLoja(loja0);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(" --->  RATE --> -557.464315 KMS: 0.0\n", string1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(string1);
      
      Set<String> set1 = bDVoluntarios1.getCodigos();
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.contains(string0));
      
      bDVoluntarios1.setCodigos(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string0));
      
      String string2 = "u}5U(_4";
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertNotNull(arrayList0);
      
      Utilizador utilizador0 = new Utilizador("Total de Voluntarios: \n{}", (String) null, "Total de Voluntarios: \n{}", "u}5U(_4", 1534.17544202656, 0.0, arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador0.getPassword());
      assertEquals("u}5U(_4", utilizador0.getNome());
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getCodigo());
      assertEquals(1534.17544202656, utilizador0.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertNotNull(utilizador0);
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador0.getPassword());
      assertEquals("u}5U(_4", utilizador0.getNome());
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getCodigo());
      assertEquals(1534.17544202656, utilizador0.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertNull(utilizador1.getPassword());
      assertEquals("u}5U(_4", utilizador1.getNome());
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getEmail());
      assertEquals(1534.17544202656, utilizador1.getLatitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertNotNull(utilizador1);
      
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDispon√≠veis((Loja) null, utilizador1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador0.getPassword());
      assertEquals("u}5U(_4", utilizador0.getNome());
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getCodigo());
      assertEquals(1534.17544202656, utilizador0.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertNull(utilizador1.getPassword());
      assertEquals("u}5U(_4", utilizador1.getNome());
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getEmail());
      assertEquals(1534.17544202656, utilizador1.getLatitude(), 0.01);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.contains(voluntario0));
      
      try { 
        bDVoluntarios0.encontraEnc(" --->  RATE --> -557.464315 KMS: 0.0\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      String string0 = bDVoluntarios1.toString();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertEquals("Total de Voluntarios: \n{}", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(string0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertNotNull(voluntario0);
      
      voluntario0.setDisponibilidade(false);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      voluntario0.updateRate(double0);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      
      Loja loja0 = new Loja();
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertNotNull(loja0);
      
      bDVoluntarios1.updateVoluntario2(voluntario0);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      List<Voluntario> list0 = bDVoluntarios1.voluntariosDispon√≠veis2(loja0, voluntario0);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(list0);
      assertFalse(list0.contains(voluntario0));
      
      bDVoluntarios1.updateVoluntario(voluntario0, (-1114.92863));
      assertEquals(2, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals((-557.464315), voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      String string1 = bDVoluntarios0.toString();
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("Total de Voluntarios: \n{}", string1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(string1);
      
      Set<String> set1 = bDVoluntarios1.getCodigos();
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.contains(string1));
      
      bDVoluntarios1.setCodigos(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string1));
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertNotNull(utilizador0);
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotNull(utilizador1);
      
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDispon√≠veis((Loja) null, utilizador1);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.contains(voluntario0));
      
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("u}5U(_4", "Total de Voluntarios: \n{}");
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario1);
      
      Voluntario voluntario2 = bDVoluntarios0.tryLogin("", "$]<TBK^%tG7-_");
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario2);
      
      bDVoluntarios0.updateVoluntario(voluntario0, 541.569);
      assertEquals(3, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals((-191.11987666666673), voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      
      Set<String> set2 = bDVoluntarios1.getCodigos();
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set2.equals((Object)set1));
      assertTrue(set2.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      assertNotNull(set2);
      assertFalse(set2.contains("Total de Voluntarios: \n{}"));
      
      Voluntario voluntario3 = bDVoluntarios0.tryLogin("u}5U(_4", "Total de Voluntarios: \n{}");
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario3);
      
      Set<String> set3 = bDVoluntarios0.getCodigos();
      assertTrue(set3.isEmpty());
      assertEquals(0, set3.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(set3.equals((Object)set0));
      assertTrue(set3.equals((Object)set1));
      assertTrue(set3.equals((Object)set2));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(set3, set0);
      assertNotSame(set3, set1);
      assertNotSame(set3, set2);
      assertNotNull(set3);
      assertFalse(set3.contains("Total de Voluntarios: \n{}"));
      
      Loja loja1 = new Loja();
      assertEquals("", loja1.getCodigo());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertEquals("", loja1.getNome());
      assertTrue(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      List<Voluntario> list2 = bDVoluntarios0.voluntariosDispon√≠veis(loja1, utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", loja1.getCodigo());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertEquals("", loja1.getNome());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(loja1.equals((Object)loja0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(loja1, loja0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list2);
      assertFalse(list2.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Voluntario voluntario0 = new Voluntario();
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertNotNull(voluntario0);
      
      Set<String> set1 = bDVoluntarios0.getCodigos();
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      
      String string0 = bDVoluntarios0.printVoluntario();
      assertEquals("", string0);
      assertNotNull(string0);
      
      bDVoluntarios0.setCodigos(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string0));
      
      double double0 = 0.0;
      bDVoluntarios0.updateVoluntario(voluntario0, 0.0);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      
      boolean boolean0 = bDVoluntarios0.existeEnc("");
      assertFalse(boolean0);
      
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("", "");
      assertEquals("", voluntario1.getTypeUser());
      assertEquals("", voluntario1.getNome());
      assertEquals("", voluntario1.getPassword());
      assertFalse(voluntario1.getDisponibilidade());
      assertEquals(0, voluntario1.getMinutosDeEspera());
      assertEquals("", voluntario1.getEmail());
      assertEquals(0.0, voluntario1.getLatitude(), 0.01);
      assertEquals(0, voluntario1.getVelocidade());
      assertEquals(1, voluntario1.getAvaliacoes());
      assertEquals(0.0, voluntario1.getClassificacao(), 0.01);
      assertEquals("", voluntario1.getCodigo());
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario1.getLongitude(), 0.01);
      assertSame(voluntario1, voluntario0);
      assertNotNull(voluntario1);
      
      boolean boolean1 = bDVoluntarios0.existeEnc("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        bDVoluntarios0.encontraEnc("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      bDVoluntarios0.setVoluntarios(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean0 = bDVoluntarios0.equals(bDVoluntarios0);
      assertTrue(boolean0);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(utilizador0);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Loja loja0 = new Loja("N\u00E3o existe esse volunt\u00E1rio", "u", "?'0]0e:ce", "N\u00E3o existe esse volunt\u00E1rio", 762.0, 762.0, 762.0, arrayList0, 75);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("?'0]0e:ce", loja0.getCodigo());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(762.0, loja0.getTempo_espera(), 0.01);
      assertEquals(762.0, loja0.getLatitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja0.getNome());
      assertEquals(75, loja0.getNrPessoasEmFila());
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja0.getEmail());
      assertEquals(762.0, loja0.getLongitude(), 0.01);
      assertEquals("u", loja0.getPassword());
      assertNotNull(loja0);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veisMed(loja0, utilizador0);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("?'0]0e:ce", loja0.getCodigo());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(762.0, loja0.getTempo_espera(), 0.01);
      assertEquals(762.0, loja0.getLatitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja0.getNome());
      assertEquals(75, loja0.getNrPessoasEmFila());
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja0.getEmail());
      assertEquals(762.0, loja0.getLongitude(), 0.01);
      assertEquals("u", loja0.getPassword());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Loja loja1 = new Loja();
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getTypeUser());
      assertEquals("", loja1.getPassword());
      assertEquals("", loja1.getEmail());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertFalse(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      Utilizador utilizador1 = new Utilizador();
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("", utilizador1.getEmail());
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotNull(utilizador1);
      
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDispon√≠veis(loja1, utilizador1);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getTypeUser());
      assertEquals("", loja1.getPassword());
      assertEquals("", loja1.getEmail());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("", utilizador1.getEmail());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(loja1, loja0);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      boolean boolean0 = bDVoluntarios0.existeEnc(" ---> ");
      assertFalse(boolean0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Voluntario voluntario0 = new Voluntario("xX!", "xX!", "4(EOx68*T^vOl", " ---> ", false, 2161.3142765, (-1544.417976), localDate0, 0.0, linkedList0, 809.0, 1895, false, 1895, 1895);
      assertEquals(0, linkedList0.size());
      assertEquals(1895, voluntario0.getAvaliacoes());
      assertEquals("xX!", voluntario0.getPassword());
      assertEquals(809.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("4(EOx68*T^vOl", voluntario0.getNome());
      assertEquals((-1544.417976), voluntario0.getLongitude(), 0.01);
      assertEquals("xX!", voluntario0.getEmail());
      assertEquals("Voluntario", voluntario0.getTypeUser());
      assertEquals(" ---> ", voluntario0.getCodigo());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(1895, voluntario0.getVelocidade());
      assertEquals(1895, voluntario0.getMinutosDeEspera());
      assertEquals(2161.3142765, voluntario0.getLatitude(), 0.01);
      assertNotNull(voluntario0);
      
      bDVoluntarios0.updateVoluntario2(voluntario0);
      assertEquals(0, linkedList0.size());
      assertEquals(1895, voluntario0.getAvaliacoes());
      assertEquals("xX!", voluntario0.getPassword());
      assertEquals(809.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("4(EOx68*T^vOl", voluntario0.getNome());
      assertEquals((-1544.417976), voluntario0.getLongitude(), 0.01);
      assertEquals("xX!", voluntario0.getEmail());
      assertEquals("Voluntario", voluntario0.getTypeUser());
      assertEquals(" ---> ", voluntario0.getCodigo());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(1895, voluntario0.getVelocidade());
      assertEquals(1895, voluntario0.getMinutosDeEspera());
      assertEquals(2161.3142765, voluntario0.getLatitude(), 0.01);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertNotNull(utilizador0);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Loja loja0 = new Loja(" ---> ", "JXB)#hfZ~XXs<81zX", "xX!", " ---> ", (-2887.7639871436), (-113.5631), (-1.0), arrayList0, (-684));
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-2887.7639871436), loja0.getTempo_espera(), 0.01);
      assertEquals("xX!", loja0.getCodigo());
      assertEquals((-684), loja0.getNrPessoasEmFila());
      assertEquals((-113.5631), loja0.getLatitude(), 0.01);
      assertEquals(" ---> ", loja0.getNome());
      assertEquals((-113.5631), loja0.getLongitude(), 0.01);
      assertEquals(" ---> ", loja0.getEmail());
      assertEquals("JXB)#hfZ~XXs<81zX", loja0.getPassword());
      assertEquals("Loja", loja0.getTypeUser());
      assertNotNull(loja0);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veisMed(loja0, utilizador0);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-2887.7639871436), loja0.getTempo_espera(), 0.01);
      assertEquals("xX!", loja0.getCodigo());
      assertEquals((-684), loja0.getNrPessoasEmFila());
      assertEquals((-113.5631), loja0.getLatitude(), 0.01);
      assertEquals(" ---> ", loja0.getNome());
      assertEquals((-113.5631), loja0.getLongitude(), 0.01);
      assertEquals(" ---> ", loja0.getEmail());
      assertEquals("JXB)#hfZ~XXs<81zX", loja0.getPassword());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(voluntario0));
      
      boolean boolean1 = bDVoluntarios0.existeEmail("xX!");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = bDVoluntarios0.equals("xX!");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, linkedHashSet0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(bDVoluntarios0);
      
      Period period0 = Period.ofDays(0);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Loja loja0 = new Loja();
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja("Total de Voluntarios: ", "Password incorreta", "Nome: ", "33@E<*qT7{q\"|z/3", 0, (-3378.5968351679), 0.0, arrayList0, 0);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertFalse(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      ArrayList<Encomenda> arrayList1 = loja1.getEncomendas_recebidas();
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(loja0, loja1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      
      Voluntario voluntario0 = new Voluntario("Nome: ", "Total de Voluntarios: ", "Nome: ", "Total de Voluntarios: ", true, (-3378.5968351679), 0.0, localDate0, 0, arrayList1, (-1.0), (-268), true, 0, 0);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals((-268), voluntario0.getAvaliacoes());
      assertEquals((-1.0), voluntario0.getClassificacao(), 0.01);
      assertTrue(voluntario0.aceitoTransporteMedicamentos());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals((-3378.5968351679), voluntario0.getLatitude(), 0.01);
      assertEquals("Total de Voluntarios: ", voluntario0.getCodigo());
      assertEquals("Voluntario", voluntario0.getTypeUser());
      assertEquals("Nome: ", voluntario0.getNome());
      assertEquals("Total de Voluntarios: ", voluntario0.getPassword());
      assertEquals("Nome: ", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(voluntario0);
      
      bDVoluntarios0.updateVoluntario(voluntario0, (-3129.2));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(voluntario0.aceitoTransporteMedicamentos());
      assertEquals((-267), voluntario0.getAvaliacoes());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(10.716104868913858, voluntario0.getClassificacao(), 0.01);
      assertEquals((-3378.5968351679), voluntario0.getLatitude(), 0.01);
      assertEquals("Total de Voluntarios: ", voluntario0.getCodigo());
      assertEquals("Voluntario", voluntario0.getTypeUser());
      assertEquals("Nome: ", voluntario0.getNome());
      assertEquals("Total de Voluntarios: ", voluntario0.getPassword());
      assertEquals("Nome: ", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(loja0, loja1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(linkedHashSet0.contains("Nome: "));
      
      Loja loja2 = new Loja();
      assertEquals("", loja2.getCodigo());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getTypeUser());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getPassword());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getNome());
      assertFalse(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertNotNull(loja2);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertNotNull(utilizador0);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veisMed(loja2, utilizador0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("", loja2.getCodigo());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getTypeUser());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getPassword());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      assertNotNull(list0);
      assertFalse(linkedHashSet0.contains("Nome: "));
      assertFalse(list0.contains(voluntario0));
      
      String string0 = bDVoluntarios0.printVoluntario();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("Total de Voluntarios:  ---> Nome:  || RATE --> 10.716104868913858\n", string0);
      assertNotNull(string0);
      assertFalse(linkedHashSet0.contains(string0));
      
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDispon√≠veis2(loja2, voluntario0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(voluntario0.aceitoTransporteMedicamentos());
      assertEquals((-267), voluntario0.getAvaliacoes());
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(10.716104868913858, voluntario0.getClassificacao(), 0.01);
      assertEquals((-3378.5968351679), voluntario0.getLatitude(), 0.01);
      assertEquals("Total de Voluntarios: ", voluntario0.getCodigo());
      assertEquals("Voluntario", voluntario0.getTypeUser());
      assertEquals("Nome: ", voluntario0.getNome());
      assertEquals("Total de Voluntarios: ", voluntario0.getPassword());
      assertEquals("Nome: ", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", loja2.getCodigo());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getTypeUser());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getPassword());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getNome());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(loja0.equals((Object)loja2));
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(loja1.equals((Object)loja2));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.contains(voluntario0));
      assertFalse(linkedHashSet0.contains(string0));
      
      System.setCurrentTimeMillis(0);
      Utilizador utilizador1 = new Utilizador("Total de Voluntarios:  ---> Nome:  || RATE --> 10.716104868913858\n", "Password incorreta", "33@E<*qT7{q\"|z/3", "Total de Voluntarios: ", (-1.0), (-1.0), arrayList1);
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("Total de Voluntarios: ", utilizador1.getNome());
      assertEquals((-1.0), utilizador1.getLatitude(), 0.01);
      assertEquals("Password incorreta", utilizador1.getPassword());
      assertEquals("Total de Voluntarios:  ---> Nome:  || RATE --> 10.716104868913858\n", utilizador1.getEmail());
      assertEquals("33@E<*qT7{q\"|z/3", utilizador1.getCodigo());
      assertEquals((-1.0), utilizador1.getLongitude(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(loja0.equals((Object)loja2));
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(loja1.equals((Object)loja2));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(utilizador1);
      
      List<Voluntario> list2 = bDVoluntarios0.voluntariosDispon√≠veis(loja1, utilizador1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("Total de Voluntarios: ", utilizador1.getNome());
      assertEquals((-1.0), utilizador1.getLatitude(), 0.01);
      assertEquals("Password incorreta", utilizador1.getPassword());
      assertEquals("Total de Voluntarios:  ---> Nome:  || RATE --> 10.716104868913858\n", utilizador1.getEmail());
      assertEquals("33@E<*qT7{q\"|z/3", utilizador1.getCodigo());
      assertEquals((-1.0), utilizador1.getLongitude(), 0.01);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(loja0.equals((Object)loja2));
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(loja1.equals((Object)loja2));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(list2);
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(list2.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      boolean boolean0 = bDVoluntarios0.existeEnc(" ---> ");
      assertFalse(boolean0);
      
      LocalDate localDate0 = MockLocalDate.now();
      assertNotNull(localDate0);
      
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Voluntario voluntario0 = new Voluntario("xX!", "xX!", "", " ---> ", false, 2161.3142765, (-1544.417976), localDate0, 0.0, linkedList0, 809.0, 1895, false, 1895, 1895);
      assertEquals(0, linkedList0.size());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("xX!", voluntario0.getPassword());
      assertEquals("xX!", voluntario0.getEmail());
      assertEquals(" ---> ", voluntario0.getCodigo());
      assertEquals("Voluntario", voluntario0.getTypeUser());
      assertEquals(2161.3142765, voluntario0.getLatitude(), 0.01);
      assertEquals((-1544.417976), voluntario0.getLongitude(), 0.01);
      assertEquals(809.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(1895, voluntario0.getVelocidade());
      assertEquals(1895, voluntario0.getAvaliacoes());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(1895, voluntario0.getMinutosDeEspera());
      assertNotNull(voluntario0);
      
      bDVoluntarios0.updateVoluntario2(voluntario0);
      assertEquals(0, linkedList0.size());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("xX!", voluntario0.getPassword());
      assertEquals("xX!", voluntario0.getEmail());
      assertEquals(" ---> ", voluntario0.getCodigo());
      assertEquals("Voluntario", voluntario0.getTypeUser());
      assertEquals(2161.3142765, voluntario0.getLatitude(), 0.01);
      assertEquals((-1544.417976), voluntario0.getLongitude(), 0.01);
      assertEquals(809.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(1895, voluntario0.getVelocidade());
      assertEquals(1895, voluntario0.getAvaliacoes());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(1895, voluntario0.getMinutosDeEspera());
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertNotNull(utilizador0);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Loja loja0 = new Loja(" ---> ", "JXB)#hfZ~XXs<81zX", "xX!", " ---> ", (-2887.7639871436), (-113.5631), (-1.0), arrayList0, (-684));
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-113.5631), loja0.getLongitude(), 0.01);
      assertEquals((-2887.7639871436), loja0.getTempo_espera(), 0.01);
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals((-113.5631), loja0.getLatitude(), 0.01);
      assertEquals(" ---> ", loja0.getNome());
      assertEquals("xX!", loja0.getCodigo());
      assertEquals((-684), loja0.getNrPessoasEmFila());
      assertEquals("JXB)#hfZ~XXs<81zX", loja0.getPassword());
      assertEquals(" ---> ", loja0.getEmail());
      assertNotNull(loja0);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veisMed(loja0, utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-113.5631), loja0.getLongitude(), 0.01);
      assertEquals((-2887.7639871436), loja0.getTempo_espera(), 0.01);
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals((-113.5631), loja0.getLatitude(), 0.01);
      assertEquals(" ---> ", loja0.getNome());
      assertEquals("xX!", loja0.getCodigo());
      assertEquals((-684), loja0.getNrPessoasEmFila());
      assertEquals("JXB)#hfZ~XXs<81zX", loja0.getPassword());
      assertEquals(" ---> ", loja0.getEmail());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(voluntario0));
      
      boolean boolean1 = bDVoluntarios0.existeEmail((String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = bDVoluntarios0.equals((Object) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDispon√≠veis(loja0, utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-113.5631), loja0.getLongitude(), 0.01);
      assertEquals((-2887.7639871436), loja0.getTempo_espera(), 0.01);
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals((-113.5631), loja0.getLatitude(), 0.01);
      assertEquals(" ---> ", loja0.getNome());
      assertEquals("xX!", loja0.getCodigo());
      assertEquals((-684), loja0.getNrPessoasEmFila());
      assertEquals("JXB)#hfZ~XXs<81zX", loja0.getPassword());
      assertEquals(" ---> ", loja0.getEmail());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.contains(voluntario0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      String string0 = bDVoluntarios1.toString();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertEquals("Total de Voluntarios: \n{}", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(string0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelocidade());
      assertNotNull(voluntario0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      voluntario0.updateRate(double0);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelocidade());
      
      Loja loja0 = new Loja();
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertNotNull(loja0);
      
      bDVoluntarios1.updateVoluntario2(voluntario0);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      List<Voluntario> list0 = bDVoluntarios1.voluntariosDispon√≠veis2(loja0, voluntario0);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(list0);
      assertFalse(list0.contains(voluntario0));
      
      bDVoluntarios1.updateVoluntario(voluntario0, (-1114.92863));
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(2, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals((-557.464315), voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      String string1 = bDVoluntarios0.toString();
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("Total de Voluntarios: \n{}", string1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(string1);
      
      Set<String> set1 = bDVoluntarios1.getCodigos();
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.contains(string0));
      
      bDVoluntarios1.setCodigos(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string0));
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Utilizador utilizador0 = new Utilizador("Total de Voluntarios: \n{}", (String) null, "Total de Voluntarios: \n{}", "u}5U(_4", 1534.17544202656, 0.0, arrayList0);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1534.17544202656, utilizador0.getLatitude(), 0.01);
      assertNull(utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("u}5U(_4", utilizador0.getNome());
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getEmail());
      assertNotNull(utilizador0);
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getCodigo());
      assertEquals(1534.17544202656, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertNull(utilizador1.getPassword());
      assertEquals("u}5U(_4", utilizador1.getNome());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1534.17544202656, utilizador0.getLatitude(), 0.01);
      assertNull(utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("u}5U(_4", utilizador0.getNome());
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getEmail());
      assertNotNull(utilizador1);
      
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDispon√≠veis((Loja) null, utilizador1);
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador1.getCodigo());
      assertEquals(1534.17544202656, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertNull(utilizador1.getPassword());
      assertEquals("u}5U(_4", utilizador1.getNome());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1534.17544202656, utilizador0.getLatitude(), 0.01);
      assertNull(utilizador0.getPassword());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("u}5U(_4", utilizador0.getNome());
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: \n{}", utilizador0.getEmail());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(list1, list0);
      assertNotSame(utilizador0, utilizador1);
      assertNotNull(list1);
      assertFalse(list1.contains(voluntario0));
      
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("u}5U(_4", "Total de Voluntarios: \n{}");
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario1);
      
      Voluntario voluntario2 = bDVoluntarios0.tryLogin("", "$]<TBK^%tG7-_");
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario2);
      
      bDVoluntarios0.updateVoluntario(voluntario0, 1534.17544202656);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(3, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(139.74893734218662, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelocidade());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      
      Set<String> set2 = bDVoluntarios1.getCodigos();
      assertEquals(0, set2.size());
      assertTrue(set2.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set2.equals((Object)set0));
      assertTrue(set2.equals((Object)set1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set2, set0);
      assertNotSame(set2, set1);
      assertNotNull(set2);
      assertFalse(set2.contains("u}5U(_4"));
      
      Voluntario voluntario3 = bDVoluntarios0.tryLogin("u}5U(_4", "Total de Voluntarios: \n{}");
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario3);
      
      // Undeclared exception!
      try { 
        bDVoluntarios0.printVoluntarioLoja((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertNotNull(voluntario0);
      
      bDVoluntarios0.updateVoluntario2(voluntario0);
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      
      boolean boolean0 = bDVoluntarios0.existe(voluntario0);
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertTrue(boolean0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      bDVoluntarios0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(utilizador0);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        bDVoluntarios1.setCodigos((Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      bDVoluntarios0.setCodigos(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios();
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertNotNull(voluntario0);
      
      boolean boolean0 = bDVoluntarios1.existe(voluntario0);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals("", voluntario0.getNome());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(boolean0);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertNotNull(voluntario0);
      
      bDVoluntarios0.add(voluntario0);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      
      boolean boolean0 = bDVoluntarios0.existeEnc("");
      assertFalse(boolean0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertTrue(set0.contains(""));
      
      bDVoluntarios0.setCodigos(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(set0.contains(""));
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNotNull(map0);
      
      bDVoluntarios0.setCodigos(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(set0.contains(""));
      
      bDVoluntarios0.setCodigos(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(set0.contains(""));
      
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(bDVoluntarios1);
      
      boolean boolean1 = bDVoluntarios1.equals("-}");
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(utilizador0);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      BDVoluntarios bDVoluntarios2 = bDVoluntarios1.clone();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
      assertNotNull(bDVoluntarios2);
      
      String string0 = bDVoluntarios2.printVoluntario();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertEquals(" --->  || RATE --> 0.0\n", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        bDVoluntarios1.voluntariosDispon√≠veis2((Loja) null, voluntario0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(map0, set0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      boolean boolean0 = bDVoluntarios1.existeEmail("$1S$");
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(boolean0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertFalse(set0.contains("$1S$"));
      
      boolean boolean1 = bDVoluntarios1.existeEnc("dF%2eg#B]D{O9G1(");
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertFalse(set0.contains("$1S$"));
      
      Set<String> set1 = bDVoluntarios1.getCodigos();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(set0, set1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set0.contains("$1S$"));
      assertFalse(set1.contains("$1S$"));
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertNotNull(voluntario0);
      
      Voluntario voluntario1 = new Voluntario(voluntario0);
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario1.getVelocidade());
      assertEquals("", voluntario1.getEmail());
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals(0.0, voluntario1.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario1.getLatitude(), 0.01);
      assertEquals(0.0, voluntario1.getLongitude(), 0.01);
      assertEquals("", voluntario1.getTypeUser());
      assertEquals("", voluntario1.getNome());
      assertEquals("", voluntario1.getCodigo());
      assertEquals("", voluntario1.getPassword());
      assertEquals(0, voluntario1.getMinutosDeEspera());
      assertFalse(voluntario1.getDisponibilidade());
      assertTrue(voluntario1.equals((Object)voluntario0));
      assertNotNull(voluntario1);
      
      bDVoluntarios1.updateVoluntario(voluntario1, 0.0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario1.getVelocidade());
      assertEquals("", voluntario1.getEmail());
      assertEquals(1, voluntario1.getAvaliacoes());
      assertEquals(0.0, voluntario1.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario1.getLatitude(), 0.01);
      assertEquals(0.0, voluntario1.getLongitude(), 0.01);
      assertEquals("", voluntario1.getTypeUser());
      assertEquals("", voluntario1.getNome());
      assertEquals("", voluntario1.getCodigo());
      assertEquals("", voluntario1.getPassword());
      assertEquals(0, voluntario1.getMinutosDeEspera());
      assertFalse(voluntario1.getDisponibilidade());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(set0.equals((Object)set1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(voluntario0.equals((Object)voluntario1));
      assertTrue(voluntario1.equals((Object)voluntario0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(set0, set1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(voluntario0, voluntario1);
      assertNotSame(voluntario1, voluntario0);
      assertFalse(set0.contains("$1S$"));
      
      bDVoluntarios0.updateVoluntario2(voluntario0);
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(voluntario0.equals((Object)voluntario1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(voluntario0, voluntario1);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertNotNull(loja0);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veis2(loja0, voluntario0);
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(voluntario0.equals((Object)voluntario1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(voluntario0, voluntario1);
      assertNotNull(list0);
      assertFalse(list0.contains(voluntario1));
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja("h%", "", "Produto: ", "nyqi?)Ytx' o", 0.0, 0.0, 0.0, arrayList0, (-2667));
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("nyqi?)Ytx' o", loja1.getNome());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("Produto: ", loja1.getCodigo());
      assertEquals("h%", loja1.getEmail());
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals((-2667), loja1.getNrPessoasEmFila());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertFalse(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      Utilizador utilizador0 = new Utilizador("$1S$", "Registos de encomendas: ", "b5", (String) null, 3378.5968351679, 0.0, arrayList0);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(3378.5968351679, utilizador0.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("b5", utilizador0.getCodigo());
      assertEquals("$1S$", utilizador0.getEmail());
      assertEquals("Registos de encomendas: ", utilizador0.getPassword());
      assertNull(utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertFalse(loja0.equals((Object)loja1));
      assertNotNull(utilizador0);
      
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDispon√≠veis(loja1, utilizador0);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("nyqi?)Ytx' o", loja1.getNome());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("Produto: ", loja1.getCodigo());
      assertEquals("h%", loja1.getEmail());
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals((-2667), loja1.getNrPessoasEmFila());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(3378.5968351679, utilizador0.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("b5", utilizador0.getCodigo());
      assertEquals("$1S$", utilizador0.getEmail());
      assertEquals("Registos de encomendas: ", utilizador0.getPassword());
      assertNull(utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(list1.equals((Object)list0));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertNotSame(list1, list0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotNull(list1);
      assertFalse(list1.contains(voluntario1));
      
      try { 
        bDVoluntarios0.encontraEnc("nyqi?)Ytx' o");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(map0, linkedHashSet0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertNotNull(voluntario0);
      
      String string0 = bDVoluntarios1.toString();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertEquals("Total de Voluntarios: \n{}", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(string0);
      assertFalse(linkedHashSet0.contains(string0));
      
      bDVoluntarios1.setCodigos(linkedHashSet0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertFalse(linkedHashSet0.contains(string0));
      
      bDVoluntarios1.add(voluntario0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertFalse(linkedHashSet0.contains(string0));
      
      String string1 = bDVoluntarios0.printVoluntario();
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(string1);
      
      bDVoluntarios0.updateVoluntario2(voluntario0);
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getTypeUser());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("", ">ueqoJx^XxQl");
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario1);
      
      // Undeclared exception!
      try { 
        bDVoluntarios0.updateVoluntario2((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertNotNull(voluntario0);
      
      bDVoluntarios0.updateVoluntario2(voluntario0);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      
      Set<String> set1 = bDVoluntarios0.getCodigos();
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertNotNull(set1);
      
      String string0 = bDVoluntarios0.printVoluntario();
      assertEquals(" --->  || RATE --> 0.0\n", string0);
      assertNotNull(string0);
      
      bDVoluntarios0.setCodigos(set1);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string0));
      
      double double0 = 0.0;
      bDVoluntarios0.updateVoluntario(voluntario0, 0.0);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      
      boolean boolean0 = bDVoluntarios0.existeEnc((String) null);
      assertFalse(boolean0);
      
      Voluntario voluntario1 = bDVoluntarios0.tryLogin((String) null, "");
      assertNull(voluntario1);
      
      boolean boolean1 = bDVoluntarios0.existeEnc((String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        bDVoluntarios0.encontraEnc((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      Voluntario voluntario0 = new Voluntario();
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertNotNull(voluntario0);
      
      double double0 = 2498.9148682785;
      bDVoluntarios1.updateVoluntario(voluntario0, 2498.9148682785);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(2498.9148682785, voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      Loja loja0 = null;
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertNotNull(utilizador0);
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getTypeUser());
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotNull(utilizador1);
      
      // Undeclared exception!
      try { 
        bDVoluntarios1.voluntariosDispon√≠veisMed((Loja) null, utilizador1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>(517);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      Set<String> set0 = bDVoluntarios1.getCodigos();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(set0);
      
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(hashMap0, set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios2);
      
      boolean boolean0 = bDVoluntarios2.equals(bDVoluntarios1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(boolean0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertNotNull(voluntario0);
      
      voluntario0.setLongitude(0.0);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      
      voluntario0.setRaio_acao(0.0);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      
      bDVoluntarios0.updateVoluntario(voluntario0, 0.0);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      
      String string0 = bDVoluntarios0.getEmail("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      bDVoluntarios0.setCodigos(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      
      boolean boolean0 = bDVoluntarios0.existeEnc("");
      assertFalse(boolean0);
      
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(bDVoluntarios1);
      
      bDVoluntarios0.updateVoluntario2(voluntario0);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja("N\u00E3o existe esse volunt\u00E1rio", "", (String) null, (String) null, 0.0, 0.0, 0.0, arrayList0, 0);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja1.getEmail());
      assertNull(loja1.getNome());
      assertEquals("Loja", loja1.getTypeUser());
      assertNull(loja1.getCodigo());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertFalse(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veis2(loja1, voluntario0);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja1.getEmail());
      assertNull(loja1.getNome());
      assertEquals("Loja", loja1.getTypeUser());
      assertNull(loja1.getCodigo());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotNull(list0);
      assertFalse(list0.contains(voluntario0));
      
      Set<String> set1 = bDVoluntarios1.getCodigos();
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertNotNull(set1);
      assertFalse(set1.contains(""));
      
      boolean boolean1 = bDVoluntarios0.existeEnc("");
      assertTrue(boolean1 == boolean0);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(boolean1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(map0);
      
      boolean boolean2 = bDVoluntarios1.existeEnc("^DS~#FaUZ");
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(boolean2);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      List<Voluntario> list1 = bDVoluntarios1.voluntariosDispon√≠veis2(loja0, voluntario0);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(loja0.equals((Object)loja1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(list1, list0);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(loja0, loja1);
      assertNotNull(list1);
      assertFalse(list1.contains(voluntario0));
      
      bDVoluntarios0.updateVoluntario(voluntario0, 0.0);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(2, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      
      bDVoluntarios1.setVoluntarios(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios2 = bDVoluntarios1.clone();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotNull(bDVoluntarios2);
      
      boolean boolean3 = bDVoluntarios0.existe(voluntario0);
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(2, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertNotNull(voluntario0);
      
      bDVoluntarios0.add(voluntario0);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      
      boolean boolean0 = bDVoluntarios0.existeEnc("");
      assertFalse(boolean0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertTrue(set0.contains(""));
      
      bDVoluntarios0.setCodigos(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(set0.contains(""));
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      bDVoluntarios0.setCodigos(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(set0.contains(""));
      
      bDVoluntarios0.setCodigos(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(set0.contains(""));
      
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(bDVoluntarios1);
      
      bDVoluntarios0.setCodigos(set0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertTrue(set0.contains(""));
      
      boolean boolean1 = bDVoluntarios1.equals("-}");
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(utilizador0);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja0 = new Loja("-}", "V~#?;<D [!4K^|Uvd", "PHxtQi", "-}", 2638.6979, 2638.6979, (-1.0), arrayList0, 1852);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2638.6979, loja0.getLatitude(), 0.01);
      assertEquals("PHxtQi", loja0.getCodigo());
      assertEquals("-}", loja0.getNome());
      assertEquals(1852, loja0.getNrPessoasEmFila());
      assertEquals("V~#?;<D [!4K^|Uvd", loja0.getPassword());
      assertEquals(2638.6979, loja0.getTempo_espera(), 0.01);
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(2638.6979, loja0.getLongitude(), 0.01);
      assertEquals("-}", loja0.getEmail());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList1 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2638.6979, loja0.getLatitude(), 0.01);
      assertEquals("PHxtQi", loja0.getCodigo());
      assertEquals("-}", loja0.getNome());
      assertEquals(1852, loja0.getNrPessoasEmFila());
      assertEquals("V~#?;<D [!4K^|Uvd", loja0.getPassword());
      assertEquals(2638.6979, loja0.getTempo_espera(), 0.01);
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(2638.6979, loja0.getLongitude(), 0.01);
      assertEquals("-}", loja0.getEmail());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      
      Utilizador utilizador1 = new Utilizador("PHxtQi", "-}", "V~#?;<D [!4K^|Uvd", "-}", 2638.6979, 2638.6979, arrayList1);
      assertEquals(2638.6979, utilizador1.getLatitude(), 0.01);
      assertEquals("PHxtQi", utilizador1.getEmail());
      assertEquals(2638.6979, utilizador1.getLongitude(), 0.01);
      assertEquals("-}", utilizador1.getPassword());
      assertEquals("V~#?;<D [!4K^|Uvd", utilizador1.getCodigo());
      assertEquals("-}", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2638.6979, loja0.getLatitude(), 0.01);
      assertEquals("PHxtQi", loja0.getCodigo());
      assertEquals("-}", loja0.getNome());
      assertEquals(1852, loja0.getNrPessoasEmFila());
      assertEquals("V~#?;<D [!4K^|Uvd", loja0.getPassword());
      assertEquals(2638.6979, loja0.getTempo_espera(), 0.01);
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(2638.6979, loja0.getLongitude(), 0.01);
      assertEquals("-}", loja0.getEmail());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(utilizador1);
      
      Utilizador utilizador2 = new Utilizador(utilizador1);
      assertEquals(2638.6979, utilizador1.getLatitude(), 0.01);
      assertEquals("PHxtQi", utilizador1.getEmail());
      assertEquals(2638.6979, utilizador1.getLongitude(), 0.01);
      assertEquals("-}", utilizador1.getPassword());
      assertEquals("V~#?;<D [!4K^|Uvd", utilizador1.getCodigo());
      assertEquals("-}", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("PHxtQi", utilizador2.getEmail());
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("-}", utilizador2.getPassword());
      assertEquals("-}", utilizador2.getNome());
      assertEquals(2638.6979, utilizador2.getLongitude(), 0.01);
      assertEquals("V~#?;<D [!4K^|Uvd", utilizador2.getCodigo());
      assertEquals(2638.6979, utilizador2.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(2638.6979, loja0.getLatitude(), 0.01);
      assertEquals("PHxtQi", loja0.getCodigo());
      assertEquals("-}", loja0.getNome());
      assertEquals(1852, loja0.getNrPessoasEmFila());
      assertEquals("V~#?;<D [!4K^|Uvd", loja0.getPassword());
      assertEquals(2638.6979, loja0.getTempo_espera(), 0.01);
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(2638.6979, loja0.getLongitude(), 0.01);
      assertEquals("-}", loja0.getEmail());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(utilizador2);
      
      // Undeclared exception!
      try { 
        bDVoluntarios1.voluntariosDispon√≠veis((Loja) null, utilizador2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      String string0 = bDVoluntarios1.toString();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertEquals("Total de Voluntarios: \n{}", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        bDVoluntarios0.setVoluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      boolean boolean0 = bDVoluntarios0.equals((Object) null);
      assertFalse(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      bDVoluntarios0.setCodigos(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean1 = linkedHashSet0.add("\u0002>.]");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains("\u0002>.]"));
      
      bDVoluntarios0.setCodigos(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("\u0002>.]"));
      
      boolean boolean2 = bDVoluntarios0.equals(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(linkedHashSet0.contains("\u0002>.]"));
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertNotNull(voluntario0);
      
      bDVoluntarios0.add(voluntario0);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getNome());
      
      try { 
        bDVoluntarios0.encontraEnc("\u0002>.]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getNome());
      assertNotNull(voluntario0);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      bDVoluntarios0.updateVoluntario(voluntario0, 0.0);
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getTypeUser());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getNome());
      
      String string0 = bDVoluntarios0.toString();
      assertNotNull(string0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      bDVoluntarios0.setCodigos(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("LEtVA7>pEyb<Kx", "ENCOMENDAS REALIZADAS PELO USER: ");
      assertNull(voluntario1);
      
      // Undeclared exception!
      try { 
        MockLocalDateTime.parse((CharSequence) "ENCOMENDAS REALIZADAS PELO USER: ");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'ENCOMENDAS REALIZADAS PELO USER: ' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(hashMap0, set0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      Set<String> set1 = bDVoluntarios1.getCodigos();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(set0, set1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertNotNull(set1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      String string0 = "I)^_V@.6]^<_u.sdY";
      Voluntario voluntario0 = bDVoluntarios0.tryLogin("I)^_V@.6]^<_u.sdY", "I)^_V@.6]^<_u.sdY");
      assertNull(voluntario0);
      
      String string1 = "1T\\($";
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("1T($", "A]Jk!Zy2LV/_U,>*y");
      assertNull(voluntario1);
      
      boolean boolean0 = bDVoluntarios0.existeEmail("C\u00F3digo do utilizador: ");
      assertFalse(boolean0);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      bDVoluntarios0.setVoluntarios(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja("A]Jk!Zy2LV/_U,>*y", "f$l[U%(R1", "N}AOK", "C\u00F3digo do utilizador: ", 104.30312966, 104.30312966, 0.0, arrayList0, 831);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("A]Jk!Zy2LV/_U,>*y", loja1.getEmail());
      assertEquals("f$l[U%(R1", loja1.getPassword());
      assertEquals(104.30312966, loja1.getLatitude(), 0.01);
      assertEquals("N}AOK", loja1.getCodigo());
      assertEquals(831, loja1.getNrPessoasEmFila());
      assertEquals(104.30312966, loja1.getTempo_espera(), 0.01);
      assertEquals("C\u00F3digo do utilizador: ", loja1.getNome());
      assertEquals(104.30312966, loja1.getLongitude(), 0.01);
      assertEquals("Loja", loja1.getTypeUser());
      assertFalse(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      Loja loja2 = new Loja(loja1);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("A]Jk!Zy2LV/_U,>*y", loja1.getEmail());
      assertEquals("f$l[U%(R1", loja1.getPassword());
      assertEquals(104.30312966, loja1.getLatitude(), 0.01);
      assertEquals("N}AOK", loja1.getCodigo());
      assertEquals(831, loja1.getNrPessoasEmFila());
      assertEquals(104.30312966, loja1.getTempo_espera(), 0.01);
      assertEquals("C\u00F3digo do utilizador: ", loja1.getNome());
      assertEquals(104.30312966, loja1.getLongitude(), 0.01);
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(104.30312966, loja2.getTempo_espera(), 0.01);
      assertEquals("Loja", loja2.getTypeUser());
      assertEquals("A]Jk!Zy2LV/_U,>*y", loja2.getEmail());
      assertEquals("C\u00F3digo do utilizador: ", loja2.getNome());
      assertEquals(104.30312966, loja2.getLongitude(), 0.01);
      assertEquals(104.30312966, loja2.getLatitude(), 0.01);
      assertEquals("N}AOK", loja2.getCodigo());
      assertEquals(831, loja2.getNrPessoasEmFila());
      assertEquals("f$l[U%(R1", loja2.getPassword());
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertNotNull(loja2);
      
      loja1.setCodigo("C\u00F3digo do utilizador: ");
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("A]Jk!Zy2LV/_U,>*y", loja1.getEmail());
      assertEquals("f$l[U%(R1", loja1.getPassword());
      assertEquals(104.30312966, loja1.getLatitude(), 0.01);
      assertEquals(831, loja1.getNrPessoasEmFila());
      assertEquals(104.30312966, loja1.getTempo_espera(), 0.01);
      assertEquals("C\u00F3digo do utilizador: ", loja1.getCodigo());
      assertEquals("C\u00F3digo do utilizador: ", loja1.getNome());
      assertEquals(104.30312966, loja1.getLongitude(), 0.01);
      assertEquals("Loja", loja1.getTypeUser());
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(loja1.equals((Object)loja2));
      assertFalse(loja1.equals((Object)loja0));
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(utilizador0);
      
      ArrayList<Encomenda> arrayList1 = utilizador0.getEncomendas();
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veis(loja2, utilizador0);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("A]Jk!Zy2LV/_U,>*y", loja1.getEmail());
      assertEquals("f$l[U%(R1", loja1.getPassword());
      assertEquals(104.30312966, loja1.getLatitude(), 0.01);
      assertEquals(831, loja1.getNrPessoasEmFila());
      assertEquals(104.30312966, loja1.getTempo_espera(), 0.01);
      assertEquals("C\u00F3digo do utilizador: ", loja1.getCodigo());
      assertEquals("C\u00F3digo do utilizador: ", loja1.getNome());
      assertEquals(104.30312966, loja1.getLongitude(), 0.01);
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(104.30312966, loja2.getTempo_espera(), 0.01);
      assertEquals("Loja", loja2.getTypeUser());
      assertEquals("A]Jk!Zy2LV/_U,>*y", loja2.getEmail());
      assertEquals("C\u00F3digo do utilizador: ", loja2.getNome());
      assertEquals(104.30312966, loja2.getLongitude(), 0.01);
      assertEquals(104.30312966, loja2.getLatitude(), 0.01);
      assertEquals("N}AOK", loja2.getCodigo());
      assertEquals(831, loja2.getNrPessoasEmFila());
      assertEquals("f$l[U%(R1", loja2.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja0.equals((Object)loja2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(loja1.equals((Object)loja2));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertFalse(loja2.equals((Object)loja0));
      assertNotSame(loja0, loja1);
      assertNotSame(loja0, loja2);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        bDVoluntarios0.updateVoluntario2((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Set<String> set0 = new LinkedHashSet<String>();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios();
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(bDVoluntarios1);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertNotNull(bDVoluntarios2);
      
      String string0 = bDVoluntarios0.toString();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertEquals("Total de Voluntarios: \n{}", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, linkedHashSet0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(bDVoluntarios0);
      
      boolean boolean0 = linkedHashSet0.add("");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(""));
      
      boolean boolean1 = bDVoluntarios0.equals("");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedHashSet0.contains(""));
      
      Loja loja0 = new Loja();
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertNotNull(loja0);
      
      Voluntario voluntario0 = bDVoluntarios0.tryLogin("", "<g8");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertNull(voluntario0);
      assertFalse(linkedHashSet0.contains("<g8"));
      assertTrue(linkedHashSet0.contains(""));
      
      Loja loja1 = new Loja(loja0);
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getTypeUser());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertTrue(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      Loja loja2 = loja1.clone();
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getTypeUser());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      assertNotNull(loja2);
      
      Voluntario voluntario1 = new Voluntario();
      assertEquals("", voluntario1.getNome());
      assertEquals("", voluntario1.getPassword());
      assertEquals("", voluntario1.getTypeUser());
      assertEquals(0.0, voluntario1.getLongitude(), 0.01);
      assertEquals(0.0, voluntario1.getLatitude(), 0.01);
      assertEquals("", voluntario1.getEmail());
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals(0.0, voluntario1.getClassificacao(), 0.01);
      assertEquals("", voluntario1.getCodigo());
      assertEquals(0, voluntario1.getVelocidade());
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      assertFalse(voluntario1.getDisponibilidade());
      assertEquals(0, voluntario1.getMinutosDeEspera());
      assertNotNull(voluntario1);
      
      loja2.setPassword("");
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getTypeUser());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertTrue(loja0.equals((Object)loja2));
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja0));
      assertTrue(loja1.equals((Object)loja2));
      assertTrue(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      
      boolean boolean2 = linkedHashSet0.add("");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(linkedHashSet0.contains("<g8"));
      assertTrue(linkedHashSet0.contains(""));
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veis2(loja1, voluntario1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getTypeUser());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertEquals("", voluntario1.getNome());
      assertEquals("", voluntario1.getPassword());
      assertEquals("", voluntario1.getTypeUser());
      assertEquals(0.0, voluntario1.getLongitude(), 0.01);
      assertEquals(0.0, voluntario1.getLatitude(), 0.01);
      assertEquals("", voluntario1.getEmail());
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals(0.0, voluntario1.getClassificacao(), 0.01);
      assertEquals("", voluntario1.getCodigo());
      assertEquals(0, voluntario1.getVelocidade());
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      assertFalse(voluntario1.getDisponibilidade());
      assertEquals(0, voluntario1.getMinutosDeEspera());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(loja0.equals((Object)loja2));
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja0));
      assertTrue(loja1.equals((Object)loja2));
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotNull(list0);
      assertFalse(linkedHashSet0.contains("<g8"));
      assertTrue(linkedHashSet0.contains(""));
      assertFalse(list0.contains(voluntario1));
      
      bDVoluntarios0.setCodigos(linkedHashSet0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("<g8"));
      assertTrue(linkedHashSet0.contains(""));
      
      bDVoluntarios0.setCodigos(linkedHashSet0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("<g8"));
      assertTrue(linkedHashSet0.contains(""));
      
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(bDVoluntarios1);
      assertFalse(linkedHashSet0.contains("<g8"));
      assertTrue(linkedHashSet0.contains(""));
      
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDispon√≠veis2(loja2, voluntario1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getTypeUser());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getPassword());
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getEmail());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getTypeUser());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals("", voluntario1.getNome());
      assertEquals("", voluntario1.getPassword());
      assertEquals("", voluntario1.getTypeUser());
      assertEquals(0.0, voluntario1.getLongitude(), 0.01);
      assertEquals(0.0, voluntario1.getLatitude(), 0.01);
      assertEquals("", voluntario1.getEmail());
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals(0.0, voluntario1.getClassificacao(), 0.01);
      assertEquals("", voluntario1.getCodigo());
      assertEquals(0, voluntario1.getVelocidade());
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      assertFalse(voluntario1.getDisponibilidade());
      assertEquals(0, voluntario1.getMinutosDeEspera());
      assertTrue(list1.equals((Object)list0));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(loja0.equals((Object)loja2));
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja0));
      assertTrue(loja1.equals((Object)loja2));
      assertTrue(loja2.equals((Object)loja1));
      assertTrue(loja2.equals((Object)loja0));
      assertNotSame(list1, list0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      assertNotNull(list1);
      assertFalse(list1.contains(voluntario1));
      assertFalse(linkedHashSet0.contains("<g8"));
      assertTrue(linkedHashSet0.contains(""));
      
      bDVoluntarios1.setVoluntarios(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertFalse(linkedHashSet0.contains("<g8"));
      assertTrue(linkedHashSet0.contains(""));
      
      Voluntario voluntario2 = hashMap0.put("", voluntario1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", voluntario1.getNome());
      assertEquals("", voluntario1.getPassword());
      assertEquals("", voluntario1.getTypeUser());
      assertEquals(0.0, voluntario1.getLongitude(), 0.01);
      assertEquals(0.0, voluntario1.getLatitude(), 0.01);
      assertEquals("", voluntario1.getEmail());
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals(0.0, voluntario1.getClassificacao(), 0.01);
      assertEquals("", voluntario1.getCodigo());
      assertEquals(0, voluntario1.getVelocidade());
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      assertFalse(voluntario1.getDisponibilidade());
      assertEquals(0, voluntario1.getMinutosDeEspera());
      assertNull(voluntario2);
      
      bDVoluntarios1.setVoluntarios(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertFalse(linkedHashSet0.contains("<g8"));
      assertTrue(linkedHashSet0.contains(""));
      
      int int0 = voluntario1.calculaAtrasos();
      assertEquals("", voluntario1.getNome());
      assertEquals("", voluntario1.getPassword());
      assertEquals("", voluntario1.getTypeUser());
      assertEquals(0.0, voluntario1.getLongitude(), 0.01);
      assertEquals(0.0, voluntario1.getLatitude(), 0.01);
      assertEquals("", voluntario1.getEmail());
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals(0.0, voluntario1.getClassificacao(), 0.01);
      assertEquals("", voluntario1.getCodigo());
      assertEquals(0, voluntario1.getVelocidade());
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      assertFalse(voluntario1.getDisponibilidade());
      assertEquals(0, voluntario1.getMinutosDeEspera());
      assertEquals(0, int0);
      
      String string0 = bDVoluntarios1.getEmail("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertEquals("", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(string0);
      assertFalse(linkedHashSet0.contains("<g8"));
      assertTrue(linkedHashSet0.contains(string0));
      
      boolean boolean3 = bDVoluntarios0.existe(voluntario1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("", voluntario1.getNome());
      assertEquals("", voluntario1.getPassword());
      assertEquals("", voluntario1.getTypeUser());
      assertEquals(0.0, voluntario1.getLongitude(), 0.01);
      assertEquals(0.0, voluntario1.getLatitude(), 0.01);
      assertEquals("", voluntario1.getEmail());
      assertFalse(voluntario1.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario1.getAvaliacoes());
      assertEquals(0.0, voluntario1.getClassificacao(), 0.01);
      assertEquals("", voluntario1.getCodigo());
      assertEquals(0, voluntario1.getVelocidade());
      assertEquals(0.0, voluntario1.getRaio_acao(), 0.01);
      assertFalse(voluntario1.getDisponibilidade());
      assertEquals(0, voluntario1.getMinutosDeEspera());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertFalse(linkedHashSet0.contains("<g8"));
      assertTrue(linkedHashSet0.contains(string0));
      
      Voluntario voluntario3 = bDVoluntarios0.tryLogin((String) null, "p7I%");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario3);
      assertFalse(linkedHashSet0.contains("p7I%"));
      assertTrue(linkedHashSet0.contains(string0));
      
      boolean boolean4 = bDVoluntarios0.existeCodigo((String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertFalse(linkedHashSet0.contains("p7I%"));
      assertTrue(linkedHashSet0.contains(string0));
      
      String string1 = bDVoluntarios0.printVoluntarioLoja(loja1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getTypeUser());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getPassword());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getEmail());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(loja0.equals((Object)loja2));
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja0));
      assertTrue(loja1.equals((Object)loja2));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotNull(string1);
      assertFalse(linkedHashSet0.contains("p7I%"));
      assertTrue(linkedHashSet0.contains(string0));
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(utilizador0);
      
      List<Voluntario> list2 = bDVoluntarios1.voluntariosDispon√≠veisMed(loja0, utilizador0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals("", loja0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(loja0.equals((Object)loja2));
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(list2);
      assertFalse(linkedHashSet0.contains("p7I%"));
      assertTrue(linkedHashSet0.contains(string0));
      assertFalse(list2.contains(voluntario1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertNotNull(utilizador0);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Utilizador utilizador1 = new Utilizador("", "N\u00E3o existe esse volunt\u00E1rio", "", "", 0.0, 616.025819, arrayList0);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(616.025819, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getCodigo());
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertNotNull(utilizador1);
      
      Utilizador utilizador2 = new Utilizador(utilizador1);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(616.025819, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getCodigo());
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals(616.025819, utilizador2.getLongitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", utilizador2.getPassword());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertNotNull(utilizador2);
      
      ArrayList<Encomenda> arrayList1 = utilizador2.getEncomendas();
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(616.025819, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getCodigo());
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals(616.025819, utilizador2.getLongitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", utilizador2.getPassword());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      
      Loja loja0 = new Loja("", "N\u00E3o existe esse volunt\u00E1rio", "N\u00E3o existe esse volunt\u00E1rio", "N\u00E3o existe esse volunt\u00E1rio", 616.025819, 0.0, 0.0, arrayList1, 0);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(616.025819, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getCodigo());
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals(616.025819, utilizador2.getLongitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", utilizador2.getPassword());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja0.getNome());
      assertEquals(616.025819, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja0.getPassword());
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja0.getCodigo());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(loja0);
      
      String string0 = bDVoluntarios0.printVoluntarioLoja(loja0);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(616.025819, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getCodigo());
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals(616.025819, utilizador2.getLongitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", utilizador2.getPassword());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja0.getNome());
      assertEquals(616.025819, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja0.getPassword());
      assertEquals("N\u00E3o existe esse volunt\u00E1rio", loja0.getCodigo());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals("", string0);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(string0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getNome());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertNotNull(voluntario0);
      
      bDVoluntarios0.add(voluntario0);
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getNome());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      
      boolean boolean0 = bDVoluntarios0.equals(voluntario0);
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getNome());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertFalse(boolean0);
      
      String string1 = bDVoluntarios0.getEmail("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      Map<String, Voluntario> map0 = bDVoluntarios1.getVoluntarios();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(map0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(set0);
      
      Loja loja0 = new Loja();
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertNotNull(loja0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertNotNull(voluntario0);
      
      List<Voluntario> list0 = bDVoluntarios1.voluntariosDispon√≠veis2(loja0, voluntario0);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getNome());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(list0);
      assertFalse(list0.contains(voluntario0));
      
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(map0, set0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertNotNull(bDVoluntarios2);
      
      Set<String> set1 = bDVoluntarios2.getCodigos();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(set1.equals((Object)set0));
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(set0, set1);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
      assertNotSame(set1, set0);
      assertNotNull(set1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      boolean boolean0 = bDVoluntarios0.existeCodigo(" lojas");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Set<Map.Entry<String, Voluntario>> set0 = (Set<Map.Entry<String, Voluntario>>)hashMap0.entrySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, linkedHashSet0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(bDVoluntarios0);
      
      String string0 = bDVoluntarios0.printVoluntario();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(linkedHashSet0.contains(string0));
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      assertFalse(linkedHashSet0.contains(string0));
      
      Loja loja0 = new Loja();
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertNotNull(loja0);
      
      Loja loja1 = new Loja(loja0);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getEmail());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertTrue(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      String string1 = bDVoluntarios1.printVoluntarioLoja(loja1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja1.getCodigo());
      assertEquals("", loja1.getNome());
      assertEquals("", loja1.getEmail());
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("", loja1.getPassword());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("", loja1.getTypeUser());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja0);
      assertNotNull(string1);
      assertFalse(linkedHashSet0.contains(string0));
      
      String string2 = null;
      try { 
        bDVoluntarios1.encontraEnc((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja("qGw`,=-Ubwy*t{xmWwN", "qGw`,=-Ubwy*t{xmWwN", "qGw`,=-Ubwy*t{xmWwN", "qGw`,=-Ubwy*t{xmWwN", 1734.0, 0.0, (-1.0), arrayList0, 0);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals(1734.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getCodigo());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getNome());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getEmail());
      assertFalse(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      Loja loja2 = new Loja(loja1);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals(1734.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getCodigo());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getNome());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getEmail());
      assertEquals(1734.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja2.getNome());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja2.getCodigo());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja2.getEmail());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja2.getPassword());
      assertEquals("Loja", loja2.getTypeUser());
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertNotNull(loja2);
      
      String string0 = bDVoluntarios1.printVoluntarioLoja(loja2);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getCodigo());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, loja1.getLongitude(), 0.01);
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals(1734.0, loja1.getTempo_espera(), 0.01);
      assertEquals(0.0, loja1.getLatitude(), 0.01);
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getCodigo());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getNome());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja1.getEmail());
      assertEquals(1734.0, loja2.getTempo_espera(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja2.getNome());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja2.getCodigo());
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja2.getEmail());
      assertEquals("qGw`,=-Ubwy*t{xmWwN", loja2.getPassword());
      assertEquals("Loja", loja2.getTypeUser());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(loja0.equals((Object)loja2));
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(loja1.equals((Object)loja2));
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertEquals("", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja2);
      assertNotSame(loja1, loja0);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, linkedHashSet0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(hashMap0, linkedHashSet0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(utilizador0);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veisMed((Loja) null, utilizador0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotNull(list0);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja0 = new Loja("", "", "{X_KcW\"td", "{X_KcW\"td", (-1605.304625636235), 0.0, (-1605.304625636235), arrayList0, 0);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("{X_KcW\"td", loja0.getNome());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals((-1605.304625636235), loja0.getTempo_espera(), 0.01);
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals("{X_KcW\"td", loja0.getCodigo());
      assertEquals("", loja0.getEmail());
      assertNotNull(loja0);
      
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDispon√≠veis(loja0, utilizador0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("{X_KcW\"td", loja0.getNome());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals((-1605.304625636235), loja0.getTempo_espera(), 0.01);
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals("{X_KcW\"td", loja0.getCodigo());
      assertEquals("", loja0.getEmail());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(linkedHashSet0.contains(""));
      
      Voluntario voluntario0 = bDVoluntarios1.tryLogin("{X_KcW\"td", (String) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNull(voluntario0);
      assertFalse(linkedHashSet0.contains(""));
      
      // Undeclared exception!
      try { 
        bDVoluntarios0.add((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      BDVoluntarios bDVoluntarios2 = new BDVoluntarios(bDVoluntarios1);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertNotNull(bDVoluntarios2);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotNull(map0);
      
      Map<String, Voluntario> map1 = bDVoluntarios1.getVoluntarios();
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios2));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios2));
      assertTrue(map1.equals((Object)map0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios2);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotSame(map1, map0);
      assertNotNull(map1);
      
      // Undeclared exception!
      try { 
        bDVoluntarios2.existe((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Voluntario voluntario0 = bDVoluntarios0.tryLogin("'W`e`zj,q*7l", "C\u00F3digo de volunt\u00E1rio: ");
      assertNull(voluntario0);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Utilizador utilizador0 = new Utilizador("'W`e`zj,q*7l", "h!A;2:9", "h!A;2:9", "/", (-872.0), (-872.0), arrayList0);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("h!A;2:9", utilizador0.getPassword());
      assertEquals("h!A;2:9", utilizador0.getCodigo());
      assertEquals("'W`e`zj,q*7l", utilizador0.getEmail());
      assertEquals((-872.0), utilizador0.getLatitude(), 0.01);
      assertEquals("/", utilizador0.getNome());
      assertEquals((-872.0), utilizador0.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertNotNull(utilizador0);
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("h!A;2:9", utilizador0.getPassword());
      assertEquals("h!A;2:9", utilizador0.getCodigo());
      assertEquals("'W`e`zj,q*7l", utilizador0.getEmail());
      assertEquals((-872.0), utilizador0.getLatitude(), 0.01);
      assertEquals("/", utilizador0.getNome());
      assertEquals((-872.0), utilizador0.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("h!A;2:9", utilizador1.getPassword());
      assertEquals("h!A;2:9", utilizador1.getCodigo());
      assertEquals((-872.0), utilizador1.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals((-872.0), utilizador1.getLatitude(), 0.01);
      assertEquals("/", utilizador1.getNome());
      assertEquals("'W`e`zj,q*7l", utilizador1.getEmail());
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotNull(utilizador1);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veisMed(loja0, utilizador1);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getCodigo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("h!A;2:9", utilizador0.getPassword());
      assertEquals("h!A;2:9", utilizador0.getCodigo());
      assertEquals("'W`e`zj,q*7l", utilizador0.getEmail());
      assertEquals((-872.0), utilizador0.getLatitude(), 0.01);
      assertEquals("/", utilizador0.getNome());
      assertEquals((-872.0), utilizador0.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("h!A;2:9", utilizador1.getPassword());
      assertEquals("h!A;2:9", utilizador1.getCodigo());
      assertEquals((-872.0), utilizador1.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals((-872.0), utilizador1.getLatitude(), 0.01);
      assertEquals("/", utilizador1.getNome());
      assertEquals("'W`e`zj,q*7l", utilizador1.getEmail());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Loja loja0 = new Loja();
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja("ULe2>r2l", " e ", "#qbcX%0y", " e ", (-1102.2472354482), 2588.0062243169277, 2588.0062243169277, arrayList0, 0);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("#qbcX%0y", loja1.getCodigo());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(" e ", loja1.getNome());
      assertEquals("ULe2>r2l", loja1.getEmail());
      assertEquals((-1102.2472354482), loja1.getTempo_espera(), 0.01);
      assertEquals(" e ", loja1.getPassword());
      assertEquals(2588.0062243169277, loja1.getLatitude(), 0.01);
      assertEquals(2588.0062243169277, loja1.getLongitude(), 0.01);
      assertFalse(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      Loja loja2 = new Loja(loja1);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("#qbcX%0y", loja1.getCodigo());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(" e ", loja1.getNome());
      assertEquals("ULe2>r2l", loja1.getEmail());
      assertEquals((-1102.2472354482), loja1.getTempo_espera(), 0.01);
      assertEquals(" e ", loja1.getPassword());
      assertEquals(2588.0062243169277, loja1.getLatitude(), 0.01);
      assertEquals(2588.0062243169277, loja1.getLongitude(), 0.01);
      assertEquals(2588.0062243169277, loja2.getLongitude(), 0.01);
      assertEquals((-1102.2472354482), loja2.getTempo_espera(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("ULe2>r2l", loja2.getEmail());
      assertEquals(2588.0062243169277, loja2.getLatitude(), 0.01);
      assertEquals(" e ", loja2.getPassword());
      assertEquals(" e ", loja2.getNome());
      assertEquals("#qbcX%0y", loja2.getCodigo());
      assertEquals("Loja", loja2.getTypeUser());
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertNotNull(loja2);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertNotNull(utilizador0);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veis(loja2, utilizador0);
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals("#qbcX%0y", loja1.getCodigo());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals(" e ", loja1.getNome());
      assertEquals("ULe2>r2l", loja1.getEmail());
      assertEquals((-1102.2472354482), loja1.getTempo_espera(), 0.01);
      assertEquals(" e ", loja1.getPassword());
      assertEquals(2588.0062243169277, loja1.getLatitude(), 0.01);
      assertEquals(2588.0062243169277, loja1.getLongitude(), 0.01);
      assertEquals(2588.0062243169277, loja2.getLongitude(), 0.01);
      assertEquals((-1102.2472354482), loja2.getTempo_espera(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("ULe2>r2l", loja2.getEmail());
      assertEquals(2588.0062243169277, loja2.getLatitude(), 0.01);
      assertEquals(" e ", loja2.getPassword());
      assertEquals(" e ", loja2.getNome());
      assertEquals("#qbcX%0y", loja2.getCodigo());
      assertEquals("Loja", loja2.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(loja0.equals((Object)loja2));
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(loja1.equals((Object)loja2));
      assertFalse(loja2.equals((Object)loja0));
      assertTrue(loja2.equals((Object)loja1));
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(loja1, loja2);
      assertNotSame(loja1, loja0);
      assertNotSame(loja2, loja0);
      assertNotSame(loja2, loja1);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      String string0 = bDVoluntarios1.printVoluntario();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertEquals("", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Map<String, Voluntario> map0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      BDVoluntarios bDVoluntarios0 = null;
      try {
        bDVoluntarios0 = new BDVoluntarios((Map<String, Voluntario>) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = null;
      try {
        bDVoluntarios0 = new BDVoluntarios((BDVoluntarios) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, linkedHashSet0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(bDVoluntarios0);
      
      try { 
        bDVoluntarios0.encontraEnc("r?~vED[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = bDVoluntarios0.equals(object0);
      assertFalse(boolean0);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      bDVoluntarios0.setVoluntarios(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String string0 = " encomendas pelo volunt\u00E1rio ";
      Voluntario voluntario0 = bDVoluntarios0.tryLogin("Total de Voluntarios: ", " encomendas pelo volunt\u00E1rio ");
      assertNull(voluntario0);
      
      double double0 = (-1905.6);
      // Undeclared exception!
      try { 
        bDVoluntarios0.updateVoluntario((Voluntario) null, (-1905.6));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      try { 
        bDVoluntarios0.encontraEnc("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Voluntario voluntario0 = new Voluntario();
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertNotNull(voluntario0);
      
      bDVoluntarios0.updateVoluntario(voluntario0, (-771.300908004205));
      assertEquals((-771.300908004205), voluntario0.getClassificacao(), 0.01);
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(1, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getEmail());
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      boolean boolean0 = bDVoluntarios1.existeEnc("");
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertFalse(boolean0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertNotNull(voluntario0);
      
      voluntario0.setPassword("");
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      
      boolean boolean1 = bDVoluntarios0.existe(voluntario0);
      assertEquals("", voluntario0.getPassword());
      assertEquals("", voluntario0.getNome());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertFalse(voluntario0.getDisponibilidade());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals("", voluntario0.getEmail());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("^i,%7L%]?MR.", "^i,%7L%]?MR.");
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNull(voluntario1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(bDVoluntarios1);
      
      BDVoluntarios bDVoluntarios2 = bDVoluntarios0.clone();
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios2.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
      assertNotSame(bDVoluntarios2, bDVoluntarios1);
      assertNotNull(bDVoluntarios2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, linkedHashSet0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(bDVoluntarios0);
      
      Period period0 = Period.ofDays(0);
      assertNotNull(period0);
      
      IsoChronology isoChronology0 = period0.getChronology();
      assertNotNull(isoChronology0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      assertNotNull(zoneOffset0);
      
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      assertNotNull(localDate0);
      
      Loja loja0 = new Loja();
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Loja loja1 = new Loja("Total de Voluntarios: ", "Password incorreta", "Nome: ", "33@E<*qT7{q\"|z/3", 0, (-3378.5968351679), 0.0, arrayList0, 0);
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertFalse(loja1.equals((Object)loja0));
      assertNotNull(loja1);
      
      ArrayList<Encomenda> arrayList1 = loja1.getEncomendas_recebidas();
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(loja0.equals((Object)loja1));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(loja0, loja1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      
      Voluntario voluntario0 = new Voluntario("Nome: ", "Total de Voluntarios: ", "Nome: ", "Total de Voluntarios: ", true, (-3378.5968351679), 0.0, localDate0, 0, arrayList1, (-1.0), (-268), true, 0, 0);
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals("Total de Voluntarios: ", voluntario0.getPassword());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("Voluntario", voluntario0.getTypeUser());
      assertEquals((-1.0), voluntario0.getClassificacao(), 0.01);
      assertTrue(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("Nome: ", voluntario0.getNome());
      assertEquals((-268), voluntario0.getAvaliacoes());
      assertEquals((-3378.5968351679), voluntario0.getLatitude(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: ", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("Nome: ", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertTrue(voluntario0.getDisponibilidade());
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(voluntario0);
      
      bDVoluntarios0.updateVoluntario(voluntario0, (-3129.2));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals("Total de Voluntarios: ", voluntario0.getPassword());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("Voluntario", voluntario0.getTypeUser());
      assertTrue(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("Nome: ", voluntario0.getNome());
      assertEquals((-3378.5968351679), voluntario0.getLatitude(), 0.01);
      assertEquals((-267), voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: ", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("Nome: ", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(10.716104868913858, voluntario0.getClassificacao(), 0.01);
      assertTrue(voluntario0.getDisponibilidade());
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(loja0, loja1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(linkedHashSet0.contains("Total de Voluntarios: "));
      
      Loja loja2 = new Loja();
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getPassword());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getTypeUser());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertTrue(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertNotNull(loja2);
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(utilizador0);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veisMed(loja2, utilizador0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getPassword());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getTypeUser());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      assertNotNull(list0);
      assertFalse(linkedHashSet0.contains("Total de Voluntarios: "));
      assertFalse(list0.contains(voluntario0));
      
      String string0 = bDVoluntarios0.printVoluntarioLoja(loja0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(loja0.equals((Object)loja2));
      assertEquals("", string0);
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotNull(string0);
      assertFalse(linkedHashSet0.contains("Total de Voluntarios: "));
      
      List<Voluntario> list1 = bDVoluntarios0.voluntariosDispon√≠veis2(loja2, voluntario0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", loja0.getPassword());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("33@E<*qT7{q\"|z/3", loja1.getNome());
      assertEquals(0, loja1.getNrPessoasEmFila());
      assertEquals((-3378.5968351679), loja1.getLatitude(), 0.01);
      assertEquals("Password incorreta", loja1.getPassword());
      assertEquals("Loja", loja1.getTypeUser());
      assertEquals("Total de Voluntarios: ", loja1.getEmail());
      assertEquals(0.0, loja1.getTempo_espera(), 0.01);
      assertEquals("Nome: ", loja1.getCodigo());
      assertEquals((-3378.5968351679), loja1.getLongitude(), 0.01);
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals("Total de Voluntarios: ", voluntario0.getPassword());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("Voluntario", voluntario0.getTypeUser());
      assertTrue(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("Nome: ", voluntario0.getNome());
      assertEquals((-3378.5968351679), voluntario0.getLatitude(), 0.01);
      assertEquals((-267), voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("Total de Voluntarios: ", voluntario0.getCodigo());
      assertEquals(0, voluntario0.getVelocidade());
      assertEquals("Nome: ", voluntario0.getEmail());
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(10.716104868913858, voluntario0.getClassificacao(), 0.01);
      assertTrue(voluntario0.getDisponibilidade());
      assertEquals(0.0, loja2.getLatitude(), 0.01);
      assertEquals(0.0, loja2.getLongitude(), 0.01);
      assertEquals(0, loja2.getNrPessoasEmFila());
      assertEquals("", loja2.getPassword());
      assertEquals(0.0, loja2.getTempo_espera(), 0.01);
      assertEquals("", loja2.getTypeUser());
      assertEquals("", loja2.getNome());
      assertEquals("", loja2.getCodigo());
      assertEquals("", loja2.getEmail());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(loja0.equals((Object)loja1));
      assertTrue(loja0.equals((Object)loja2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(loja1.equals((Object)loja0));
      assertFalse(loja1.equals((Object)loja2));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(loja2.equals((Object)loja0));
      assertFalse(loja2.equals((Object)loja1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(loja0, loja2);
      assertNotSame(loja0, loja1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(loja1, loja0);
      assertNotSame(loja1, loja2);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(loja2, loja1);
      assertNotSame(loja2, loja0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.contains(voluntario0));
      assertFalse(linkedHashSet0.contains("Total de Voluntarios: "));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("$");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains("$"));
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(map0, linkedHashSet0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      assertTrue(linkedHashSet0.contains("$"));
      
      String string0 = bDVoluntarios1.toString();
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertEquals("Total de Voluntarios: \n{}", string0);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(string0);
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.contains("$"));
      
      Utilizador utilizador0 = new Utilizador();
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertNotNull(utilizador0);
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotNull(utilizador1);
      
      ArrayList<Encomenda> arrayList0 = utilizador1.getEncomendas();
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(arrayList0);
      
      Loja loja0 = new Loja("h*_HYHOY>", "h*_HYHOY>", "h*_HYHOY>", "Total de Voluntarios: ", 238.33605103, 238.33605103, (-3138.89), arrayList0, 3695);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(3695, loja0.getNrPessoasEmFila());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(238.33605103, loja0.getLatitude(), 0.01);
      assertEquals("h*_HYHOY>", loja0.getEmail());
      assertEquals(238.33605103, loja0.getLongitude(), 0.01);
      assertEquals("h*_HYHOY>", loja0.getPassword());
      assertEquals("Total de Voluntarios: ", loja0.getNome());
      assertEquals(238.33605103, loja0.getTempo_espera(), 0.01);
      assertEquals("h*_HYHOY>", loja0.getCodigo());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotNull(loja0);
      
      List<Voluntario> list0 = bDVoluntarios0.voluntariosDispon√≠veisMed(loja0, (Utilizador) null);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(3695, loja0.getNrPessoasEmFila());
      assertEquals("Loja", loja0.getTypeUser());
      assertEquals(238.33605103, loja0.getLatitude(), 0.01);
      assertEquals("h*_HYHOY>", loja0.getEmail());
      assertEquals(238.33605103, loja0.getLongitude(), 0.01);
      assertEquals("h*_HYHOY>", loja0.getPassword());
      assertEquals("Total de Voluntarios: ", loja0.getNome());
      assertEquals(238.33605103, loja0.getTempo_espera(), 0.01);
      assertEquals("h*_HYHOY>", loja0.getCodigo());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotNull(list0);
      
      boolean boolean1 = bDVoluntarios0.existeCodigo("Total de Voluntarios: \n{}");
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotNull(bDVoluntarios1);
      
      Map<String, Voluntario> map0 = bDVoluntarios1.getVoluntarios();
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(bDVoluntarios0.equals((Object)bDVoluntarios1));
      assertTrue(bDVoluntarios1.equals((Object)bDVoluntarios0));
      assertNotSame(bDVoluntarios0, bDVoluntarios1);
      assertNotSame(bDVoluntarios1, bDVoluntarios0);
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        Charset.forName("F-]^+?W9TVg*Q");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // F-]^+?W9TVg*Q
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      assertNotNull(bDVoluntarios0);
      
      Loja loja0 = new Loja();
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertNotNull(loja0);
      
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Utilizador utilizador0 = new Utilizador(" RATE --> ", "CLij%qzr", " RATE --> ", (String) null, 2687.4546980897176, 0.0, arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("CLij%qzr", utilizador0.getPassword());
      assertEquals(" RATE --> ", utilizador0.getEmail());
      assertEquals(2687.4546980897176, utilizador0.getLatitude(), 0.01);
      assertEquals(" RATE --> ", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNotNull(utilizador0);
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("CLij%qzr", utilizador0.getPassword());
      assertEquals(" RATE --> ", utilizador0.getEmail());
      assertEquals(2687.4546980897176, utilizador0.getLatitude(), 0.01);
      assertEquals(" RATE --> ", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("CLij%qzr", utilizador1.getPassword());
      assertEquals(2687.4546980897176, utilizador1.getLatitude(), 0.01);
      assertNull(utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(" RATE --> ", utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(" RATE --> ", utilizador1.getCodigo());
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertNotNull(utilizador1);
      
      ArrayList<Encomenda> arrayList1 = utilizador1.getEncomendas();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("CLij%qzr", utilizador0.getPassword());
      assertEquals(" RATE --> ", utilizador0.getEmail());
      assertEquals(2687.4546980897176, utilizador0.getLatitude(), 0.01);
      assertEquals(" RATE --> ", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("CLij%qzr", utilizador1.getPassword());
      assertEquals(2687.4546980897176, utilizador1.getLatitude(), 0.01);
      assertNull(utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(" RATE --> ", utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(" RATE --> ", utilizador1.getCodigo());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      
      loja0.setEncomendas_recebidas(arrayList1);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador0.getNome());
      assertEquals("Utilizador", utilizador0.getTypeUser());
      assertEquals("CLij%qzr", utilizador0.getPassword());
      assertEquals(" RATE --> ", utilizador0.getEmail());
      assertEquals(2687.4546980897176, utilizador0.getLatitude(), 0.01);
      assertEquals(" RATE --> ", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("CLij%qzr", utilizador1.getPassword());
      assertEquals(2687.4546980897176, utilizador1.getLatitude(), 0.01);
      assertNull(utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(" RATE --> ", utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(" RATE --> ", utilizador1.getCodigo());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(arrayList1, arrayList0);
      
      String string0 = bDVoluntarios0.printVoluntarioLoja(loja0);
      assertEquals(0.0, loja0.getLatitude(), 0.01);
      assertEquals(0.0, loja0.getLongitude(), 0.01);
      assertEquals("", loja0.getEmail());
      assertEquals("", loja0.getCodigo());
      assertEquals("", loja0.getNome());
      assertEquals(0, loja0.getNrPessoasEmFila());
      assertEquals("", loja0.getPassword());
      assertEquals(0.0, loja0.getTempo_espera(), 0.01);
      assertEquals("", loja0.getTypeUser());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Set<String> set0 = bDVoluntarios0.getCodigos();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Voluntario voluntario0 = new Voluntario();
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertNotNull(voluntario0);
      
      boolean boolean0 = bDVoluntarios0.existe(voluntario0);
      assertEquals(0.0, voluntario0.getRaio_acao(), 0.01);
      assertEquals(0.0, voluntario0.getLatitude(), 0.01);
      assertEquals(0, voluntario0.getVelocidade());
      assertFalse(voluntario0.aceitoTransporteMedicamentos());
      assertEquals("", voluntario0.getEmail());
      assertEquals(0, voluntario0.getAvaliacoes());
      assertEquals(0.0, voluntario0.getClassificacao(), 0.01);
      assertEquals(0.0, voluntario0.getLongitude(), 0.01);
      assertEquals("", voluntario0.getTypeUser());
      assertEquals(0, voluntario0.getMinutosDeEspera());
      assertEquals("", voluntario0.getNome());
      assertEquals("", voluntario0.getCodigo());
      assertEquals("", voluntario0.getPassword());
      assertFalse(voluntario0.getDisponibilidade());
      assertFalse(boolean0);
      
      Voluntario voluntario1 = bDVoluntarios0.tryLogin("", "M9qKe7~cC|_z");
      assertNull(voluntario1);
      
      boolean boolean1 = bDVoluntarios0.existeCodigo(" lojas");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios(hashMap0, linkedHashSet0);
      Period period0 = Period.ofDays(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      Loja loja0 = new Loja();
      loja0.getEncomendas_recebidas();
      Loja loja1 = new Loja(loja0);
      bDVoluntarios0.printVoluntarioLoja(loja1);
      Loja loja2 = new Loja(loja0);
      ArrayList<Encomenda> arrayList0 = loja2.getEncomendas_recebidas();
      Voluntario voluntario0 = new Voluntario("Nome: ", "Total de Voluntarios: ", "Nome: ", "Total de Voluntarios: ", true, (-3378.5968351679), 0.0, localDate0, 0, arrayList0, (-1.0), (-268), true, 0, 0);
      bDVoluntarios0.updateVoluntario(voluntario0, (-3129.2));
      Loja loja3 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      bDVoluntarios0.voluntariosDispon√≠veisMed(loja3, utilizador0);
      bDVoluntarios0.printVoluntario();
      bDVoluntarios0.voluntariosDispon√≠veis2(loja3, voluntario0);
      BDVoluntarios bDVoluntarios1 = bDVoluntarios0.clone();
      bDVoluntarios1.tryLogin("Nome: ", "Total de Voluntarios:  ---> Nome:  || RATE --> 10.716104868913858\n");
      // Undeclared exception!
      try { 
        bDVoluntarios1.existe((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("", "N\u00E3o existe esse volunt\u00E1rio", "", "", 0.0, 616.025819, arrayList0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      ArrayList<Encomenda> arrayList1 = utilizador2.getEncomendas();
      Loja loja0 = new Loja("", "N\u00E3o existe esse volunt\u00E1rio", "N\u00E3o existe esse volunt\u00E1rio", "N\u00E3o existe esse volunt\u00E1rio", 616.025819, 0.0, 0.0, arrayList1, 0);
      bDVoluntarios0.printVoluntarioLoja(loja0);
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.add(voluntario0);
      bDVoluntarios0.equals(voluntario0);
      try { 
        bDVoluntarios0.getEmail("M9qKe7~cC|_z");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      bDVoluntarios1.toString();
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setDisponibilidade(true);
      Loja loja0 = new Loja();
      bDVoluntarios1.updateVoluntario2(voluntario0);
      bDVoluntarios1.voluntariosDispon√≠veis2(loja0, voluntario0);
      bDVoluntarios1.updateVoluntario(voluntario0, (-1114.92863));
      bDVoluntarios0.getCodigos();
      bDVoluntarios0.toString();
      Set<String> set0 = bDVoluntarios1.getCodigos();
      bDVoluntarios1.setCodigos(set0);
      bDVoluntarios0.existeEnc("Total de Voluntarios: \n{}");
      loja0.getEncomendas_recebidas();
      bDVoluntarios0.tryLogin("u}5U(_4", "Total de Voluntarios: \n{}");
      bDVoluntarios0.tryLogin("", "$]<TBK^%tG7-_");
      bDVoluntarios0.updateVoluntario(voluntario0, 541.569);
      bDVoluntarios1.getCodigos();
      bDVoluntarios0.tryLogin("u}5U(_4", "Total de Voluntarios: \n{}");
      bDVoluntarios0.getCodigos();
      Loja loja1 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      bDVoluntarios0.voluntariosDispon√≠veis(loja0, utilizador0);
      BDVoluntarios bDVoluntarios2 = bDVoluntarios0.clone();
      assertNotSame(bDVoluntarios0, bDVoluntarios2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      Map<String, Voluntario> map0 = bDVoluntarios0.getVoluntarios();
      Set<String> set0 = bDVoluntarios0.getCodigos();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(map0, set0);
      bDVoluntarios1.existeEnc("C\u00F3digo da loja: ");
      bDVoluntarios1.setVoluntarios(map0);
      bDVoluntarios0.existeEmail("Longitude: ");
      Loja loja0 = new Loja();
      ArrayList<Encomenda> arrayList0 = loja0.getEncomendas_recebidas();
      Loja loja1 = new Loja(" e ", "Longitude: ", "Longitude: ", "hJcs`lAhSRK", 0.0, 0.0, 0.0, arrayList0, 94);
      Loja loja2 = new Loja(loja1);
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios1.voluntariosDispon√≠veis2(loja2, voluntario0);
      BDVoluntarios bDVoluntarios2 = bDVoluntarios0.clone();
      assertNotSame(bDVoluntarios2, bDVoluntarios0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      BDVoluntarios bDVoluntarios1 = new BDVoluntarios(bDVoluntarios0);
      Map<String, Voluntario> map0 = bDVoluntarios1.getVoluntarios();
      bDVoluntarios1.setVoluntarios(map0);
      boolean boolean0 = bDVoluntarios1.equals(bDVoluntarios0);
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Loja loja0 = new Loja("u", "u", "?'0]0e:ce", "u", 762.2613951562196, 762.2613951562196, 762.2613951562196, arrayList0, 75);
      bDVoluntarios1.voluntariosDispon√≠veisMed(loja0, utilizador0);
      Loja loja1 = new Loja();
      Utilizador utilizador1 = new Utilizador();
      bDVoluntarios1.voluntariosDispon√≠veis(loja1, utilizador1);
      boolean boolean1 = bDVoluntarios0.existeEnc("?'0]0e:ce");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      bDVoluntarios0.tryLogin("Saco delixo 30l", "Saco delixo 30l");
      hashMap0.put("\"b2&\"yh", (Voluntario) null);
      // Undeclared exception!
      try { 
        bDVoluntarios0.setVoluntarios(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      bDVoluntarios0.getCodigos();
      Voluntario voluntario0 = new Voluntario();
      bDVoluntarios0.updateVoluntario2(voluntario0);
      Set<String> set0 = bDVoluntarios0.getCodigos();
      bDVoluntarios0.printVoluntario();
      bDVoluntarios0.setCodigos(set0);
      Loja loja0 = new Loja();
      Utilizador utilizador0 = new Utilizador();
      bDVoluntarios0.voluntariosDispon√≠veisMed(loja0, utilizador0);
      double double0 = 0.0;
      bDVoluntarios0.updateVoluntario(voluntario0, 0.0);
      bDVoluntarios0.existeEnc((String) null);
      bDVoluntarios0.existeEnc((String) null);
      try { 
        bDVoluntarios0.encontraEnc((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("BDVoluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BDVoluntarios bDVoluntarios0 = new BDVoluntarios();
      bDVoluntarios0.existeEnc(" ---> ");
      MockLocalDate.now();
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome(". ihP{");
      ArrayList<Encomenda> arrayList0 = new ArrayList<Encomenda>();
      Loja loja0 = new Loja("", "xX!", "JXB)#hfZ~XXs<81zX", "", 1895, 2687.3674871288963, 1534.1766737404919, arrayList0, 1895);
      Utilizador utilizador1 = new Utilizador();
      bDVoluntarios0.voluntariosDispon√≠veisMed(loja0, utilizador1);
      ArrayList<Encomenda> arrayList1 = utilizador0.getEncomendas();
      Loja loja1 = new Loja(" ---> ", "JXB)#hfZ~XXs<81zX", "xX!", " ---> ", (-2887.7639871436), (-113.5631), (-1.0), arrayList1, (-684));
      loja1.setPassword("wB8");
      bDVoluntarios0.voluntariosDispon√≠veisMed(loja1, utilizador0);
      bDVoluntarios0.existeEmail((String) null);
      bDVoluntarios0.equals((Object) null);
      bDVoluntarios0.existeEnc("");
      Random.setNextRandom(327);
  }
}
