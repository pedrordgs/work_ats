/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 18:10:37 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Pair_ESTest extends Pair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pair pair0 = new Pair("Pair", 1);
      int int0 = pair0.getSnd();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pair pair0 = new Pair();
      pair0.setSecond((-318));
      int int0 = pair0.getSnd();
      assertEquals((-318), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pair pair0 = new Pair((String) null, 0);
      pair0.getFst();
      assertEquals(0, pair0.getSnd());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pair pair0 = new Pair();
      pair0.setFst("!{-((}h#*6t");
      pair0.getFst();
      assertEquals(0, pair0.getSnd());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pair pair0 = new Pair("", 3708);
      Pair pair1 = pair0.clone();
      assertTrue(pair1.equals((Object)pair0));
      assertEquals(3708, pair1.getSnd());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Pair pair0 = null;
      try {
        pair0 = new Pair((Pair) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Pair", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pair pair0 = new Pair("Pair", 1);
      Pair pair1 = new Pair(pair0);
      assertEquals(1, pair1.getSnd());
      assertTrue(pair1.equals((Object)pair0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pair pair0 = new Pair();
      pair0.getFst();
      assertEquals(0, pair0.getSnd());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Pair pair0 = new Pair();
      int int0 = pair0.getSnd();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pair pair0 = new Pair();
      Pair pair1 = new Pair("", (-2357));
      boolean boolean0 = pair0.equals(pair1);
      assertFalse(boolean0);
      assertEquals((-2357), pair1.getSnd());
      assertEquals(0, pair0.getSnd());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pair pair0 = new Pair();
      boolean boolean0 = pair0.equals(pair0);
      assertTrue(boolean0);
      assertEquals(0, pair0.getSnd());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pair pair0 = new Pair();
      boolean boolean0 = pair0.equals(" ---> 0");
      assertEquals(0, pair0.getSnd());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pair pair0 = new Pair();
      Pair pair1 = pair0.clone();
      assertTrue(pair1.equals((Object)pair0));
      
      pair0.setFst(" ---> 0");
      boolean boolean0 = pair0.equals(pair1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Pair pair0 = new Pair();
      pair0.setSecond((-318));
      pair0.clone();
      assertEquals((-318), pair0.getSnd());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pair pair0 = new Pair();
      String string0 = pair0.toString();
      assertEquals(" ---> 0", string0);
  }
}
