/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 18:08:06 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      
      String string0 = utilizador0.toString();
      assertEquals(" <--- O utilizador \u00E9: \n\n\nC\u00F3digo: \nNome: \nLatitude: 0.0\nLongitude: 0.0\n", string0);
      assertNotNull(string0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      
      Utilizador utilizador1 = new Utilizador();
      assertNotNull(utilizador1);
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      ArrayList<Encomenda> arrayList0 = utilizador1.getEncomendas();
      assertNotNull(arrayList0);
      assertNotSame(utilizador1, utilizador0);
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      Utilizador utilizador2 = new Utilizador((String) null, "", "\n", "", (-1230.76976), (-1107.1), arrayList0);
      assertNotNull(utilizador2);
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", utilizador2.getPassword());
      assertEquals("", utilizador2.getNome());
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals((-1107.1), utilizador2.getLongitude(), 0.01);
      assertEquals("\n", utilizador2.getCodigo());
      assertEquals((-1230.76976), utilizador2.getLatitude(), 0.01);
      assertNull(utilizador2.getEmail());
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador1));
      assertFalse(utilizador2.equals((Object)utilizador0));
      
      ArrayList<Encomenda> arrayList1 = utilizador2.getEncomendas();
      assertNotNull(arrayList1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", utilizador2.getPassword());
      assertEquals("", utilizador2.getNome());
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals((-1107.1), utilizador2.getLongitude(), 0.01);
      assertEquals("\n", utilizador2.getCodigo());
      assertEquals((-1230.76976), utilizador2.getLatitude(), 0.01);
      assertNull(utilizador2.getEmail());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador2.equals((Object)utilizador1));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      boolean boolean0 = utilizador0.equals(utilizador1);
      assertTrue(boolean0);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador1.equals((Object)utilizador2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      
      utilizador0.setLatitude((-1794.6));
      assertEquals((-1794.6), utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      
      utilizador0.setNome("&AJL%xb5zhh{B!G");
      assertEquals((-1794.6), utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("&AJL%xb5zhh{B!G", utilizador0.getNome());
      
      String string0 = utilizador0.getCodigo();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals((-1794.6), utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("&AJL%xb5zhh{B!G", utilizador0.getNome());
      
      double double0 = utilizador0.getLatitude();
      assertEquals((-1794.6), double0, 0.01);
      assertEquals((-1794.6), utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("&AJL%xb5zhh{B!G", utilizador0.getNome());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Utilizador utilizador1 = new Utilizador("|%YT$ZBK`BQm{XETa.", "{!%Z=.e\"Y`J|X~ZrC5", "{!%Z=.e\"Y`J|X~ZrC5", "{!%Z=.e\"Y`J|X~ZrC5", (-2381.7895125222), 819.33266095, arrayList0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getNome());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getCodigo());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(819.33266095, utilizador1.getLongitude(), 0.01);
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getPassword());
      assertEquals((-2381.7895125222), utilizador1.getLatitude(), 0.01);
      assertEquals("|%YT$ZBK`BQm{XETa.", utilizador1.getEmail());
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      Utilizador utilizador2 = utilizador1.clone();
      assertNotNull(utilizador2);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getNome());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getCodigo());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(819.33266095, utilizador1.getLongitude(), 0.01);
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getPassword());
      assertEquals((-2381.7895125222), utilizador1.getLatitude(), 0.01);
      assertEquals("|%YT$ZBK`BQm{XETa.", utilizador1.getEmail());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador2.getNome());
      assertEquals((-2381.7895125222), utilizador2.getLatitude(), 0.01);
      assertEquals(819.33266095, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador2.getPassword());
      assertEquals("|%YT$ZBK`BQm{XETa.", utilizador2.getEmail());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      
      utilizador2.setLatitude(0.0);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getNome());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getCodigo());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(819.33266095, utilizador1.getLongitude(), 0.01);
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getPassword());
      assertEquals((-2381.7895125222), utilizador1.getLatitude(), 0.01);
      assertEquals("|%YT$ZBK`BQm{XETa.", utilizador1.getEmail());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador2.getNome());
      assertEquals(819.33266095, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador2.getPassword());
      assertEquals("|%YT$ZBK`BQm{XETa.", utilizador2.getEmail());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      
      String string0 = utilizador1.printEncomendasRecebidas();
      assertEquals("N\u00E3o existem encomendas recebidas\n", string0);
      assertNotNull(string0);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getNome());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getCodigo());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(819.33266095, utilizador1.getLongitude(), 0.01);
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getPassword());
      assertEquals((-2381.7895125222), utilizador1.getLatitude(), 0.01);
      assertEquals("|%YT$ZBK`BQm{XETa.", utilizador1.getEmail());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      Utilizador utilizador3 = new Utilizador(utilizador1);
      assertNotNull(utilizador3);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getNome());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getCodigo());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(819.33266095, utilizador1.getLongitude(), 0.01);
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getPassword());
      assertEquals((-2381.7895125222), utilizador1.getLatitude(), 0.01);
      assertEquals("|%YT$ZBK`BQm{XETa.", utilizador1.getEmail());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador3.getCodigo());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador3.getNome());
      assertEquals(819.33266095, utilizador3.getLongitude(), 0.01);
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador3.getPassword());
      assertEquals("Utilizador", utilizador3.getTypeUser());
      assertEquals("|%YT$ZBK`BQm{XETa.", utilizador3.getEmail());
      assertEquals((-2381.7895125222), utilizador3.getLatitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador3.equals((Object)utilizador0));
      assertTrue(utilizador3.equals((Object)utilizador1));
      assertTrue(utilizador3.equals((Object)utilizador2));
      
      utilizador3.setCodigo("|%YT$ZBK`BQm{XETa.");
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador3, utilizador0);
      assertNotSame(utilizador3, utilizador2);
      assertNotSame(utilizador3, utilizador1);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getNome());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getCodigo());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(819.33266095, utilizador1.getLongitude(), 0.01);
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador1.getPassword());
      assertEquals((-2381.7895125222), utilizador1.getLatitude(), 0.01);
      assertEquals("|%YT$ZBK`BQm{XETa.", utilizador1.getEmail());
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador3.getNome());
      assertEquals(819.33266095, utilizador3.getLongitude(), 0.01);
      assertEquals("{!%Z=.e\"Y`J|X~ZrC5", utilizador3.getPassword());
      assertEquals("|%YT$ZBK`BQm{XETa.", utilizador3.getCodigo());
      assertEquals("Utilizador", utilizador3.getTypeUser());
      assertEquals("|%YT$ZBK`BQm{XETa.", utilizador3.getEmail());
      assertEquals((-2381.7895125222), utilizador3.getLatitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertFalse(utilizador3.equals((Object)utilizador0));
      assertTrue(utilizador3.equals((Object)utilizador1));
      assertTrue(utilizador3.equals((Object)utilizador2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      
      utilizador0.setLongitude((-1.0));
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals((-1.0), utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals((-1.0), utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals((-1.0), utilizador1.getLongitude(), 0.01);
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      // Undeclared exception!
      try { 
        utilizador1.updateEncomendaPronta((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Utilizador utilizador1 = new Utilizador((String) null, (String) null, (String) null, "", 636.993444848, 1919.559678, arrayList0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(utilizador1.getCodigo());
      assertEquals(636.993444848, utilizador1.getLatitude(), 0.01);
      assertEquals("", utilizador1.getNome());
      assertEquals(1919.559678, utilizador1.getLongitude(), 0.01);
      assertNull(utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertNull(utilizador1.getEmail());
      
      Utilizador utilizador2 = new Utilizador(utilizador1);
      assertNotNull(utilizador2);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(utilizador1.getCodigo());
      assertEquals(636.993444848, utilizador1.getLatitude(), 0.01);
      assertEquals("", utilizador1.getNome());
      assertEquals(1919.559678, utilizador1.getLongitude(), 0.01);
      assertNull(utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertNull(utilizador1.getEmail());
      assertNull(utilizador2.getPassword());
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals(636.993444848, utilizador2.getLatitude(), 0.01);
      assertEquals(1919.559678, utilizador2.getLongitude(), 0.01);
      assertEquals("", utilizador2.getNome());
      assertNull(utilizador2.getEmail());
      assertNull(utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      
      String string0 = utilizador2.getCodigo();
      assertNull(string0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador0);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(utilizador1.getCodigo());
      assertEquals(636.993444848, utilizador1.getLatitude(), 0.01);
      assertEquals("", utilizador1.getNome());
      assertEquals(1919.559678, utilizador1.getLongitude(), 0.01);
      assertNull(utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertNull(utilizador1.getEmail());
      assertNull(utilizador2.getPassword());
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals(636.993444848, utilizador2.getLatitude(), 0.01);
      assertEquals(1919.559678, utilizador2.getLongitude(), 0.01);
      assertEquals("", utilizador2.getNome());
      assertNull(utilizador2.getEmail());
      assertNull(utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador2));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      utilizador0.setCodigo("Utilizador");
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      
      Utilizador utilizador1 = new Utilizador("AX", "!GHPam)g?6C*ji(", "I0", "!GHPam)g?6C*ji(", 0.0, 0.0, arrayList0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("!GHPam)g?6C*ji(", utilizador1.getNome());
      assertEquals("AX", utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("!GHPam)g?6C*ji(", utilizador1.getPassword());
      assertEquals("I0", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      utilizador0.setCodigo((String) null);
      assertNotSame(utilizador0, utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNull(utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertFalse(utilizador0.equals((Object)utilizador1));
      
      utilizador1.setNome("!GHPam)g?6C*ji(");
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNull(utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("!GHPam)g?6C*ji(", utilizador1.getNome());
      assertEquals("AX", utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("!GHPam)g?6C*ji(", utilizador1.getPassword());
      assertEquals("I0", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      String string0 = utilizador1.getNome();
      assertEquals("!GHPam)g?6C*ji(", string0);
      assertNotNull(string0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNull(utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("!GHPam)g?6C*ji(", utilizador1.getNome());
      assertEquals("AX", utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("!GHPam)g?6C*ji(", utilizador1.getPassword());
      assertEquals("I0", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      utilizador1.setEncomendas(arrayList0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNull(utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("!GHPam)g?6C*ji(", utilizador1.getNome());
      assertEquals("AX", utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("!GHPam)g?6C*ji(", utilizador1.getPassword());
      assertEquals("I0", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      double double0 = utilizador1.getLongitude();
      assertEquals(0.0, double0, 0.01);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertNull(utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("!GHPam)g?6C*ji(", utilizador1.getNome());
      assertEquals("AX", utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("!GHPam)g?6C*ji(", utilizador1.getPassword());
      assertEquals("I0", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      try { 
        utilizador0.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Utilizador utilizador1 = new Utilizador((String) null, (String) null, "jT4U?3UYZ_VihB6Nl7", ".M+SEM,C]0h", 0.0, 0.0, arrayList0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador1.getEmail());
      assertNull(utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("jT4U?3UYZ_VihB6Nl7", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals(".M+SEM,C]0h", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      
      utilizador1.setTypeUser("");
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador1.getEmail());
      assertEquals("", utilizador1.getTypeUser());
      assertNull(utilizador1.getPassword());
      assertEquals("jT4U?3UYZ_VihB6Nl7", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals(".M+SEM,C]0h", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      
      Utilizador utilizador2 = new Utilizador(utilizador1);
      assertNotNull(utilizador2);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador1.getEmail());
      assertEquals("", utilizador1.getTypeUser());
      assertNull(utilizador1.getPassword());
      assertEquals("jT4U?3UYZ_VihB6Nl7", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals(".M+SEM,C]0h", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertNull(utilizador2.getEmail());
      assertNull(utilizador2.getPassword());
      assertEquals("", utilizador2.getTypeUser());
      assertEquals(0.0, utilizador2.getLongitude(), 0.01);
      assertEquals(".M+SEM,C]0h", utilizador2.getNome());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("jT4U?3UYZ_VihB6Nl7", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      
      utilizador2.setNome((String) null);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador1.getEmail());
      assertEquals("", utilizador1.getTypeUser());
      assertNull(utilizador1.getPassword());
      assertEquals("jT4U?3UYZ_VihB6Nl7", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals(".M+SEM,C]0h", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertNull(utilizador2.getEmail());
      assertNull(utilizador2.getPassword());
      assertEquals("", utilizador2.getTypeUser());
      assertEquals(0.0, utilizador2.getLongitude(), 0.01);
      assertNull(utilizador2.getNome());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("jT4U?3UYZ_VihB6Nl7", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      
      String string0 = utilizador2.getNome();
      assertNull(string0);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador1.getEmail());
      assertEquals("", utilizador1.getTypeUser());
      assertNull(utilizador1.getPassword());
      assertEquals("jT4U?3UYZ_VihB6Nl7", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals(".M+SEM,C]0h", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertNull(utilizador2.getEmail());
      assertNull(utilizador2.getPassword());
      assertEquals("", utilizador2.getTypeUser());
      assertEquals(0.0, utilizador2.getLongitude(), 0.01);
      assertNull(utilizador2.getNome());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("jT4U?3UYZ_VihB6Nl7", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      
      String string1 = utilizador2.toString();
      assertEquals(" <--- O utilizador \u00E9: \n\n\nC\u00F3digo: jT4U?3UYZ_VihB6Nl7\nNome: null\nLatitude: 0.0\nLongitude: 0.0\n", string1);
      assertNotNull(string1);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(utilizador1.getEmail());
      assertEquals("", utilizador1.getTypeUser());
      assertNull(utilizador1.getPassword());
      assertEquals("jT4U?3UYZ_VihB6Nl7", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals(".M+SEM,C]0h", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertNull(utilizador2.getEmail());
      assertNull(utilizador2.getPassword());
      assertEquals("", utilizador2.getTypeUser());
      assertEquals(0.0, utilizador2.getLongitude(), 0.01);
      assertNull(utilizador2.getNome());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("jT4U?3UYZ_VihB6Nl7", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      
      try { 
        utilizador2.devolveEncomenda("dgeEok)hO@G boT/OU4");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Utilizador utilizador1 = new Utilizador("!A8", "!A8", "8X#8JA_S!nY~", "", 0.0, (-778.0), arrayList0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("8X#8JA_S!nY~", utilizador1.getCodigo());
      assertEquals((-778.0), utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("!A8", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("!A8", utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      Utilizador utilizador2 = utilizador1.clone();
      assertNotNull(utilizador2);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("8X#8JA_S!nY~", utilizador1.getCodigo());
      assertEquals((-778.0), utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("!A8", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("!A8", utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("", utilizador2.getNome());
      assertEquals("!A8", utilizador2.getPassword());
      assertEquals((-778.0), utilizador2.getLongitude(), 0.01);
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("8X#8JA_S!nY~", utilizador2.getCodigo());
      assertEquals("!A8", utilizador2.getEmail());
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      
      double double0 = utilizador1.getLongitude();
      assertEquals((-778.0), double0, 0.01);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("8X#8JA_S!nY~", utilizador1.getCodigo());
      assertEquals((-778.0), utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("!A8", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals("!A8", utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador2));
      
      String string0 = utilizador0.printEncomendasPorEntregar();
      assertEquals("N\u00E3o existem encomendas por entregar\n", string0);
      assertNotNull(string0);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      
      try { 
        utilizador2.devolveEncomenda("8X#8JA_S!nY~");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Utilizador utilizador1 = new Utilizador("GmfBzP", "GmfBzP", "7.Bp4-[l%JmGE,)", "$d,\"e0T3H|p", 0.0, 0.0, arrayList0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("GmfBzP", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("$d,\"e0T3H|p", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("GmfBzP", utilizador1.getPassword());
      assertEquals("7.Bp4-[l%JmGE,)", utilizador1.getCodigo());
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      Utilizador utilizador2 = new Utilizador(utilizador1);
      assertNotNull(utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("GmfBzP", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("$d,\"e0T3H|p", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("GmfBzP", utilizador1.getPassword());
      assertEquals("7.Bp4-[l%JmGE,)", utilizador1.getCodigo());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("$d,\"e0T3H|p", utilizador2.getNome());
      assertEquals(0.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("7.Bp4-[l%JmGE,)", utilizador2.getCodigo());
      assertEquals("GmfBzP", utilizador2.getEmail());
      assertEquals("GmfBzP", utilizador2.getPassword());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      
      utilizador2.setNome("{RM");
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("GmfBzP", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("$d,\"e0T3H|p", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("GmfBzP", utilizador1.getPassword());
      assertEquals("7.Bp4-[l%JmGE,)", utilizador1.getCodigo());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("{RM", utilizador2.getNome());
      assertEquals(0.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("7.Bp4-[l%JmGE,)", utilizador2.getCodigo());
      assertEquals("GmfBzP", utilizador2.getEmail());
      assertEquals("GmfBzP", utilizador2.getPassword());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      
      String string0 = utilizador2.getCodigo();
      assertEquals("7.Bp4-[l%JmGE,)", string0);
      assertNotNull(string0);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("GmfBzP", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("$d,\"e0T3H|p", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("GmfBzP", utilizador1.getPassword());
      assertEquals("7.Bp4-[l%JmGE,)", utilizador1.getCodigo());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("{RM", utilizador2.getNome());
      assertEquals(0.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("7.Bp4-[l%JmGE,)", utilizador2.getCodigo());
      assertEquals("GmfBzP", utilizador2.getEmail());
      assertEquals("GmfBzP", utilizador2.getPassword());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      
      utilizador2.setCodigo("C\u00F3digo: ");
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("GmfBzP", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("$d,\"e0T3H|p", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("GmfBzP", utilizador1.getPassword());
      assertEquals("7.Bp4-[l%JmGE,)", utilizador1.getCodigo());
      assertEquals("C\u00F3digo: ", utilizador2.getCodigo());
      assertEquals(0.0, utilizador2.getLatitude(), 0.01);
      assertEquals("{RM", utilizador2.getNome());
      assertEquals(0.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("GmfBzP", utilizador2.getEmail());
      assertEquals("GmfBzP", utilizador2.getPassword());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      
      utilizador0.setCodigo("7.Bp4-[l%JmGE,)");
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("7.Bp4-[l%JmGE,)", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      
      utilizador0.setNome("");
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Utilizador utilizador1 = new Utilizador("", "QL#IYDc1>z=f31ii3@", "", "", 1.0, 1.0, arrayList0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      Utilizador utilizador2 = new Utilizador(utilizador1);
      assertNotNull(utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador2.getPassword());
      assertEquals(1.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertFalse(utilizador2.equals((Object)utilizador0));
      
      String string0 = utilizador2.printEncomendasRecebidas();
      assertEquals("N\u00E3o existem encomendas recebidas\n", string0);
      assertNotNull(string0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador2.getPassword());
      assertEquals(1.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertFalse(utilizador2.equals((Object)utilizador0));
      
      String string1 = utilizador0.printEncomendasRecebidas();
      assertEquals("N\u00E3o existem encomendas recebidas\n", string1);
      assertNotNull(string1);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertTrue(string1.equals((Object)string0));
      
      Utilizador utilizador3 = utilizador2.clone();
      assertNotNull(utilizador3);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador3);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador3, utilizador1);
      assertNotSame(utilizador3, utilizador0);
      assertNotSame(utilizador3, utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador2.getPassword());
      assertEquals(1.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador3.getPassword());
      assertEquals("", utilizador3.getEmail());
      assertEquals("", utilizador3.getCodigo());
      assertEquals("", utilizador3.getNome());
      assertEquals("Utilizador", utilizador3.getTypeUser());
      assertEquals(1.0, utilizador3.getLatitude(), 0.01);
      assertEquals(1.0, utilizador3.getLongitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador3.equals((Object)utilizador2));
      assertTrue(utilizador3.equals((Object)utilizador1));
      assertFalse(utilizador3.equals((Object)utilizador0));
      
      utilizador3.setNome("");
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador3);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador3, utilizador1);
      assertNotSame(utilizador3, utilizador0);
      assertNotSame(utilizador3, utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador2.getPassword());
      assertEquals(1.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador3.getPassword());
      assertEquals("", utilizador3.getEmail());
      assertEquals("", utilizador3.getCodigo());
      assertEquals("", utilizador3.getNome());
      assertEquals("Utilizador", utilizador3.getTypeUser());
      assertEquals(1.0, utilizador3.getLatitude(), 0.01);
      assertEquals(1.0, utilizador3.getLongitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador3));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador3.equals((Object)utilizador2));
      assertTrue(utilizador3.equals((Object)utilizador1));
      assertFalse(utilizador3.equals((Object)utilizador0));
      
      String string2 = utilizador0.getNome();
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      utilizador2.setNome("");
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador3);
      assertNotSame(utilizador2, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador2.getPassword());
      assertEquals(1.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador3));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertFalse(utilizador2.equals((Object)utilizador0));
      
      Utilizador utilizador4 = utilizador2.clone();
      assertNotNull(utilizador4);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador4);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador4);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador4);
      assertNotSame(utilizador2, utilizador3);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador4, utilizador3);
      assertNotSame(utilizador4, utilizador0);
      assertNotSame(utilizador4, utilizador1);
      assertNotSame(utilizador4, utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador2.getPassword());
      assertEquals(1.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertEquals("", utilizador4.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador4.getPassword());
      assertEquals("Utilizador", utilizador4.getTypeUser());
      assertEquals("", utilizador4.getCodigo());
      assertEquals("", utilizador4.getNome());
      assertEquals(1.0, utilizador4.getLongitude(), 0.01);
      assertEquals(1.0, utilizador4.getLatitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador3));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador4.equals((Object)utilizador2));
      assertFalse(utilizador4.equals((Object)utilizador0));
      assertTrue(utilizador4.equals((Object)utilizador3));
      assertTrue(utilizador4.equals((Object)utilizador1));
      
      double double0 = utilizador2.getLatitude();
      assertEquals(1.0, double0, 0.01);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador4);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador4);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador4);
      assertNotSame(utilizador2, utilizador3);
      assertNotSame(utilizador2, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador2.getPassword());
      assertEquals(1.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador4));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador4));
      assertTrue(utilizador2.equals((Object)utilizador3));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertTrue(utilizador2.equals((Object)utilizador4));
      assertFalse(utilizador2.equals((Object)utilizador0));
      
      Utilizador utilizador5 = utilizador1.clone();
      assertNotNull(utilizador5);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador4);
      assertNotSame(utilizador0, utilizador5);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador5);
      assertNotSame(utilizador1, utilizador4);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador5, utilizador2);
      assertNotSame(utilizador5, utilizador1);
      assertNotSame(utilizador5, utilizador4);
      assertNotSame(utilizador5, utilizador3);
      assertNotSame(utilizador5, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador5.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador5.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador5.getPassword());
      assertEquals("", utilizador5.getEmail());
      assertEquals("", utilizador5.getNome());
      assertEquals(1.0, utilizador5.getLatitude(), 0.01);
      assertEquals("", utilizador5.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador4));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador4));
      assertTrue(utilizador5.equals((Object)utilizador3));
      assertTrue(utilizador5.equals((Object)utilizador1));
      assertTrue(utilizador5.equals((Object)utilizador4));
      assertFalse(utilizador5.equals((Object)utilizador0));
      assertTrue(utilizador5.equals((Object)utilizador2));
      
      Utilizador utilizador6 = utilizador5.clone();
      assertNotNull(utilizador6);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador4);
      assertNotSame(utilizador0, utilizador5);
      assertNotSame(utilizador0, utilizador6);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador6);
      assertNotSame(utilizador1, utilizador5);
      assertNotSame(utilizador1, utilizador4);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador5, utilizador2);
      assertNotSame(utilizador5, utilizador1);
      assertNotSame(utilizador5, utilizador4);
      assertNotSame(utilizador5, utilizador3);
      assertNotSame(utilizador5, utilizador6);
      assertNotSame(utilizador5, utilizador0);
      assertNotSame(utilizador6, utilizador3);
      assertNotSame(utilizador6, utilizador0);
      assertNotSame(utilizador6, utilizador5);
      assertNotSame(utilizador6, utilizador4);
      assertNotSame(utilizador6, utilizador1);
      assertNotSame(utilizador6, utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador5.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador5.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador5.getPassword());
      assertEquals("", utilizador5.getEmail());
      assertEquals("", utilizador5.getNome());
      assertEquals(1.0, utilizador5.getLatitude(), 0.01);
      assertEquals("", utilizador5.getCodigo());
      assertEquals("Utilizador", utilizador6.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador6.getPassword());
      assertEquals("", utilizador6.getNome());
      assertEquals(1.0, utilizador6.getLatitude(), 0.01);
      assertEquals("", utilizador6.getEmail());
      assertEquals("", utilizador6.getCodigo());
      assertEquals(1.0, utilizador6.getLongitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador4));
      assertFalse(utilizador0.equals((Object)utilizador5));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador5));
      assertTrue(utilizador1.equals((Object)utilizador4));
      assertTrue(utilizador5.equals((Object)utilizador3));
      assertTrue(utilizador5.equals((Object)utilizador1));
      assertTrue(utilizador5.equals((Object)utilizador4));
      assertFalse(utilizador5.equals((Object)utilizador0));
      assertTrue(utilizador5.equals((Object)utilizador2));
      assertFalse(utilizador6.equals((Object)utilizador0));
      assertTrue(utilizador6.equals((Object)utilizador2));
      assertTrue(utilizador6.equals((Object)utilizador5));
      assertTrue(utilizador6.equals((Object)utilizador3));
      assertTrue(utilizador6.equals((Object)utilizador1));
      assertTrue(utilizador6.equals((Object)utilizador4));
      
      String string3 = utilizador5.printEncomendasPorEntregar();
      assertEquals("N\u00E3o existem encomendas por entregar\n", string3);
      assertNotNull(string3);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador4);
      assertNotSame(utilizador0, utilizador5);
      assertNotSame(utilizador0, utilizador6);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador6);
      assertNotSame(utilizador1, utilizador5);
      assertNotSame(utilizador1, utilizador4);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador5, utilizador2);
      assertNotSame(utilizador5, utilizador1);
      assertNotSame(utilizador5, utilizador4);
      assertNotSame(utilizador5, utilizador3);
      assertNotSame(utilizador5, utilizador6);
      assertNotSame(utilizador5, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador5.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador5.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador5.getPassword());
      assertEquals("", utilizador5.getEmail());
      assertEquals("", utilizador5.getNome());
      assertEquals(1.0, utilizador5.getLatitude(), 0.01);
      assertEquals("", utilizador5.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador4));
      assertFalse(utilizador0.equals((Object)utilizador5));
      assertFalse(utilizador0.equals((Object)utilizador6));
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador6));
      assertTrue(utilizador1.equals((Object)utilizador5));
      assertTrue(utilizador1.equals((Object)utilizador4));
      assertTrue(utilizador5.equals((Object)utilizador3));
      assertTrue(utilizador5.equals((Object)utilizador6));
      assertTrue(utilizador5.equals((Object)utilizador1));
      assertTrue(utilizador5.equals((Object)utilizador4));
      assertFalse(utilizador5.equals((Object)utilizador0));
      assertTrue(utilizador5.equals((Object)utilizador2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = utilizador5.printEncomendasRecebidas();
      assertEquals("N\u00E3o existem encomendas recebidas\n", string4);
      assertNotNull(string4);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador4);
      assertNotSame(utilizador0, utilizador5);
      assertNotSame(utilizador0, utilizador6);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador6);
      assertNotSame(utilizador1, utilizador5);
      assertNotSame(utilizador1, utilizador4);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador5, utilizador2);
      assertNotSame(utilizador5, utilizador1);
      assertNotSame(utilizador5, utilizador4);
      assertNotSame(utilizador5, utilizador3);
      assertNotSame(utilizador5, utilizador6);
      assertNotSame(utilizador5, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador5.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador5.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador5.getPassword());
      assertEquals("", utilizador5.getEmail());
      assertEquals("", utilizador5.getNome());
      assertEquals(1.0, utilizador5.getLatitude(), 0.01);
      assertEquals("", utilizador5.getCodigo());
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador4));
      assertFalse(utilizador0.equals((Object)utilizador5));
      assertFalse(utilizador0.equals((Object)utilizador6));
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador6));
      assertTrue(utilizador1.equals((Object)utilizador5));
      assertTrue(utilizador1.equals((Object)utilizador4));
      assertTrue(utilizador5.equals((Object)utilizador3));
      assertTrue(utilizador5.equals((Object)utilizador6));
      assertTrue(utilizador5.equals((Object)utilizador1));
      assertTrue(utilizador5.equals((Object)utilizador4));
      assertFalse(utilizador5.equals((Object)utilizador0));
      assertTrue(utilizador5.equals((Object)utilizador2));
      
      utilizador2.setLatitude(1.0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador4);
      assertNotSame(utilizador0, utilizador5);
      assertNotSame(utilizador0, utilizador6);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador6);
      assertNotSame(utilizador1, utilizador5);
      assertNotSame(utilizador1, utilizador4);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador4);
      assertNotSame(utilizador2, utilizador3);
      assertNotSame(utilizador2, utilizador5);
      assertNotSame(utilizador2, utilizador6);
      assertNotSame(utilizador2, utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador2.getPassword());
      assertEquals(1.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador4));
      assertFalse(utilizador0.equals((Object)utilizador5));
      assertFalse(utilizador0.equals((Object)utilizador6));
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador6));
      assertTrue(utilizador1.equals((Object)utilizador5));
      assertTrue(utilizador1.equals((Object)utilizador4));
      assertTrue(utilizador2.equals((Object)utilizador3));
      assertTrue(utilizador2.equals((Object)utilizador5));
      assertTrue(utilizador2.equals((Object)utilizador6));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertTrue(utilizador2.equals((Object)utilizador4));
      assertFalse(utilizador2.equals((Object)utilizador0));
      
      double double1 = utilizador4.getLongitude();
      assertEquals(1.0, double1, 0.01);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador4);
      assertNotSame(utilizador0, utilizador5);
      assertNotSame(utilizador0, utilizador6);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador6);
      assertNotSame(utilizador1, utilizador5);
      assertNotSame(utilizador1, utilizador4);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador4);
      assertNotSame(utilizador2, utilizador3);
      assertNotSame(utilizador2, utilizador5);
      assertNotSame(utilizador2, utilizador6);
      assertNotSame(utilizador2, utilizador0);
      assertNotSame(utilizador4, utilizador3);
      assertNotSame(utilizador4, utilizador6);
      assertNotSame(utilizador4, utilizador5);
      assertNotSame(utilizador4, utilizador1);
      assertNotSame(utilizador4, utilizador0);
      assertNotSame(utilizador4, utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador2.getPassword());
      assertEquals(1.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getNome());
      assertEquals("", utilizador2.getCodigo());
      assertEquals("", utilizador4.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador4.getPassword());
      assertEquals("Utilizador", utilizador4.getTypeUser());
      assertEquals("", utilizador4.getCodigo());
      assertEquals("", utilizador4.getNome());
      assertEquals(1.0, utilizador4.getLongitude(), 0.01);
      assertEquals(1.0, utilizador4.getLatitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador4));
      assertFalse(utilizador0.equals((Object)utilizador5));
      assertFalse(utilizador0.equals((Object)utilizador6));
      assertEquals(double1, double0, 0.01);
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador6));
      assertTrue(utilizador1.equals((Object)utilizador5));
      assertTrue(utilizador1.equals((Object)utilizador4));
      assertTrue(utilizador2.equals((Object)utilizador3));
      assertTrue(utilizador2.equals((Object)utilizador5));
      assertTrue(utilizador2.equals((Object)utilizador6));
      assertTrue(utilizador2.equals((Object)utilizador1));
      assertTrue(utilizador2.equals((Object)utilizador4));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador4.equals((Object)utilizador2));
      assertFalse(utilizador4.equals((Object)utilizador0));
      assertTrue(utilizador4.equals((Object)utilizador3));
      assertTrue(utilizador4.equals((Object)utilizador1));
      assertTrue(utilizador4.equals((Object)utilizador6));
      assertTrue(utilizador4.equals((Object)utilizador5));
      
      String string5 = utilizador6.printEncomendasPorEntregar();
      assertEquals("N\u00E3o existem encomendas por entregar\n", string5);
      assertNotNull(string5);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador3);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador4);
      assertNotSame(utilizador0, utilizador5);
      assertNotSame(utilizador0, utilizador6);
      assertNotSame(utilizador1, utilizador3);
      assertNotSame(utilizador1, utilizador6);
      assertNotSame(utilizador1, utilizador5);
      assertNotSame(utilizador1, utilizador4);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador5, utilizador2);
      assertNotSame(utilizador5, utilizador1);
      assertNotSame(utilizador5, utilizador4);
      assertNotSame(utilizador5, utilizador3);
      assertNotSame(utilizador5, utilizador6);
      assertNotSame(utilizador5, utilizador0);
      assertNotSame(utilizador6, utilizador3);
      assertNotSame(utilizador6, utilizador0);
      assertNotSame(utilizador6, utilizador5);
      assertNotSame(utilizador6, utilizador4);
      assertNotSame(utilizador6, utilizador1);
      assertNotSame(utilizador6, utilizador2);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", utilizador1.getEmail());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador1.getPassword());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals(1.0, utilizador1.getLatitude(), 0.01);
      assertEquals(1.0, utilizador1.getLongitude(), 0.01);
      assertEquals(1.0, utilizador5.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador5.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador5.getPassword());
      assertEquals("", utilizador5.getEmail());
      assertEquals("", utilizador5.getNome());
      assertEquals(1.0, utilizador5.getLatitude(), 0.01);
      assertEquals("", utilizador5.getCodigo());
      assertEquals("Utilizador", utilizador6.getTypeUser());
      assertEquals("QL#IYDc1>z=f31ii3@", utilizador6.getPassword());
      assertEquals("", utilizador6.getNome());
      assertEquals(1.0, utilizador6.getLatitude(), 0.01);
      assertEquals("", utilizador6.getEmail());
      assertEquals("", utilizador6.getCodigo());
      assertEquals(1.0, utilizador6.getLongitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador3));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador0.equals((Object)utilizador4));
      assertFalse(utilizador0.equals((Object)utilizador5));
      assertFalse(utilizador0.equals((Object)utilizador6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(utilizador1.equals((Object)utilizador3));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador6));
      assertTrue(utilizador1.equals((Object)utilizador5));
      assertTrue(utilizador1.equals((Object)utilizador4));
      assertTrue(utilizador5.equals((Object)utilizador3));
      assertTrue(utilizador5.equals((Object)utilizador6));
      assertTrue(utilizador5.equals((Object)utilizador1));
      assertTrue(utilizador5.equals((Object)utilizador4));
      assertFalse(utilizador5.equals((Object)utilizador0));
      assertTrue(utilizador5.equals((Object)utilizador2));
      assertFalse(utilizador6.equals((Object)utilizador0));
      assertTrue(utilizador6.equals((Object)utilizador2));
      assertTrue(utilizador6.equals((Object)utilizador5));
      assertTrue(utilizador6.equals((Object)utilizador3));
      assertTrue(utilizador6.equals((Object)utilizador1));
      assertTrue(utilizador6.equals((Object)utilizador4));
      
      try { 
        utilizador6.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Utilizador utilizador1 = new Utilizador("", "Q*tb", "089G%'=! iGfv Sgxk", "_yr{SUW`j)1aG8q&~", 1105.570492, (-353.18642), arrayList0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", utilizador1.getEmail());
      assertEquals(1105.570492, utilizador1.getLatitude(), 0.01);
      assertEquals("Q*tb", utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("_yr{SUW`j)1aG8q&~", utilizador1.getNome());
      assertEquals("089G%'=! iGfv Sgxk", utilizador1.getCodigo());
      assertEquals((-353.18642), utilizador1.getLongitude(), 0.01);
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      Utilizador utilizador2 = new Utilizador(utilizador1);
      assertNotNull(utilizador2);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", utilizador1.getEmail());
      assertEquals(1105.570492, utilizador1.getLatitude(), 0.01);
      assertEquals("Q*tb", utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("_yr{SUW`j)1aG8q&~", utilizador1.getNome());
      assertEquals("089G%'=! iGfv Sgxk", utilizador1.getCodigo());
      assertEquals((-353.18642), utilizador1.getLongitude(), 0.01);
      assertEquals((-353.18642), utilizador2.getLongitude(), 0.01);
      assertEquals("Q*tb", utilizador2.getPassword());
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("_yr{SUW`j)1aG8q&~", utilizador2.getNome());
      assertEquals("", utilizador2.getEmail());
      assertEquals(1105.570492, utilizador2.getLatitude(), 0.01);
      assertEquals("089G%'=! iGfv Sgxk", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      
      utilizador2.setLatitude(1105.570492);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador0);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", utilizador1.getEmail());
      assertEquals(1105.570492, utilizador1.getLatitude(), 0.01);
      assertEquals("Q*tb", utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("_yr{SUW`j)1aG8q&~", utilizador1.getNome());
      assertEquals("089G%'=! iGfv Sgxk", utilizador1.getCodigo());
      assertEquals((-353.18642), utilizador1.getLongitude(), 0.01);
      assertEquals((-353.18642), utilizador2.getLongitude(), 0.01);
      assertEquals("Q*tb", utilizador2.getPassword());
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertEquals("_yr{SUW`j)1aG8q&~", utilizador2.getNome());
      assertEquals("", utilizador2.getEmail());
      assertEquals(1105.570492, utilizador2.getLatitude(), 0.01);
      assertEquals("089G%'=! iGfv Sgxk", utilizador2.getCodigo());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador2));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      
      double double0 = utilizador1.getLatitude();
      assertEquals(1105.570492, double0, 0.01);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador1, utilizador2);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", utilizador1.getEmail());
      assertEquals(1105.570492, utilizador1.getLatitude(), 0.01);
      assertEquals("Q*tb", utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("_yr{SUW`j)1aG8q&~", utilizador1.getNome());
      assertEquals("089G%'=! iGfv Sgxk", utilizador1.getCodigo());
      assertEquals((-353.18642), utilizador1.getLongitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador0.equals((Object)utilizador2));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(utilizador1.equals((Object)utilizador2));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      
      String string0 = utilizador0.getCodigo();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      
      double double0 = utilizador0.getLongitude();
      assertEquals(0.0, double0, 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      String string1 = "Vendedor: ";
      String string2 = "";
      double double0 = 652.25663768682;
      ArrayList<Encomenda> arrayList0 = null;
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador("", "", "Vendedor: ", "", 652.25663768682, 0.0, (ArrayList<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      
      utilizador0.setNome("D");
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("D", utilizador0.getNome());
      
      utilizador0.setPassword("Dl");
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("Dl", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("D", utilizador0.getNome());
      
      String string0 = utilizador0.printEncomendasPorEntregar();
      assertEquals("N\u00E3o existem encomendas por entregar\n", string0);
      assertNotNull(string0);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("Dl", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("D", utilizador0.getNome());
      
      // Undeclared exception!
      try { 
        utilizador0.setEncomendas((ArrayList<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      
      double double0 = utilizador0.getLatitude();
      assertEquals(0.0, double0, 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      utilizador0.setLongitude(0.0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      
      utilizador0.setNome("Longitude: ");
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("Longitude: ", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      
      utilizador0.setLatitude((-1.0));
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("Longitude: ", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals((-1.0), utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      
      utilizador0.setNome("ZMvMZ");
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("ZMvMZ", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals((-1.0), utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "vy1X>.Hh{WI*&";
      double double0 = (-1552.69948982447);
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Utilizador utilizador1 = new Utilizador("VxG8~fyZC", "VxG8~fyZC", "vy1X>.Hh{WI*&", "VxG8~fyZC", (-1552.69948982447), (-1552.69948982447), arrayList0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("VxG8~fyZC", utilizador1.getNome());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("VxG8~fyZC", utilizador1.getPassword());
      assertEquals((-1552.69948982447), utilizador1.getLongitude(), 0.01);
      assertEquals("VxG8~fyZC", utilizador1.getEmail());
      assertEquals("vy1X>.Hh{WI*&", utilizador1.getCodigo());
      assertEquals((-1552.69948982447), utilizador1.getLatitude(), 0.01);
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      // Undeclared exception!
      try { 
        utilizador1.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Utilizador utilizador1 = new Utilizador((String) null, (String) null, "Latitude: ", "C\u00F3digo da loja: ", 0.0, 0.0, arrayList0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("Latitude: ", utilizador1.getCodigo());
      assertEquals("C\u00F3digo da loja: ", utilizador1.getNome());
      assertNull(utilizador1.getPassword());
      assertNull(utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      
      boolean boolean0 = utilizador1.equals((Object) null);
      assertFalse(boolean0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("Latitude: ", utilizador1.getCodigo());
      assertEquals("C\u00F3digo da loja: ", utilizador1.getNome());
      assertNull(utilizador1.getPassword());
      assertNull(utilizador1.getEmail());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertFalse(utilizador0.equals((Object)utilizador1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      
      utilizador0.setLatitude(0.0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      
      utilizador0.setTypeUser("Encomenda: ");
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("Encomenda: ", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      
      String string0 = utilizador0.getNome();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("Encomenda: ", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      
      double double0 = utilizador0.getLongitude();
      assertEquals(0.0, double0, 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getPassword());
      assertEquals("Encomenda: ", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      
      Encomenda encomenda0 = null;
      // Undeclared exception!
      try { 
        utilizador0.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = null;
      Utilizador utilizador1 = null;
      try {
        utilizador1 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UtilizadorSistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador1.getEmail());
      assertEquals("", utilizador1.getTypeUser());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getCodigo());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals("", utilizador1.getNome());
      assertEquals("", utilizador1.getPassword());
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      utilizador0.setCodigo("h;8n2Y)m%On/{");
      assertNotSame(utilizador0, utilizador1);
      assertEquals("", utilizador0.getNome());
      assertEquals("h;8n2Y)m%On/{", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertTrue(utilizador0.equals((Object)utilizador1));
      
      utilizador0.setTypeUser("");
      assertNotSame(utilizador0, utilizador1);
      assertEquals("", utilizador0.getNome());
      assertEquals("h;8n2Y)m%On/{", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getPassword());
      assertTrue(utilizador0.equals((Object)utilizador1));
      
      Encomenda encomenda0 = null;
      // Undeclared exception!
      try { 
        utilizador1.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
      
      utilizador0.setCodigo("");
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getTypeUser());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      
      String string0 = utilizador0.toString();
      assertEquals(" <--- O utilizador \u00E9: \n\n\nC\u00F3digo: \nNome: \nLatitude: 0.0\nLongitude: 0.0\n", string0);
      assertNotNull(string0);
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getNome());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      
      try { 
        utilizador0.devolveEncomenda((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "gOCd`E5#ak.~QsyNH_";
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertNotNull(utilizador1);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      ArrayList<Encomenda> arrayList0 = utilizador1.getEncomendas();
      assertNotNull(arrayList0);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(utilizador1, utilizador0);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      Utilizador utilizador2 = new Utilizador("", "", "", "gOCd`E5#ak.~QsyNH_", 1.0, 1.0, arrayList0);
      assertNotNull(utilizador2);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getEmail());
      assertEquals("", utilizador0.getCodigo());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador1.getCodigo());
      assertEquals("", utilizador1.getPassword());
      assertEquals("", utilizador1.getNome());
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
      assertEquals("", utilizador1.getTypeUser());
      assertEquals("", utilizador1.getEmail());
      assertEquals(0.0, utilizador1.getLatitude(), 0.01);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1.0, utilizador2.getLongitude(), 0.01);
      assertEquals("", utilizador2.getCodigo());
      assertEquals(1.0, utilizador2.getLatitude(), 0.01);
      assertEquals("", utilizador2.getEmail());
      assertEquals("", utilizador2.getPassword());
      assertEquals("gOCd`E5#ak.~QsyNH_", utilizador2.getNome());
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertTrue(utilizador0.equals((Object)utilizador1));
      assertTrue(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador1));
      
      // Undeclared exception!
      try { 
        utilizador2.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = null;
      Utilizador utilizador0 = new Utilizador();
      assertNotNull(utilizador0);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      assertNotNull(arrayList0);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Utilizador utilizador1 = new Utilizador("Utilizador", "Utilizador", "oz|5RAJj3;", (String) null, 1736.6471503140338, 1736.6471503140338, arrayList0);
      assertNotNull(utilizador1);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1736.6471503140338, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("oz|5RAJj3;", utilizador1.getCodigo());
      assertNull(utilizador1.getNome());
      assertEquals(1736.6471503140338, utilizador1.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getEmail());
      assertFalse(utilizador1.equals((Object)utilizador0));
      
      ArrayList<Encomenda> arrayList1 = utilizador1.getEncomendas();
      assertNotNull(arrayList1);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(arrayList1, arrayList0);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertEquals("", utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1736.6471503140338, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("oz|5RAJj3;", utilizador1.getCodigo());
      assertNull(utilizador1.getNome());
      assertEquals(1736.6471503140338, utilizador1.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getEmail());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      utilizador0.setEmail((String) null);
      assertNotSame(utilizador0, utilizador1);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertNull(utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertFalse(utilizador0.equals((Object)utilizador1));
      
      Utilizador utilizador2 = utilizador1.clone();
      assertNotNull(utilizador2);
      assertNotSame(utilizador0, utilizador2);
      assertNotSame(utilizador0, utilizador1);
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(utilizador1, utilizador2);
      assertNotSame(utilizador1, utilizador0);
      assertNotSame(utilizador2, utilizador1);
      assertNotSame(utilizador2, utilizador0);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
      assertEquals("", utilizador0.getTypeUser());
      assertEquals("", utilizador0.getCodigo());
      assertEquals("", utilizador0.getPassword());
      assertEquals("", utilizador0.getNome());
      assertNull(utilizador0.getEmail());
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1736.6471503140338, utilizador1.getLatitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getPassword());
      assertEquals("Utilizador", utilizador1.getTypeUser());
      assertEquals("oz|5RAJj3;", utilizador1.getCodigo());
      assertNull(utilizador1.getNome());
      assertEquals(1736.6471503140338, utilizador1.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador1.getEmail());
      assertNull(utilizador2.getNome());
      assertEquals(1736.6471503140338, utilizador2.getLongitude(), 0.01);
      assertEquals("Utilizador", utilizador2.getEmail());
      assertEquals(1736.6471503140338, utilizador2.getLatitude(), 0.01);
      assertEquals("oz|5RAJj3;", utilizador2.getCodigo());
      assertEquals("Utilizador", utilizador2.getPassword());
      assertEquals("Utilizador", utilizador2.getTypeUser());
      assertFalse(utilizador0.equals((Object)utilizador1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(utilizador1.equals((Object)utilizador0));
      assertFalse(utilizador2.equals((Object)utilizador0));
      assertTrue(utilizador2.equals((Object)utilizador1));
      
      // Undeclared exception!
      try { 
        utilizador2.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome("$~E");
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.setLatitude(796.677245366);
      utilizador1.getNome();
      utilizador0.setLatitude((-846.2573808209763));
      utilizador0.equals("$~E");
      utilizador1.setCodigo("$~E");
      Utilizador utilizador2 = utilizador0.clone();
      utilizador1.printEncomendasRecebidas();
      utilizador0.printEncomendasRecebidas();
      utilizador1.setLatitude((-846.2573808209763));
      utilizador0.toString();
      utilizador2.getLongitude();
      utilizador0.equals("N\u00E3o existem encomendas recebidas\n");
      utilizador1.setNome((String) null);
      utilizador2.setLongitude(0.0);
      utilizador2.setLongitude((-365.6599933198174));
      utilizador2.printEncomendasRecebidas();
      utilizador0.printEncomendasRecebidas();
      utilizador0.setLongitude(0.0);
      utilizador2.toString();
      // Undeclared exception!
      try { 
        utilizador2.updateEncomendaPronta((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.toString();
      utilizador0.setNome("D");
      utilizador0.setPassword("Dl");
      utilizador0.printEncomendasPorEntregar();
      // Undeclared exception!
      try { 
        utilizador0.setEncomendas((ArrayList<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setPassword("Kl");
      try { 
        utilizador0.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      ArrayList<Encomenda> arrayList0 = utilizador1.getEncomendas();
      utilizador1.setNome((String) null);
      utilizador1.printEncomendasPorEntregar();
      utilizador1.setNome("");
      utilizador1.setEncomendas(arrayList0);
      utilizador1.toString();
      ArrayList<Encomenda> arrayList1 = utilizador1.getEncomendas();
      utilizador0.printEncomendasPorEntregar();
      utilizador1.printEncomendasRecebidas();
      Utilizador utilizador2 = utilizador1.clone();
      utilizador2.printEncomendasRecebidas();
      Utilizador utilizador3 = utilizador1.clone();
      double double0 = 0.0;
      utilizador3.setLatitude(0.0);
      utilizador3.setLongitude(1510.350825999);
      utilizador2.setLatitude(2359.60742322793);
      utilizador3.printEncomendasPorEntregar();
      String string0 = "(P&u";
      double double1 = 1031.277;
      Utilizador utilizador4 = new Utilizador("(P&u", "Jm~kYP", "N\u00E3o existem encomendas recebidas\n", "N\u00E3o existem encomendas por entregar\n", 0.0, 1031.277, arrayList1);
      Utilizador utilizador5 = new Utilizador(utilizador4);
      try { 
        utilizador5.devolveEncomenda("N\u00E3o existem encomendas por entregar\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("Longitude: ", "gp\"XGLM", "Longitude: ", "", 1672.689543, 1672.689543, arrayList0);
      Encomenda encomenda0 = null;
      utilizador0.setNome("gp\"XGLM");
      // Undeclared exception!
      try { 
        utilizador1.updateEncomendaLoja((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }
}
