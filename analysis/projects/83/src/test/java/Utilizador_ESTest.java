/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 23 21:42:58 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setCodigo("3}T1GDlc2yJhR-");
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.getEncomendas();
      utilizador1.setLongitude(0.0);
      utilizador1.setLatitude((-1.0));
      utilizador1.equals("5x");
      utilizador1.getEncomendas();
      utilizador1.setLatitude(3546.884658961462);
      utilizador1.getLatitude();
      utilizador1.toString();
      try { 
        utilizador0.devolveEncomenda((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getEncomendas();
      utilizador0.printEncomendasRecebidas();
      Utilizador utilizador1 = utilizador0.clone();
      utilizador1.setNome((String) null);
      String string0 = utilizador1.getNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("", "", "", "", (-1494.0), (-1494.0), arrayList0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      boolean boolean0 = utilizador2.equals(utilizador1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      ArrayList<Encomenda> arrayList0 = utilizador1.getEncomendas();
      utilizador1.toString();
      utilizador0.setPassword("");
      Utilizador utilizador2 = new Utilizador((String) null, (String) null, (String) null, (String) null, 0.0, 0.0, arrayList0);
      utilizador2.getCodigo();
      try { 
        utilizador0.devolveEncomenda((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.printEncomendasPorEntregar();
      utilizador0.setNome("M5^\"8_K");
      utilizador0.setTypeUser("M5^\"8_K");
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      utilizador0.setEncomendas(arrayList0);
      // Undeclared exception!
      try { 
        utilizador0.updateEncomendaLoja((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = null;
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setCodigo("3}T1GDlc2yJhR-");
      Utilizador utilizador1 = new Utilizador(utilizador0);
      ArrayList<Encomenda> arrayList0 = utilizador1.getEncomendas();
      Utilizador utilizador2 = new Utilizador((String) null, "5x", "5x", (String) null, 1882.53711968, 1882.53711968, arrayList0);
      utilizador1.setLongitude(0.0);
      utilizador2.setLatitude((-1.0));
      utilizador2.equals("5x");
      utilizador1.getEncomendas();
      utilizador1.setLatitude(3546.884658961462);
      utilizador2.getLatitude();
      utilizador1.toString();
      try { 
        utilizador2.devolveEncomenda((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = utilizador0.clone();
      String string0 = "ENCOMENDAS REALIZADAS PELO USER: ";
      utilizador1.setCodigo("ENCOMENDAS REALIZADAS PELO USER: ");
      ArrayList<Encomenda> arrayList0 = utilizador1.getEncomendas();
      utilizador1.setEmail("ENCOMENDAS REALIZADAS PELO USER: ");
      utilizador0.setEncomendas(arrayList0);
      utilizador0.setEncomendas(arrayList0);
      utilizador1.printEncomendasPorEntregar();
      String string1 = "";
      Encomenda encomenda0 = null;
      utilizador1.printEncomendasRecebidas();
      // Undeclared exception!
      try { 
        utilizador1.updateEncomendaPronta((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("", "", "N\u00E3o existem encomendas recebidas\n", "", (-1806.0), 0.0, arrayList0);
      utilizador1.printEncomendasPorEntregar();
      Utilizador utilizador2 = new Utilizador(utilizador1);
      utilizador2.setLatitude((-1806.0));
      utilizador2.getCodigo();
      utilizador1.setCodigo("N\u00E3o existem encomendas recebidas\n");
      utilizador2.equals("N\u00E3o existem encomendas recebidas\n");
      utilizador1.setEmail("MI7e0!MQ ,z5px>aM:8");
      ArrayList<Encomenda> arrayList1 = utilizador0.getEncomendas();
      utilizador1.setEncomendas(arrayList0);
      Utilizador utilizador3 = utilizador1.clone();
      utilizador3.printEncomendasPorEntregar();
      utilizador3.clone();
      utilizador2.clone();
      utilizador3.getCodigo();
      utilizador2.setEncomendas(arrayList1);
      Utilizador utilizador4 = utilizador2.clone();
      try { 
        utilizador4.devolveEncomenda((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setLatitude(4108.3306152674);
      Utilizador utilizador1 = new Utilizador(utilizador0);
      ArrayList<Encomenda> arrayList0 = utilizador1.getEncomendas();
      utilizador0.setLatitude(0.0);
      Utilizador utilizador2 = new Utilizador("\n", "*({2e^.`k;k,", "M17O", "", 4108.3306152674, 4108.3306152674, arrayList0);
      utilizador2.getLongitude();
      utilizador2.setCodigo("\n");
      utilizador0.getLongitude();
      try { 
        utilizador0.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "W[Q7]cxUtki{k}*#";
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("W[Q7]cxUtki{k}*#", "W[Q7]cxUtki{k}*#", "W[Q7]cxUtki{k}*#", "W[Q7]cxUtki{k}*#", 3670.9927128467743, 0.0, arrayList0);
      utilizador1.setPassword("Latitude: ");
      Utilizador utilizador2 = utilizador0.clone();
      utilizador2.setLatitude(941.023592);
      utilizador2.setCodigo("FS{%=jPg!)O5m3oWuD");
      Utilizador utilizador3 = new Utilizador(utilizador1);
      Utilizador utilizador4 = utilizador3.clone();
      utilizador3.getCodigo();
      try { 
        utilizador4.devolveEncomenda("<=H'@yF9x7VZ%~8#");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEmail("");
      // Undeclared exception!
      try { 
        utilizador0.setEncomendas((ArrayList<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("]}u&^G\"T}F$M&2+\"9/", "Longitude: ", ">+?wzaFjC", "2hz;0", (-965.54367524), (-965.54367524), arrayList0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      utilizador2.getLongitude();
      String string0 = utilizador2.getCodigo();
      assertEquals(">+?wzaFjC", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.printEncomendasPorEntregar();
      utilizador0.setLongitude((-1.0));
      utilizador0.getCodigo();
      utilizador0.toString();
      utilizador0.setNome("N\u00E3o existem encomendas por entregar\n");
      utilizador0.printEncomendasPorEntregar();
      utilizador0.setCodigo("");
      utilizador0.getCodigo();
      utilizador0.clone();
      assertEquals((-1.0), utilizador0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setEmail("BJgR%l}h5'C@-\"8");
      utilizador0.toString();
      utilizador0.equals(" <--- O utilizador \u00E9: \n\n\nC\u00F3digo: \nNome: \nLatitude: 0.0\nLongitude: 0.0\n");
      utilizador0.getCodigo();
      try { 
        utilizador0.devolveEncomenda("X");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertTrue(utilizador1.equals((Object)utilizador0));
      
      ArrayList<Encomenda> arrayList0 = utilizador1.getEncomendas();
      Utilizador utilizador2 = new Utilizador("ENCOMENDAS REALIZADAS PELO USER: ", "!B;%", "ENCOMENDAS REALIZADAS PELO USER: ", "", 0.0, 0.0, arrayList0);
      String string0 = utilizador2.getCodigo();
      assertEquals("ENCOMENDAS REALIZADAS PELO USER: ", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setLongitude(1188.2378);
      utilizador0.setNome("Utilizador");
      Utilizador utilizador1 = utilizador0.clone();
      utilizador1.printEncomendasRecebidas();
      utilizador1.setPassword("D1qH3\"!N&");
      utilizador1.printEncomendasRecebidas();
      utilizador0.toString();
      utilizador1.getNome();
      utilizador0.clone();
      try { 
        utilizador0.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("", "Utilizador", "Utilizador", "}09;,(MgW4F", (-1.0), (-1.0), arrayList0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      String string0 = utilizador2.getNome();
      assertEquals("}09;,(MgW4F", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "yBf7x1(i<T~2T";
      Utilizador utilizador0 = new Utilizador();
      utilizador0.clone();
      utilizador0.setPassword("");
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("smx}z;V`o dX^", "yBf7x1(i<T~2T", "", "smx}z;V`o dX^", 0.0, 0.0, arrayList0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      String string1 = "PQX6v,F?]SR";
      utilizador0.setTypeUser((String) null);
      utilizador1.printEncomendasRecebidas();
      utilizador2.setTypeUser("");
      utilizador2.setNome("UtilizadorSistema");
      Encomenda encomenda0 = null;
      utilizador0.toString();
      // Undeclared exception!
      try { 
        utilizador1.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = null;
      Utilizador utilizador1 = null;
      try {
        utilizador1 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UtilizadorSistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.printEncomendasRecebidas();
      utilizador0.setEmail(";Wp_6");
      utilizador0.getEncomendas();
      Utilizador utilizador1 = utilizador0.clone();
      utilizador1.setEmail("oou4Hp$r{");
      double double0 = utilizador0.getLatitude();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.printEncomendasPorEntregar();
      Encomenda encomenda0 = null;
      // Undeclared exception!
      try { 
        utilizador0.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      utilizador0.setEncomendas(arrayList0);
      utilizador0.toString();
      utilizador0.getLongitude();
      Utilizador utilizador1 = utilizador0.clone();
      // Undeclared exception!
      try { 
        utilizador1.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.getNome();
      utilizador0.setNome("");
      utilizador0.setLongitude(1.0);
      String string0 = "";
      try { 
        utilizador0.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.toString();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      utilizador1.setEncomendas(arrayList0);
      try { 
        utilizador0.devolveEncomenda(" <--- O utilizador \u00E9: \n\n\nC\u00F3digo: \nNome: \nLatitude: 0.0\nLongitude: 0.0\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "Longitude: ";
      String string1 = "kVmd*U@qi$i";
      double double0 = 0.0;
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("Longitude: ", "Longitude: ", "Longitude: ", "kVmd*U@qi$i", 0.0, 93.2903405418171, arrayList0);
      Encomenda encomenda0 = null;
      // Undeclared exception!
      try { 
        utilizador1.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador("Latitude: ", "Latitude: ", "Latitude: ", "Comprador: ", (-347.2333), 177.9563338811585, (ArrayList<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      utilizador0.setEncomendas(arrayList0);
      double double0 = 1990.4533761348;
      utilizador0.setLatitude(1990.4533761348);
      try { 
        utilizador0.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.printEncomendasRecebidas();
      try { 
        utilizador0.devolveEncomenda("N\u00E3o existem encomendas recebidas\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setLatitude(0.0);
      utilizador0.printEncomendasPorEntregar();
      double double0 = (-2192.90516);
      String string0 = null;
      // Undeclared exception!
      try { 
        utilizador0.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("}dz~/TWUgVQ|n8-_", "}dz~/TWUgVQ|n8-_", "}dz~/TWUgVQ|n8-_", "}dz~/TWUgVQ|n8-_", 871.568, 0.0, arrayList0);
      assertEquals(0.0, utilizador1.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      try { 
        utilizador0.devolveEncomenda("wPXl,[ev]@[@");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setCodigo("");
      utilizador0.setPassword("N\u00E3o existem encomendas recebidas\n");
      utilizador0.setLatitude(0.0);
      utilizador0.getEncomendas();
      assertEquals(0.0, utilizador0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("Encomenda", "", "Encomenda", "", 0.0, 0.0, arrayList0);
      Utilizador utilizador2 = new Utilizador(utilizador1);
      String string0 = utilizador2.printEncomendasPorEntregar();
      assertEquals("N\u00E3o existem encomendas por entregar\n", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      try { 
        utilizador1.devolveEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.printEncomendasPorEntregar();
      utilizador0.setCodigo("N\u00E3o existem encomendas por entregar\n");
      utilizador0.printEncomendasRecebidas();
      utilizador0.setTypeUser("'v");
      Encomenda encomenda0 = null;
      // Undeclared exception!
      try { 
        utilizador0.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = null;
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setCodigo("3}T1GDlc2yJhR-");
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.getEncomendas();
      utilizador1.setLongitude(0.0);
      utilizador1.setLatitude((-1.0));
      utilizador1.equals(">");
      utilizador1.getEncomendas();
      utilizador1.setLatitude(3546.884658961462);
      utilizador1.getLatitude();
      utilizador1.toString();
      try { 
        utilizador0.devolveEncomenda((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.printEncomendasRecebidas();
      ArrayList<Encomenda> arrayList0 = utilizador0.getEncomendas();
      Utilizador utilizador1 = new Utilizador("c$T", "c$T", "", "\n", 0.0, 0.0, arrayList0);
      utilizador1.printEncomendasRecebidas();
      try { 
        utilizador0.devolveEncomenda("N\u00E3o existem encomendas recebidas\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.updateEncomendaLoja((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      Utilizador utilizador1 = new Utilizador(utilizador0);
      utilizador1.setNome("cE-B6oN!WVEd'$l");
      String string0 = utilizador1.toString();
      assertEquals(" <--- O utilizador \u00E9: \n\n\nC\u00F3digo: \nNome: cE-B6oN!WVEd'$l\nLatitude: 0.0\nLongitude: 0.0\n", string0);
      
      Utilizador utilizador2 = utilizador1.clone();
      utilizador2.setNome(" <--- O utilizador \u00E9: \n\n\nC\u00F3digo: \nNome: cE-B6oN!WVEd'$l\nLatitude: 0.0\nLongitude: 0.0\n");
      utilizador2.setCodigo("cE-B6oN!WVEd'$l");
      utilizador2.getCodigo();
      utilizador2.getCodigo();
      utilizador0.setLongitude(0.0);
      assertEquals(0.0, utilizador0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.setNome("VjM:}. eXPJX=:8 ");
      Encomenda encomenda0 = null;
      utilizador0.setCodigo("VjM:}. eXPJX=:8 ");
      utilizador0.getEncomendas();
      // Undeclared exception!
      try { 
        utilizador0.updateEncomendaPronta((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }
}
