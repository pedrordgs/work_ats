/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 25 18:05:33 GMT 2021
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntario_ESTest extends Voluntario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      LocalDate localDate0 = voluntario0.getInicio_transporte();
      voluntario0.existe("Desinfetante");
      voluntario0.equals(localDate0);
      voluntario0.getRaio_acao();
      voluntario0.getNome();
      voluntario0.getPreparadas();
      voluntario0.existe("");
      voluntario0.setNome("");
      voluntario0.setVelocidade(2469);
      voluntario0.calculaAtrasos();
      voluntario0.getLongitude();
      voluntario0.getInicio_transporte();
      voluntario0.getPreparadas();
      voluntario0.getVelocidade();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda("Desinfetante", "", "B!^5Ao*dEn.", 0.0, "B!^5Ao*dEn.", "[|SA5=RzqmNl", hashMap0, false, localDateTime0, false, true, false);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      linkedList0.add(encomenda1);
      Voluntario voluntario0 = new Voluntario("Desinfetante", "Desinfetante", "Desinfetante", "Desinfetante", false, 0.0, 0.0, (LocalDate) null, (-6245.696927), linkedList0, 0.0, 0, false, 1058, 0);
      voluntario0.updateEncomendaPreparada(encomenda1);
      Encomenda encomenda2 = new Encomenda();
      encomenda2.setVendedor("-wqY*-X");
      voluntario0.updateEncomendaLoja(encomenda2);
      voluntario0.getNaoEntregue();
      voluntario0.clone();
      voluntario0.existe((String) null);
      voluntario0.getCodigo();
      // Undeclared exception!
      try { 
        MockLocalTime.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.clone();
      encomenda0.clone();
      linkedList0.add(encomenda0);
      Voluntario voluntario0 = new Voluntario(" e ", "Produto: ", "Produto: ", " e ", true, 0.0, 1947.7185840171057, localDate0, 0.0, linkedList0, 0.0, (-4170), true, (-1354), (-1255));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.setVelocidade((-4170));
      voluntario0.setDisponibilidade(true);
      voluntario1.setCodigo(" e ");
      voluntario1.getLatitude();
      voluntario1.getClassificacao();
      voluntario1.setCodigo("Produto: ");
      voluntario1.removeEncomenda(" e ");
      voluntario1.getLatitude();
      Voluntario voluntario2 = voluntario0.clone();
      voluntario1.clone();
      voluntario1.setClassificacao((-1354));
      voluntario1.getNaoEntregue();
      voluntario1.setNome(" e ");
      voluntario2.getLongitude();
      // Undeclared exception!
      try { 
        MockLocalDateTime.from(localDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: 1969-12-31 of type java.time.LocalDate
         //
         verifyException("java.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.clone();
      linkedList0.add(encomenda0);
      Voluntario voluntario0 = new Voluntario("C\u00F3digo de volunt\u00E1rio: ", "Produto: ", "Produto: ", "C\u00F3digo de volunt\u00E1rio: ", true, (-1.4250092501405767), 1947.7185840171057, localDate0, 0.0, linkedList0, 0.0, (-4170), true, (-1354), (-1255));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.setVelocidade((-4170));
      voluntario0.setDisponibilidade(true);
      voluntario1.setCodigo("C\u00F3digo de volunt\u00E1rio: ");
      voluntario1.getLatitude();
      voluntario1.getClassificacao();
      voluntario1.setCodigo("Produto: ");
      voluntario1.removeEncomenda("C\u00F3digo de volunt\u00E1rio: ");
      voluntario1.getLatitude();
      voluntario0.clone();
      voluntario1.clone();
      voluntario1.setClassificacao((-1354));
      voluntario1.getNaoEntregue();
      voluntario1.getPreparadas();
      voluntario1.setNome("C\u00F3digo de volunt\u00E1rio: ");
      // Undeclared exception!
      try { 
        MockLocalDateTime.from(localDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: 1969-12-31 of type java.time.LocalDate
         //
         verifyException("java.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo(" e ");
      encomenda0.clone();
      linkedList0.add(encomenda0);
      Voluntario voluntario0 = new Voluntario(" e ", "Produto: ", "Produto: ", " e ", true, 0.0, 1947.7185840171057, localDate0, 0.0, linkedList0, 0.0, (-4170), true, (-1354), (-1255));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.setVelocidade((-4170));
      voluntario0.setDisponibilidade(true);
      voluntario1.setCodigo(" e ");
      voluntario1.getLatitude();
      voluntario1.getClassificacao();
      voluntario1.setCodigo("Produto: ");
      voluntario1.removeEncomenda(" e ");
      voluntario1.getLatitude();
      Voluntario voluntario2 = voluntario0.clone();
      Double double0 = new Double((-4170));
      voluntario2.updateRate(double0);
      voluntario1.clone();
      voluntario1.setClassificacao((-1354));
      voluntario1.getNaoEntregue();
      voluntario1.setNome(" e ");
      // Undeclared exception!
      try { 
        MockLocalDateTime.from(localDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: 1969-12-31 of type java.time.LocalDate
         //
         verifyException("java.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1767L);
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      boolean boolean1 = true;
      Voluntario voluntario1 = new Voluntario("", "", "", "", true, 2475.0710034080507, 2475.0710034080507, localDate0, 1767L, list0, 1767L, (-1910055585), true, (-1073741822), (-44236554));
      Voluntario voluntario2 = new Voluntario(voluntario1);
      Voluntario voluntario3 = voluntario2.clone();
      voluntario3.setInicio_Transporte(localDate0);
      try { 
        voluntario2.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setPassword("");
      voluntario0.getHistorico();
      Double double0 = new Double(1.0);
      voluntario0.updateRate(double0);
      voluntario0.toString();
      voluntario0.getInicio_transporte();
      voluntario0.getPreparadas();
      voluntario0.getNome();
      voluntario0.clone();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getPreparadas();
      voluntario0.existe(" e ");
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.setVelocidade((-1445));
      Voluntario voluntario1 = voluntario0.clone();
      voluntario1.setClassificacao((-1445));
      voluntario1.setClassificacao(0.0);
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      encomenda0.setData(localDateTime0);
      encomenda0.equals(list0);
      encomenda0.setCodigo_loja(" e ");
      voluntario1.updateEncomendaPreparada(encomenda0);
      voluntario1.getPreparadas();
      Random.setNextRandom((-2064951910));
      voluntario0.setClassificacao((-1445));
      voluntario1.getLongitude();
      Voluntario voluntario2 = new Voluntario();
      voluntario0.equals(voluntario2);
      voluntario1.updateEncomenda(encomenda0);
      LocalDateTime localDateTime1 = MockLocalDateTime.now();
      voluntario1.getInfoEncomendas(localDateTime1, localDateTime1);
      voluntario0.updateEncomenda(encomenda0);
      voluntario2.getInicio_transporte();
      voluntario1.clone();
      try { 
        voluntario0.getEncomenda("e?QF[~z)Mg,ypcA S*");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.clone();
      linkedList0.add(encomenda0);
      Voluntario voluntario0 = new Voluntario(" e ", "Produto: ", "Produto: ", " e ", true, (-0.9571637319942305), 1956.2767953613272, localDate0, 0.0, linkedList0, 0.0, (-4170), true, 2147483645, (-1255));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.setVelocidade((-4170));
      voluntario0.setDisponibilidade(true);
      voluntario1.setCodigo(" e ");
      voluntario1.getLatitude();
      voluntario1.getClassificacao();
      voluntario1.setCodigo("Produto: ");
      voluntario1.removeEncomenda(" e ");
      voluntario1.getLatitude();
      voluntario0.clone();
      voluntario1.clone();
      voluntario1.setClassificacao(2147483645);
      voluntario1.getNaoEntregue();
      voluntario1.setNome(" e ");
      // Undeclared exception!
      try { 
        MockLocalDateTime.from(localDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: 1969-12-31 of type java.time.LocalDate
         //
         verifyException("java.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setEntregue(true);
      encomenda0.clone();
      linkedList0.add(encomenda0);
      Voluntario voluntario0 = new Voluntario(" e ", "Produto: ", "Produto: ", " e ", true, 0.0, 1947.7185840171057, localDate0, 0.0, linkedList0, 0.0, (-4170), true, (-1354), (-1255));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.setVelocidade((-4170));
      voluntario0.setDisponibilidade(true);
      voluntario1.setCodigo(" e ");
      voluntario1.getLatitude();
      voluntario1.getClassificacao();
      voluntario1.setCodigo("Produto: ");
      voluntario1.removeEncomenda(" e ");
      voluntario1.getLatitude();
      voluntario0.clone();
      voluntario1.clone();
      voluntario1.setClassificacao((-1354));
      voluntario1.getNaoEntregue();
      voluntario1.setNome(" e ");
      // Undeclared exception!
      try { 
        MockLocalDateTime.from(localDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: 1969-12-31 of type java.time.LocalDate
         //
         verifyException("java.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda("Desinfetante", "", "B!^5Ao*dEn.", 0.0, "B!^5Ao*dEn.", "[|SA5=RzqmNl", hashMap0, false, localDateTime0, false, true, false);
      encomenda0.setEntregue(true);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      linkedList0.add(encomenda1);
      Voluntario voluntario0 = new Voluntario("Desinfetante", "Desinfetante", "Desinfetante", "Desinfetante", false, (-715.61788), (-715.61788), (LocalDate) null, (-6245.689759921497), linkedList0, (-715.61788), 0, false, 1058, 0);
      Encomenda encomenda2 = new Encomenda();
      encomenda2.setVendedor("-wqY*-X");
      voluntario0.updateEncomendaLoja(encomenda2);
      voluntario0.getNaoEntregue();
      voluntario0.existe((String) null);
      voluntario0.getCodigo();
      Voluntario voluntario1 = new Voluntario();
      voluntario0.equals(voluntario1);
      // Undeclared exception!
      try { 
        MockLocalTime.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setLatitude(965.62291038);
      voluntario0.getNaoEntregue();
      voluntario0.getHistorico();
      voluntario0.setClassificacao((-1.0));
      voluntario0.setClassificacao((-1.0));
      voluntario0.setLongitude(0.0);
      Voluntario voluntario1 = voluntario0.clone();
      voluntario1.getNaoEntregue();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      voluntario1.setInicio_Transporte(localDate0);
      voluntario1.setPassword("Voluntario");
      try { 
        voluntario0.getEncomenda(" bC");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Encomenda encomenda0 = new Encomenda();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      Encomenda encomenda1 = new Encomenda("ot", "le@!", "le@!", (-324.60351508), "<Yt", "!%6.", map0, false, (LocalDateTime) null, false, false, false);
      Encomenda encomenda2 = new Encomenda(encomenda1);
      voluntario0.updateEncomendaPreparada(encomenda2);
      Voluntario voluntario1 = new Voluntario("}wnwqKf^6Q", "Hora de registo: ", "Hora de registo: ", "Hora de registo: ", false, 0.0, (-3218.369), (LocalDate) null, (-3218.369), list0, (-3218.369), (-2064951910), false, (-2064951910), 2907);
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario2.setPassword("0");
      voluntario2.getNaoEntregue();
      voluntario0.porEntregar();
      voluntario1.getRaio_acao();
      voluntario1.porLevantar();
      voluntario1.getLatitude();
      voluntario1.porEntregar();
      voluntario1.getRaio_acao();
      Voluntario voluntario3 = voluntario1.clone();
      voluntario0.calculaAtrasos();
      voluntario1.getVelocidade();
      // Undeclared exception!
      try { 
        voluntario3.getInfoEncomendas((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("!@|leElqBag", "Entre as datas ", "!@|leElqBag", "Voluntario", true, 1.0, 1.0, localDate0, (-1136.8815615127135), linkedList0, 1.0, 0, true, 75, (-1));
      voluntario0.getRaio_acao();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("Fa/NPsRJkN<5oJ6)gG", "x[wJS3jQwhQ^=f|Jkd", ">Da|/X", (-1358.3556463822124), (String) null, "Produto: ", hashMap0, true, (LocalDateTime) null, true, true, true);
      voluntario0.addEncomenda(encomenda0);
      voluntario0.setRaio_acao(1497.9485735714657);
      voluntario0.getPreparadas();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("", "htS^", "", "Dispon\u00EDvel: ", true, (-1.0), (-1.0), (LocalDate) null, 0.0, linkedList0, (-1.0), 0, true, 0, 0);
      voluntario0.getMinutosDeEspera();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setCodigo((String) null);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.clone();
      voluntario1.updateEncomendaPreparada(encomenda0);
      voluntario1.getHistorico();
      voluntario1.getInicio_transporte();
      voluntario0.clone();
      voluntario1.getAvaliacoes();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 628.892;
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario((String) null, "", "", "", false, 0.0, 628.892, localDate0, 0.0, linkedList0, 628.892, 0, false, 0, (-2372));
      // Undeclared exception!
      try { 
        voluntario0.updateRate((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidade(702);
      voluntario0.setCodigo("Voluntario");
      voluntario0.getPreparadas();
      voluntario0.setVelocidade(702);
      voluntario0.setPassword("v8rw[4FX@lZiJ");
      voluntario0.getPreparadas();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Encomenda encomenda0 = new Encomenda("0", "", "", 702, "", "", hashMap0, false, localDateTime0, false, false, true);
      encomenda0.setPeso(1.0);
      voluntario0.updateEncomenda(encomenda0);
      voluntario0.porLevantar();
      try { 
        voluntario0.getEncomenda("EncomendaNotFoundException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.getHistorico();
      voluntario1.setAvaliacoes(2546);
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodigo_loja((String) null);
      voluntario1.updateEncomendaPreparada(encomenda0);
      voluntario0.getHistorico();
      voluntario1.existe("m?!;z,,TJ");
      voluntario1.getInicio_transporte();
      voluntario0.getNaoEntregue();
      voluntario0.setLongitude(3420.05304305);
      voluntario1.existe("*\"{uedqpp]BL");
      Double double0 = new Double((-430.4));
      Double.max(0.0, 0.0);
      voluntario0.setDisponibilidade(false);
      Double.min(0.0, 651.82321978);
      voluntario0.updateRate(double0);
      voluntario0.porLevantar();
      voluntario0.setVelocidade(2546);
      voluntario0.aceitaMedicamentos(false);
      voluntario1.updateEncomenda(encomenda0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("Pre\u00E7o: ", "Pre\u00E7o: ", ")X[laE|", "&f1Z:fYX", false, (-3143.838), 0.0, localDate0, 0.0, linkedList0, (-3143.838), 0, false, 1, 1);
      voluntario0.getClassificacao();
      voluntario0.setDisponibilidade(false);
      voluntario0.getHistorico();
      voluntario0.setClassificacao(0);
      voluntario0.aceitaMedicamentos(false);
      voluntario0.getLongitude();
      voluntario0.calculaAtrasos();
      voluntario0.getPreparadas();
      voluntario0.setMinutosDeEspera(0);
      voluntario0.setAvaliacoes(0);
      // Undeclared exception!
      try { 
        voluntario0.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Object object0 = new Object();
      voluntario0.equals(object0);
      voluntario0.setNome(";T_xc&S1uh*vYPF:");
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setLevantada(false);
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setVelocidade(0);
      voluntario0.getPreparadas();
      voluntario0.getNaoEntregue();
      Map<String, LinhaEncomenda> map0 = encomenda0.getProdutos();
      encomenda0.setProdutos(map0);
      voluntario0.setLatitude(0);
      encomenda0.setCodigo_loja("q.#RSh");
      voluntario0.existe("Encomenda");
      voluntario0.getDisponibilidade();
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.existe((String) null);
      voluntario0.aceitaMedicamentos(true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.porLevantar();
      voluntario1.porEntregar();
      voluntario1.getHistorico();
      voluntario0.setPassword("o6VfwxjZYT8)U[>K<");
      voluntario1.setNome("Dispon\u00EDvel: ");
      voluntario1.setLatitude(3287.567028977375);
      assertEquals(3287.567028977375, voluntario1.getLatitude(), 0.01);
      
      voluntario0.setDisponibilidade(false);
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      assertEquals(0, voluntario0.getVelocidade());
      
      voluntario0.updateEncomendaLoja(encomenda0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setVelocidade(0);
      voluntario1.equals(voluntario0);
      voluntario0.aceitaMedicamentos(true);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      List<Encomenda> list0 = voluntario1.getHistorico();
      Voluntario voluntario2 = new Voluntario("%f$:", "/", "/", "%f$:", false, (-1954.45327102), 0.0, (LocalDate) null, (-1954.45327102), list0, 0.0, 0, false, (-1), (-730));
      voluntario2.getVelocidade();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Encomenda encomenda0 = new Encomenda();
      voluntario0.updateEncomendaPreparada(encomenda0);
      voluntario0.getPreparadas();
      voluntario0.getAvaliacoes();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setEmail(" ");
      voluntario0.setEmail(" ");
      voluntario0.getClassificacao();
      Voluntario voluntario1 = voluntario0.clone();
      voluntario1.getAvaliacoes();
      // Undeclared exception!
      try { 
        voluntario1.setHistorico((List<Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario((String) null, "oHf[^K^;9,;Y", "oHf[^K^;9,;Y", (String) null, true, (-1967.7405431451), (-1967.7405431451), localDate0, (-1967.7405431451), list0, (-1914.5), 1996, true, 1996, (-2899));
      voluntario1.getNome();
      voluntario0.porEntregar();
      voluntario1.getMinutosDeEspera();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      List<Encomenda> list0 = voluntario1.getHistorico();
      Voluntario voluntario2 = new Voluntario("", "", (String) null, "", false, 438.030261, 1287.041, localDate0, (-131.1108), list0, (-1L), 1, true, 1, 418);
      voluntario2.setInicio_Transporte(localDate0);
      voluntario2.aceitaMedicamentos(true);
      voluntario2.getCodigo();
      voluntario0.porEntregar();
      voluntario2.getLatitude();
      voluntario2.setClassificacao(1);
      Instant instant0 = MockInstant.ofEpochMilli((-3014L));
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(1);
      ZoneId zoneId0 = zoneOffset0.normalized();
      ZoneId.getAvailableZoneIds();
      voluntario0.removeEncomenda("");
      LocalDateTime localDateTime0 = MockLocalDateTime.ofInstant(instant0, zoneId0);
      voluntario2.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.getLatitude();
      voluntario2.getMinutosDeEspera();
      voluntario0.getLatitude();
      voluntario0.getClassificacao();
      voluntario2.aceitoTransporteMedicamentos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      String string0 = "Voluntario";
      voluntario0.setDisponibilidade(true);
      voluntario0.removeEncomenda("Encomenda");
      LocalDateTime localDateTime0 = null;
      // Undeclared exception!
      try { 
        voluntario0.getInfoEncomendas((LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("FOE2rsE5O6_W", "FOE2rsE5O6_W", "FOE2rsE5O6_W", "a", false, 0.0, (-2376.386094), (LocalDate) null, (-2376.386094), linkedList0, 0.0, (-96), false, 0, 575);
      Encomenda encomenda0 = new Encomenda();
      voluntario0.addEncomenda(encomenda0);
      voluntario0.getClassificacao();
      voluntario0.getCodigo();
      voluntario0.porEntregar();
      voluntario0.setRaio_acao(1.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1350L);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      int int0 = 60;
      Voluntario voluntario0 = new Voluntario("XG:rX.V", "$65Lm+", "DA<>1|IQf", ".L2rWq", false, (-1.0), (-1.0), localDate0, (-1.0), linkedList0, 1350L, 60, true, 60, 60);
      voluntario0.getClassificacao();
      voluntario0.porEntregar();
      voluntario0.setClassificacao(0.0);
      voluntario0.porEntregar();
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.calculaAtrasos();
      // Undeclared exception!
      try { 
        MockLocalTime.now((Clock) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // clock
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Period period0 = Period.ofDays(1236);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setPassword("2/{{0q6)WH-.,.^`/");
      Voluntario voluntario1 = new Voluntario(voluntario0);
      List<Encomenda> list0 = voluntario1.getHistorico();
      Voluntario voluntario2 = new Voluntario("{7xa@y", "", "{7xa@y", "", true, (-701.29405), 0.0, localDate0, 1236, list0, 0.0, (-2840), true, 0, (-2323));
      Double double0 = new Double(0.0);
      Double.isFinite((-1.0));
      voluntario2.updateRate(double0);
      voluntario2.getAvaliacoes();
      voluntario0.setMinutosDeEspera(0);
      voluntario1.calculaAtrasos();
      voluntario2.getAvaliacoes();
      voluntario1.setLatitude((-1.0));
      try { 
        voluntario1.getEncomenda("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 523.119133379;
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      List<Encomenda> list0 = voluntario1.getHistorico();
      voluntario1.aceitaMedicamentos(true);
      Voluntario voluntario2 = new Voluntario((String) null, (String) null, "Pre\u00E7o: ", "G/Rmup,tk+\"Iz?y", false, (-1604.4121378328255), 523.119133379, (LocalDate) null, 0.0, list0, 523.119133379, 0, true, 0, 0);
      voluntario2.getAvaliacoes();
      // Undeclared exception!
      try { 
        voluntario1.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.equals((Object) null);
      voluntario0.removeEncomenda("");
      voluntario1.equals("");
      voluntario1.setLatitude((-1.0));
      voluntario1.setLongitude((-1.0));
      voluntario1.getLongitude();
      voluntario0.toString();
      // Undeclared exception!
      try { 
        MockIsoChronology.dateNow((IsoChronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNaoEntregue();
      voluntario0.setClassificacao(3127.382531731475);
      voluntario0.existe("Pre\u00E7o: ");
      voluntario0.removeEncomenda("");
      String string0 = "";
      // Undeclared exception!
      try { 
        voluntario0.updateEncomendaLoja((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setCodigo((String) null);
      voluntario0.getCodigo();
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      voluntario0.setHistorico(linkedList0);
      try { 
        voluntario0.getEncomenda((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.clone();
      voluntario0.existe("K70&/7xrp9^SozJ~");
      // Undeclared exception!
      try { 
        voluntario1.updateEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getNaoEntregue();
      Encomenda encomenda0 = new Encomenda();
      Voluntario voluntario1 = voluntario0.clone();
      encomenda0.setLevantada(true);
      voluntario0.updateEncomendaLoja(encomenda0);
      voluntario0.setRaio_acao(1807.0);
      voluntario1.updateEncomenda(encomenda0);
      voluntario0.calculaAtrasos();
      voluntario0.setClassificacao(761.7438794282339);
      voluntario0.setRaio_acao(0);
      voluntario0.aceitaMedicamentos(true);
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario1.setHistorico(list0);
      voluntario0.setInicio_Transporte((LocalDate) null);
      voluntario0.getRaio_acao();
      try { 
        voluntario0.getEncomenda("5~[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = voluntario0.clone();
      voluntario0.setRaio_acao(0.0);
      Double double0 = new Double((-2389.5686847));
      voluntario1.setNome((String) null);
      voluntario1.updateRate(double0);
      int int0 = (-5010);
      voluntario0.setMinutosDeEspera((-5010));
      voluntario0.setNome("C\u00F3digo de produto: ");
      voluntario0.getNaoEntregue();
      voluntario0.getMinutosDeEspera();
      voluntario0.getDisponibilidade();
      voluntario1.removeEncomenda("Latitude: ");
      voluntario0.getLongitude();
      voluntario0.getMinutosDeEspera();
      Double double1 = new Double(221.3569585927746);
      Double.isFinite(2048.288450636142);
      Double.min(0.0, 0.0);
      Double.isFinite(0.0);
      voluntario0.updateRate(double1);
      // Undeclared exception!
      try { 
        voluntario0.updateEncomendaLoja((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Voluntario voluntario0 = null;
      Voluntario voluntario1 = null;
      try {
        voluntario1 = new Voluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UtilizadorSistema", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = (-3246.8879364346985);
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.existe("Produtos: ");
      Voluntario voluntario1 = new Voluntario("UtilizadorSistema", "UtilizadorSistema", (String) null, "", true, (-3246.8879364346985), (-3246.8879364346985), (LocalDate) null, (-3246.8879364346985), list0, 0.0, 94, true, 1116, 94);
      voluntario1.clone();
      voluntario0.getHistorico();
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario0.setRaio_acao(1116);
      voluntario2.getPreparadas();
      voluntario2.setLatitude(1116);
      voluntario2.getNome();
      voluntario2.aceitaMedicamentos(true);
      voluntario1.getNome();
      voluntario0.aceitaMedicamentos(false);
      try { 
        voluntario1.getEncomenda("0");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(182L);
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Voluntario voluntario0 = new Voluntario("Produto: ", "Produto: ", ">]Jq;XD7,AFCqxQ", "Produto: ", true, (-1696.754), 0.0, localDate0, 0.0, linkedList0, (-327.641419543568), (-1), true, (-1), 1);
      Voluntario voluntario1 = new Voluntario(voluntario0);
      linkedList0.poll();
      voluntario1.setLongitude(0.0);
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario2.aceitaMedicamentos(true);
      linkedList0.add((Encomenda) null);
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.setCodigo("Produto: ");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.setAvaliacoes((-1693));
      voluntario1.clone();
      Voluntario voluntario2 = voluntario1.clone();
      voluntario1.existe("C\u00F3digo: ");
      voluntario2.setInicio_Transporte((LocalDate) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Double double0 = new Double(107.62);
      voluntario0.updateRate(double0);
      Double.sum(107.62, 834.53);
      voluntario0.setEmail("Desinfetante");
      String string0 = "=y7\\=X";
      Double.sum(107.62, 0.0);
      voluntario0.existe("=y7=X");
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.updateRate(double0);
      LocalDate localDate0 = MockLocalDate.now();
      voluntario0.setInicio_Transporte(localDate0);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(40L);
      voluntario0.setInicio_Transporte(localDate1);
      voluntario0.setVelocidade((-1));
      voluntario0.setHistorico(list0);
      voluntario0.aceitaMedicamentos(false);
      try { 
        voluntario0.getEncomenda("&%kzt$t.t]l1e!I");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      try { 
        voluntario0.getEncomenda("A){-AIX6='z4brYa*");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "SMj<:Sbl";
      LocalDate localDate0 = null;
      List<Encomenda> list0 = null;
      double double0 = (-176.24273301);
      int int0 = (-1168);
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario("SMj<:Sbl", "SMj<:Sbl", "SMj<:Sbl", "SMj<:Sbl", false, (-2405.54742), (-454.85313491), (LocalDate) null, (-2405.54742), (List<Encomenda>) null, (-176.24273301), (-1168), true, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.aceitoTransporteMedicamentos();
      voluntario0.getAvaliacoes();
      voluntario0.getVelocidade();
      // Undeclared exception!
      try { 
        MockLocalDateTime.of((-2322), 2261, 0, (-263), 0, 2261);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 2261
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getHistorico();
      voluntario0.getClassificacao();
      voluntario0.setClassificacao(0.0);
      voluntario0.getInicio_transporte();
      Double double0 = new Double(0.0);
      Double.max(0.0, 0.0);
      voluntario0.porLevantar();
      Double.sum(0.0, 0.0);
      voluntario0.updateRate(double0);
      voluntario0.getInicio_transporte();
      voluntario0.clone();
      voluntario0.porEntregar();
      voluntario0.removeEncomenda((String) null);
      // Undeclared exception!
      try { 
        voluntario0.updateEncomendaPreparada((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Double double0 = new Double((-95.811458));
      voluntario0.updateRate(double0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.calculaAtrasos();
      voluntario0.toString();
      voluntario1.calculaAtrasos();
      voluntario1.setRaio_acao(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setRaio_acao((-1182.108225));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.setHistorico(list0);
      voluntario0.setClassificacao(1.0);
      voluntario0.getInicio_transporte();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.aceitaMedicamentos(false);
      LocalDate localDate0 = voluntario0.getInicio_transporte();
      voluntario0.existe("LinhaEncomenda");
      voluntario0.equals(localDate0);
      voluntario0.getRaio_acao();
      voluntario0.getNome();
      voluntario0.getPreparadas();
      voluntario0.existe("");
      voluntario0.setNome("");
      voluntario0.setVelocidade(2469);
      voluntario0.calculaAtrasos();
      voluntario0.getLongitude();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.clone();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario1.getNome();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("q5Wbz3J", "", "", "I>G\"Q=?WVui#j *", false, 0.0, (-1.0), (LocalDate) null, (-2318.2923359144174), list0, 0.0, 1, false, (-2069), 0);
      voluntario1.getAvaliacoes();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      String string0 = "m*aV3 ehMc)\"^bux8C";
      String string1 = "tt]Rt{|DP#NjGN";
      double double0 = 2463.0085890829787;
      String string2 = "UtilizadorSistema";
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getProdutos();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        ZoneId.ofOffset("tt]Rt{|DP#NjGN", (ZoneOffset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // offset
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getPreparadas();
      voluntario0.equals("0");
      voluntario0.setTypeUser("#_b2PLYhkeeo+");
      voluntario0.setClassificacao(499.15);
      voluntario0.getDisponibilidade();
      voluntario0.getHistorico();
      try { 
        voluntario0.getEncomenda("Alcool");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.existe("l");
      Encomenda encomenda0 = new Encomenda();
      Clock clock0 = MockClock.systemUTC();
      Instant instant0 = MockInstant.now(clock0);
      Instant instant1 = MockInstant.plusMillis(instant0, (-1L));
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock1 = MockClock.fixed(instant1, zoneOffset0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock1);
      encomenda0.setData(localDateTime0);
      encomenda0.setPreparada(false);
      voluntario0.calculaAtrasos();
      voluntario0.setRaio_acao(0.0);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      encomenda1.setData(localDateTime0);
      encomenda1.setCodigo_loja("Encomenda");
      voluntario0.updateEncomendaLoja(encomenda1);
      voluntario0.toString();
      voluntario0.porEntregar();
      try { 
        voluntario0.getEncomenda(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000005");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.setTypeUser("^%2X,+qaoIN`-:");
      MockLocalDateTime.now();
      voluntario1.toString();
      voluntario0.getLongitude();
      voluntario0.existe(" <--- O utilizador \u00E9: \n\n\nNome: \nC\u00F3digo de volunt\u00E1rio: \nDispon\u00EDvel: false\nLatitude: 0.0\nLongitude: 0.0\nHora de registo: 2014-02-14\nRaio de a\u00E7\u00E3o: 0.0\nRegistos de encomendas: java.util.ArrayList@0000000003");
      Double double0 = new Double(0.0);
      voluntario0.updateRate(double0);
      try { 
        voluntario0.getEncomenda("i]rhZ^?7sv");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getPreparadas();
      voluntario0.existe(" e ");
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.setVelocidade((-1445));
      Voluntario voluntario1 = voluntario0.clone();
      voluntario1.setClassificacao((-1445));
      voluntario1.setClassificacao(0.0);
      Encomenda encomenda0 = new Encomenda();
      MockLocalDateTime.now();
      encomenda0.equals(list0);
      encomenda0.setCodigo_loja(" e ");
      voluntario1.updateEncomendaPreparada(encomenda0);
      voluntario1.getPreparadas();
      Random.setNextRandom((-2064951910));
      voluntario0.setClassificacao((-1445));
      voluntario1.getLongitude();
      Voluntario voluntario2 = new Voluntario();
      voluntario0.equals(voluntario2);
      voluntario1.updateEncomenda(encomenda0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      voluntario1.getInfoEncomendas(localDateTime0, localDateTime0);
      voluntario0.updateEncomenda(encomenda0);
      voluntario2.getInicio_transporte();
      voluntario1.clone();
      try { 
        voluntario0.getEncomenda("e?QF[~z)Mg,ypcA S*");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.getPreparadas();
      voluntario0.existe(" e ");
      List<Encomenda> list0 = voluntario0.getHistorico();
      voluntario0.setVelocidade((-1445));
      Voluntario voluntario1 = voluntario0.clone();
      voluntario1.setClassificacao((-1445));
      voluntario1.setClassificacao(0.0);
      Encomenda encomenda0 = new Encomenda();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      encomenda0.setData(localDateTime0);
      encomenda0.equals(list0);
      encomenda0.setCodigo_loja(" e ");
      voluntario1.updateEncomendaPreparada(encomenda0);
      voluntario1.getPreparadas();
      Random.setNextRandom((-2064951910));
      voluntario0.setClassificacao((-1445));
      voluntario1.getLongitude();
      Voluntario voluntario2 = new Voluntario();
      voluntario0.equals(voluntario2);
      voluntario1.updateEncomenda(encomenda0);
      LocalDateTime localDateTime1 = MockLocalDateTime.now();
      voluntario1.getInfoEncomendas(localDateTime1, localDateTime1);
      voluntario0.updateEncomenda(encomenda0);
      voluntario2.getInicio_transporte();
      Voluntario voluntario3 = voluntario1.clone();
      voluntario3.updateEncomendaPreparada(encomenda0);
      try { 
        voluntario0.getEncomenda("e?QF[~z)Mg,ypcA S*");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Voluntario", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      HashMap<String, LinhaEncomenda> hashMap0 = new HashMap<String, LinhaEncomenda>();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Encomenda encomenda0 = new Encomenda("Desinfetante", "", "B!^5Ao*dEn.", 0.0, "B!^5Ao*dEn.", "[|SA5=RzqmNl", hashMap0, false, localDateTime0, false, true, false);
      Encomenda encomenda1 = new Encomenda(encomenda0);
      linkedList0.add(encomenda1);
      Voluntario voluntario0 = new Voluntario("Desinfetante", "Desinfetante", "Desinfetante", "Desinfetante", false, 0.0, 0.0, (LocalDate) null, (-6245.696927), linkedList0, 0.0, 0, false, 1058, 0);
      Encomenda encomenda2 = new Encomenda();
      encomenda2.setVendedor("-wqY*-X");
      voluntario0.updateEncomendaLoja(encomenda2);
      voluntario0.getNaoEntregue();
      voluntario0.existe((String) null);
      voluntario0.getCodigo();
      // Undeclared exception!
      try { 
        MockLocalTime.from((TemporalAccessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // temporal
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      LocalDate localDate0 = voluntario0.getInicio_transporte();
      voluntario0.existe("LinhaEncomenda");
      voluntario0.equals(localDate0);
      voluntario0.getRaio_acao();
      voluntario0.getNome();
      voluntario0.getPreparadas();
      voluntario0.existe("");
      voluntario0.setNome("");
      voluntario0.setVelocidade(2469);
      voluntario0.calculaAtrasos();
      voluntario0.getLongitude();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("", "", "", "(V?Z^UjDCPB|%@8^She", false, 0.0, (-385.7537067418), localDate0, 5490.0, list0, 0.0, (-964), false, 0, (-2912));
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario0.getNaoEntregue();
      voluntario0.calculaAtrasos();
      voluntario2.getNaoEntregue();
      voluntario1.setHistorico(list0);
      voluntario1.setHistorico(list0);
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      voluntario1.addEncomenda(encomenda1);
      voluntario1.porEntregar();
      voluntario1.updateEncomenda(encomenda1);
      Random.setNextRandom((-2912));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockClock.systemUTC();
      LocalDate localDate0 = MockLocalDate.now();
      Voluntario voluntario0 = new Voluntario();
      List<Encomenda> list0 = voluntario0.getHistorico();
      Voluntario voluntario1 = new Voluntario("", "", "", "(V?Z^UjDCPB|%@8^She", false, 0.0, (-385.7537067418), localDate0, 5490.0, list0, 0.0, (-964), false, 0, (-2912));
      Voluntario voluntario2 = new Voluntario(voluntario1);
      voluntario2.getNaoEntregue();
      voluntario0.calculaAtrasos();
      voluntario2.getNaoEntregue();
      voluntario1.setHistorico(list0);
      voluntario1.setHistorico(list0);
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      voluntario1.addEncomenda(encomenda1);
      voluntario1.porEntregar();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1L));
      LinkedList<Encomenda> linkedList0 = new LinkedList<Encomenda>();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.clone();
      linkedList0.add(encomenda0);
      Voluntario voluntario0 = new Voluntario(" e ", "Produto: ", "Produto: ", " e ", true, 0.0, 1947.7185840171057, localDate0, 0.0, linkedList0, 0.0, (-4170), true, (-1354), (-1255));
      Voluntario voluntario1 = new Voluntario(voluntario0);
      voluntario0.setInicio_Transporte(localDate0);
      voluntario0.porLevantar();
      voluntario0.setVelocidade((-4170));
      voluntario0.setDisponibilidade(true);
      voluntario1.setCodigo(" e ");
      voluntario1.getLatitude();
      voluntario1.getClassificacao();
      voluntario1.setCodigo("Produto: ");
      voluntario1.removeEncomenda(" e ");
      voluntario1.getLatitude();
      voluntario0.clone();
      voluntario1.clone();
      voluntario1.setClassificacao((-1354));
      voluntario1.getNaoEntregue();
      voluntario1.setNome(" e ");
      // Undeclared exception!
      try { 
        MockLocalDateTime.from(localDate0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Unable to obtain LocalDateTime from TemporalAccessor: 1969-12-31 of type java.time.LocalDate
         //
         verifyException("java.time.LocalDateTime", e);
      }
  }
}
