/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:13:55 GMT 2020
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Transportadora;
import MVC.Models.BaseModels.TransportadoraMed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadora_ESTest extends Transportadora_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("!N*TQXsg>~ij,EQ+,z", "", 2334.888, 2334.888, "Kio2wr<S=A}7it", (-787.512905), 2334.888, (-2584));
      transportadora0.incCapacidade();
      assertEquals((-2583), transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.getVelocidadeMed();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("!N*TQXsg>~ij,EQ+,z", "", 2334.888, 2334.888, "Kio2wr<S=A}7it", (-787.512905), 2334.888, (-2584));
      transportadora0.setVelocidadeMed((-2584));
      double double0 = transportadora0.getVelocidadeMed();
      assertEquals((-2584.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("@6}51 @?N/*9x,Opy~}", "hM'[2[Jel%y?&", 941.1, 941.1, "hM'[2[Jel%y?&", 1.0, 1.0, true);
      double double0 = transportadoraMed0.getRaio();
      assertTrue(transportadoraMed0.getEstaLivre());
      assertEquals(35.0, transportadoraMed0.getVelocidadeMed(), 0.01);
      assertEquals(1.0, transportadoraMed0.getPrecoKm(), 0.01);
      assertEquals(2, transportadoraMed0.getCapacidade());
      assertEquals("hM'[2[Jel%y?&", transportadoraMed0.getNif());
      assertEquals(0.0, transportadoraMed0.getKmsTotal(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("q:dRo&9$jU*rXw5tEJ|", "", (-3865.732754695287), (-3865.732754695287), "q:dRo&9$jU*rXw5tEJ|", (-3865.732754695287), (-3865.732754695287), true);
      double double0 = transportadoraMed0.getRaio();
      assertEquals(0.0, transportadoraMed0.getKmsTotal(), 0.01);
      assertEquals((-3865.732754695287), transportadoraMed0.getPrecoKm(), 0.01);
      assertEquals(2, transportadoraMed0.getCapacidade());
      assertEquals((-3865.732754695287), double0, 0.01);
      assertEquals("q:dRo&9$jU*rXw5tEJ|", transportadoraMed0.getNif());
      assertEquals(35.0, transportadoraMed0.getVelocidadeMed(), 0.01);
      assertTrue(transportadoraMed0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("@6}51 @?N/*9x,Opy~}", "hM'[2[Jel%y?&", 941.1, 941.1, "hM'[2[Jel%y?&", 1.0, 1.0, true);
      double double0 = transportadoraMed0.getPrecoKm();
      assertTrue(transportadoraMed0.getEstaLivre());
      assertEquals(35.0, transportadoraMed0.getVelocidadeMed(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, transportadoraMed0.getCapacidade());
      assertEquals(0.0, transportadoraMed0.getKmsTotal(), 0.01);
      assertEquals(1.0, transportadoraMed0.getRaio(), 0.01);
      assertEquals("hM'[2[Jel%y?&", transportadoraMed0.getNif());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("?0%8QfT", "", (-43.933111912), (-43.933111912), "\nPre\u00E7o por Km: ", (-43.933111912), (-43.933111912), false, (-1));
      double double0 = transportadoraMed0.getPrecoKm();
      assertEquals((-43.933111912), double0, 0.01);
      assertEquals((-43.933111912), transportadoraMed0.getRaio(), 0.01);
      assertEquals(0.0, transportadoraMed0.getKmsTotal(), 0.01);
      assertTrue(transportadoraMed0.getEstaLivre());
      assertEquals(35.0, transportadoraMed0.getVelocidadeMed(), 0.01);
      assertEquals((-1), transportadoraMed0.getCapacidade());
      assertEquals("\nPre\u00E7o por Km: ", transportadoraMed0.getNif());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, (String) null, 977.87, (-2669.76), "r$\"r\"%", (-2669.76), (-2669.76), 1750);
      transportadora0.classificaTransportadora(1750);
      double double0 = transportadora0.getNota();
      assertEquals(1750.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("grmQoa8Z.]C9;`>", "$0.~p\"", 1200.2679, 1200.2679, "$0.~p\"", 1200.2679, 1859.083228, (-97));
      transportadora0.classificaTransportadora((-97));
      double double0 = transportadora0.getNota();
      assertEquals((-97.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed((String) null, (String) null, 0.0, 0.0, (String) null, 0.0, 0.0, true, 35);
      transportadoraMed0.getNif();
      assertEquals(0.0, transportadoraMed0.getKmsTotal(), 0.01);
      assertEquals(35, transportadoraMed0.getCapacidade());
      assertTrue(transportadoraMed0.getEstaLivre());
      assertEquals(0.0, transportadoraMed0.getPrecoKm(), 0.01);
      assertEquals(35.0, transportadoraMed0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, transportadoraMed0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.getNif();
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("\nNIF: ", "\nNIF: ", 914.30455324, 0.0, (String) null, 0.0, 0.0, 3438);
      transportadora0.setKmsTotal(2315.0);
      double double0 = transportadora0.getKmsTotal();
      assertEquals(2315.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("%.2f", "<!l@RvKu;", (-819.29049), (-2490.9972), "uxh?@*.", 0.0, 0.0, 0);
      transportadora0.addKmsTotal((-2032.29));
      double double0 = transportadora0.getKmsTotal();
      assertEquals((-2032.29), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 0.0, (-2798.2), "VH", 1.0, 1.0, (-1));
      assertTrue(transportadora0.getEstaLivre());
      
      transportadora0.setEstaLivre(false);
      boolean boolean0 = transportadora0.getEstaLivre();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed((String) null, (String) null, 0.0, 0.0, (String) null, 0.0, 0.0, true, 35);
      transportadoraMed0.classificaTransportadora(35);
      transportadoraMed0.getClassificacao();
      assertEquals(35.0, transportadoraMed0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "MVC.Models.BaseModels.Transportadora", 0.0, 1074.9, "", 1074.9, 0.0, true, (-1));
      transportadoraMed0.classificaTransportadora((-1));
      transportadoraMed0.getClassificacao();
      assertEquals((-1.0), transportadoraMed0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", (-3476.380200033809), (-3476.380200033809), (String) null, (-2303.1), 0.0);
      int int0 = transportadora0.getCapacidade();
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals((-2303.1), transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "MVC.Models.BaseModels.Transportadora", 0.0, 1074.9, "", 1074.9, 0.0, true, (-1));
      int int0 = transportadoraMed0.getCapacidade();
      assertEquals(0.0, transportadoraMed0.getKmsTotal(), 0.01);
      assertEquals((-1), int0);
      assertEquals(1074.9, transportadoraMed0.getRaio(), 0.01);
      assertEquals(0.0, transportadoraMed0.getPrecoKm(), 0.01);
      assertTrue(transportadoraMed0.getEstaLivre());
      assertEquals(35.0, transportadoraMed0.getVelocidadeMed(), 0.01);
      assertEquals("", transportadoraMed0.getNif());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.setVelocidadeMed((-667.54));
      transportadora0.clone();
      assertEquals((-667.54), transportadora0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, (String) null, 977.87, (-2669.76), "r$\"r\"%", (-2669.76), (-2669.76), 1750);
      Transportadora transportadora1 = transportadora0.clone();
      assertEquals(1750, transportadora1.getCapacidade());
      assertEquals((-2669.76), transportadora1.getRaio(), 0.01);
      assertEquals(1750, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-2669.76), transportadora0.getRaio(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals((-2669.76), transportadora1.getPrecoKm(), 0.01);
      assertEquals((-2669.76), transportadora0.getPrecoKm(), 0.01);
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertTrue(transportadora1.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.classificaTransportadora(1116);
      transportadora0.clone();
      assertEquals(1116.0, transportadora0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.classificaTransportadora((-1614));
      transportadoraMed0.clone();
      assertEquals((-1614.0), transportadoraMed0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("@6}51 @?N/*9x,Opy~}", "hM'[2[Jel%y?&", 941.1, 941.1, "hM'[2[Jel%y?&", 1.0, 1.0, true);
      transportadoraMed0.setKmsTotal(941.1);
      transportadoraMed0.clone();
      assertEquals(941.1, transportadoraMed0.getKmsTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", 217.0488, 217.0488, (String) null, 217.0488, 1.0, (-2857));
      transportadora0.setKmsTotal((-2857));
      transportadora0.clone();
      assertEquals((-2857.0), transportadora0.getKmsTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      assertTrue(transportadora0.getEstaLivre());
      
      transportadora0.setEstaLivre(false);
      transportadora0.clone();
      assertFalse(transportadora0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transportadora transportadora0 = null;
      try {
        transportadora0 = new Transportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("!N*TQXsg>~ij,EQ+,z", "", 2334.888, 2334.888, "Kio2wr<S=A}7it", (-787.512905), 2334.888, (-2584));
      double double0 = transportadora0.getVelocidadeMed();
      assertTrue(transportadora0.getEstaLivre());
      assertEquals((-2584), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(35.0, double0, 0.01);
      assertEquals((-787.512905), transportadora0.getRaio(), 0.01);
      assertEquals("Kio2wr<S=A}7it", transportadora0.getNif());
      assertEquals(2334.888, transportadora0.getPrecoKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("!N*TQXsg>~ij,EQ+,z", "", 2334.888, 2334.888, "Kio2wr<S=A}7it", (-787.512905), 2334.888, (-2584));
      boolean boolean0 = transportadora0.getEstaLivre();
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(2334.888, transportadora0.getPrecoKm(), 0.01);
      assertEquals((-787.512905), transportadora0.getRaio(), 0.01);
      assertTrue(boolean0);
      assertEquals((-2584), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals("Kio2wr<S=A}7it", transportadora0.getNif());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("!N*TQXsg>~ij,EQ+,z", "", 2334.888, 2334.888, "Kio2wr<S=A}7it", (-787.512905), 2334.888, (-2584));
      double double0 = transportadora0.getKmsTotal();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2584), transportadora0.getCapacidade());
      assertEquals(2334.888, transportadora0.getPrecoKm(), 0.01);
      assertEquals("Kio2wr<S=A}7it", transportadora0.getNif());
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals((-787.512905), transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("", "", (-3476.380200033809), (-3476.380200033809), (String) null, (-2303.1), 0.0);
      Transportadora transportadora1 = new Transportadora(transportadora0);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals((-2303.1), transportadora0.getRaio(), 0.01);
      assertEquals(2, transportadora1.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(35.0, transportadora1.getVelocidadeMed(), 0.01);
      assertTrue(transportadora1.getEstaLivre());
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals((-2303.1), transportadora1.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("MVC.Models.BaseModels.Utilizador", "MVC.Models.BaseModels.Utilizador", 0.0, 0.0, "\nNIF: ", 0.0, (-1136.8));
      String string0 = transportadora0.getNif();
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals((-1136.8), transportadora0.getPrecoKm(), 0.01);
      assertEquals(2, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("\nNIF: ", string0);
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.getPrecoKm();
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      double double0 = transportadora0.getRaio();
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("!N*TQXsg>~ij,EQ+,z", "", 2334.888, 2334.888, "Kio2wr<S=A}7it", (-787.512905), 2334.888, (-2584));
      transportadora0.getNota();
      assertEquals(35.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals((-787.512905), transportadora0.getRaio(), 0.01);
      assertEquals((-2584), transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(2334.888, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals("Kio2wr<S=A}7it", transportadora0.getNif());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.getClassificacao();
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      String string0 = transportadora0.toString();
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, transportadora0.getCapacidade());
      assertEquals("Transportadora{ \nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\nNIF: \nRaio: 0.0\nPre\u00E7o por Km: 0.0\nKms Total: 0.00\nClassificacao:0.00\n}", string0);
      assertTrue(transportadora0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      int int0 = transportadora0.getCapacidade();
      assertTrue(transportadora0.getEstaLivre());
      assertEquals(0.0, transportadora0.getRaio(), 0.01);
      assertEquals(0.0, transportadora0.getKmsTotal(), 0.01);
      assertEquals(0.0, transportadora0.getVelocidadeMed(), 0.01);
      assertEquals(0, int0);
      assertEquals(0.0, transportadora0.getPrecoKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.incCapacidade();
      assertEquals(1, transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      transportadora0.decCapacidade();
      transportadora0.incCapacidade();
      assertEquals(0, transportadora0.getCapacidade());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("\nR\"yio: ", "\nR\"yio: ", (-2378.1879319981877), (-2378.1879319981877), "\nR\"yio: ", (-2378.1879319981877), (-2378.1879319981877), false);
      transportadoraMed0.decCapacidade();
      transportadoraMed0.decCapacidade();
      assertEquals(0, transportadoraMed0.getCapacidade());
  }
}
