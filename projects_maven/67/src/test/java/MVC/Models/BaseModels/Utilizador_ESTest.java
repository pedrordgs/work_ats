/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:17:01 GMT 2020
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Utilizador;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizador_ESTest extends Utilizador_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.aceitaEncomenda("+@|zyQA+uU", true);
      utilizador0.getPorClassificar();
      assertEquals(1, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda("\nPeso: ", "\nPeso: ", 0.0, linkedList0);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      
      utilizador0.getPorAceitar();
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("\n}", "MVC.Models.BaseModels.Utilizador", 4.0, 4.0);
      utilizador0.setNumeroEncomendas(1854);
      int int0 = utilizador0.getNumeroEncomendas();
      assertEquals(1854, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("KeR)HuY'I'UD", "MVC.Models.BaseModels.Utilizador", (-805.354), (-805.354));
      utilizador0.setNumeroEncomendas((-3120));
      int int0 = utilizador0.getNumeroEncomendas();
      assertEquals((-3120), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("8).]}KtW", "8).]}KtW", 0.0, 0.0);
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda("MVC.Models.BaseModels.Utilizador", "+71.x>A=m{G92^BU|r", 0.0, linkedList0);
      assertEquals(0, utilizador0.getNumeroEncomendas());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("MVC.Models.BaseModels.Utilizador", encomenda0.getCodEnc());
      assertEquals("+71.x>A=m{G92^BU|r", encomenda0.getCodLoja());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda("\nLinhas: ", "\nLinhas: ", (-1953.8918894940723), linkedList0);
      assertEquals(0, utilizador0.getNumeroEncomendas());
      assertEquals((-1953.8918894940723), encomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.aceitaEncomenda(",", true);
      utilizador0.clone();
      assertEquals(1, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("}=EBV$^44e}gL:ob-", "}=EBV$^44e}gL:ob-", (-1.0), 0.0);
      utilizador0.setNumeroEncomendas((-1));
      utilizador0.clone();
      assertEquals((-1), utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("8).]}KtW", "8).]}KtW", 0.0, 0.0);
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("8).]}KtW", "MVC.Models.BaseModels.Utilizador", 0, 0.0);
      linkedList0.addFirst(linhaEncomenda0);
      List<LinhaEncomenda> list0 = linkedList0.subList(0, 1);
      linkedList0.add(linhaEncomenda0);
      // Undeclared exception!
      try { 
        utilizador0.criaEncomenda("8).]}KtW", "ON_L<<#g0R?~6R1", 1, list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      // Undeclared exception!
      try { 
        utilizador0.criaEncomenda("Utilizador{ \nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\nNumero de encomendas: 0\n}", "Utilizador{ \nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\nNumero de encomendas: 0\n}", 0.0, (List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizador utilizador0 = null;
      try {
        utilizador0 = new Utilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("8).]}KtW", "8).]}KtW", 0.0, 0.0);
      utilizador0.getPorClassificar();
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("8).]}KtW", "8).]}KtW", 0.0, 0.0);
      utilizador0.addKeyPorAceitar("");
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("KeR)HuY'I'UD", "MVC.Models.BaseModels.Utilizador", (-805.354), (-805.354));
      utilizador0.getPorAceitar();
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("KeR)HuY'I'UD", "MVC.Models.BaseModels.Utilizador", (-805.354), (-805.354));
      utilizador0.addKeyPorClassificar("E-");
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("KeR)HuY'I'UD", "MVC.Models.BaseModels.Utilizador", (-805.354), (-805.354));
      Utilizador utilizador1 = new Utilizador(utilizador0);
      assertEquals(0, utilizador1.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      int int0 = utilizador0.getNumeroEncomendas();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.aceitaEncomenda("Utilizador{ \nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\nNumero de encomendas: 1\n}", false);
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      utilizador0.classificaEncomenda("vC\u00F3igo sebzr: ");
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("8).]}KtW", "8).]}KtW", 0.0, 0.0);
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda("ON_L<<#g0R?~6R1", "", 60.0, linkedList0);
      assertEquals("", encomenda0.getCodLoja());
      assertEquals("ON_L<<#g0R?~6R1", encomenda0.getCodEnc());
      assertEquals(60.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, utilizador0.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("8).]}KtW", "8).]}KtW", 0.0, 0.0);
      String string0 = utilizador0.toString();
      assertEquals("Utilizador{ \nC\u00F3digo: 8).]}KtW\nNome: 8).]}KtW\nGPS: (0.0,0.0)\nNumero de encomendas: 0\n}", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("8).]}KtW", "8).]}KtW", 0.0, 0.0);
      Utilizador utilizador1 = utilizador0.clone();
      assertEquals(0, utilizador1.getNumeroEncomendas());
  }
}
