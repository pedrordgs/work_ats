/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:19:14 GMT 2020
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.LinhaEncomenda;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinhaEncomenda_ESTest extends LinhaEncomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-1.0), (-1.0));
      LinhaEncomenda linhaEncomenda1 = new LinhaEncomenda(linhaEncomenda0);
      assertEquals(1.0, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("J~/>OAK#jszQo;Cf", "", 776.98425596713, 776.98425596713);
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(776.98425596713, linhaEncomenda0.getPreco(), 0.01);
      assertEquals("J~/>OAK#jszQo;Cf", linhaEncomenda0.getCodigo());
      assertEquals(776.98425596713, double0, 0.01);
      assertEquals("", linhaEncomenda0.getNome());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 445.3665622191, 445.3665622191);
      linhaEncomenda0.setPreco((-3402.38206154));
      double double0 = linhaEncomenda0.getPreco();
      assertEquals((-1515307.202104004), linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
      assertEquals((-3402.38206154), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setNome((String) null);
      linhaEncomenda0.getNome();
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("J.?Op&", "J.?Op&", (-1792.5826278), (-2723.3625585262434));
      linhaEncomenda0.getNome();
      assertEquals(4881852.411615104, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setCodigo((String) null);
      linhaEncomenda0.getCodigo();
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("MSUFSa_W`", "MSUFSa_W`", 1.0, 1.0);
      linhaEncomenda0.getCodigo();
      assertEquals(1.0, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("MSUFSa_W`", "MSUFSa_W`", 1.0, 1.0);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(1.0, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 0.0, 0.0);
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(0.0, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 445.3665622191, 445.3665622191);
      linhaEncomenda0.setPreco((-3402.38206154));
      linhaEncomenda0.clone();
      assertEquals((-3402.38206154), linhaEncomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-1.0), (-1.0));
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 445.3665622191, 445.3665622191);
      linhaEncomenda0.setPreco((-3402.38206154));
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals((-3402.38206154), linhaEncomenda0.getPreco(), 0.01);
      assertEquals((-1515307.202104004), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("J.?Op&", "J.?Op&", (-1792.5826278), (-2723.3625585262434));
      double double0 = linhaEncomenda0.getQuantidade();
      assertEquals(4881852.411615104, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
      assertEquals((-1792.5826278), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 445.3665622191, 445.3665622191);
      double double0 = linhaEncomenda0.getPreco();
      assertEquals(445.3665622191, double0, 0.01);
      assertEquals(445.3665622191, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 0.0, 0.0);
      linhaEncomenda0.getNome();
      assertEquals(0.0, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-1.0), (-1.0));
      linhaEncomenda0.getCodigo();
      assertEquals(1.0, linhaEncomenda0.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = null;
      try {
        linhaEncomenda0 = new LinhaEncomenda((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.LinhaEncomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" , Quantidade: ", " , Quantidade: ", (-1.0), (-1.0));
      String string0 = linhaEncomenda0.toString();
      assertEquals("Codigo:  , Quantidade:  , Produto:  , Quantidade:  , Quantidade: -1.00 , Valor Unit\u00E1rio: -1.00\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      double double0 = linhaEncomenda0.calculaValorLinhaEnc();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda(" , Quantidade: ", " , Quantidade: ", (-1.0), (-1.0));
      LinhaEncomenda linhaEncomenda1 = linhaEncomenda0.clone();
      assertEquals(1.0, linhaEncomenda1.calculaValorLinhaEnc(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      linhaEncomenda0.setQuantidade(0.0);
      assertEquals(0.0, linhaEncomenda0.getPreco(), 0.01);
      assertEquals(0.0, linhaEncomenda0.getQuantidade(), 0.01);
  }
}
