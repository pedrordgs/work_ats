/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:06:06 GMT 2020
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.GPS;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Transportadora;
import MVC.Models.BaseModels.TransportadoraMed;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.Catalogs.Transportadoras;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transportadoras_ESTest extends Transportadoras_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("2 .tpAknJ", "MVC.Models.BaseModels.Utilizador", (-178.687), (-178.687), "MVC.Models.BaseModels.Utilizador", (-178.687), 0.0, true, 0);
      transportadoras0.addTransportadora(transportadoraMed0);
      Boolean boolean0 = Boolean.FALSE;
      transportadoras0.setEstaLivreTransportadora("2 .tpAknJ", boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>();
      Transportadora transportadora0 = new Transportadora();
      hashMap0.put("A}L`ZduC3B", transportadora0);
      Transportadoras transportadoras0 = new Transportadoras(hashMap0);
      transportadoras0.incTransportadora("A}L`ZduC3B");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("g", "mcvh{T#q@7![#;&", 1693.17414, 0.0, "g", 1693.17414, (-1.0), true, (-2160));
      transportadoras0.addTransportadora(transportadoraMed0);
      transportadoras0.decTransportadora("g");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6..?(a,Q", 60.0, 60.0, false);
      transportadoras0.addTransportadora(transportadoraMed0);
      transportadoras0.classificaTransportadora("", 2597);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6.+?(a,Q", 60.0, 60.0, false);
      transportadoraMed0.setVelocidadeMed((-3117.87));
      transportadoras0.addTransportadora(transportadoraMed0);
      Transportadora transportadora0 = transportadoras0.getTransportadora("");
      assertEquals("", transportadora0.getPass());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6.+?(a,Q", 60.0, 60.0, false);
      transportadoraMed0.classificaTransportadora(288);
      transportadoras0.addTransportadora(transportadoraMed0);
      Transportadora transportadora0 = transportadoras0.getTransportadora("");
      assertEquals("V6.+?(a,Q", transportadora0.getNif());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6..?(a,Q", 60.0, 60.0, false);
      transportadoraMed0.setKmsTotal(4.0);
      transportadoras0.addTransportadora(transportadoraMed0);
      Transportadora transportadora0 = transportadoras0.getTransportadora("");
      assertEquals(4.0, transportadora0.getKmsTotal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6..?(a,Q", (-2879.0), (-2879.0), false);
      transportadoraMed0.addKmsTotal((-2879.0));
      transportadoras0.addTransportadora(transportadoraMed0);
      TransportadoraMed transportadoraMed1 = (TransportadoraMed)transportadoras0.getTransportadora("");
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6.+?(a,Q", 60.0, 60.0, false);
      transportadoraMed0.setEstaLivre(false);
      transportadoras0.addTransportadora(transportadoraMed0);
      TransportadoraMed transportadoraMed1 = (TransportadoraMed)transportadoras0.getTransportadora("");
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoras0.addTransportadora(transportadoraMed0);
      Transportadora transportadora0 = transportadoras0.getTransportadora("");
      assertTrue(transportadora0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      GPS gPS0 = transportadoraMed0.getGPS();
      encomenda0.setPreco(3336.73944913497);
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 958.87610561);
      assertEquals(3336.73944913497, encomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Utilizador utilizador0 = new Utilizador("r", "r", (-1968526675), (-1201.93456148313));
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda("gsC^A9UO\"Zg_", "r", (-1.0), linkedList0);
      encomenda0.setPreco((-1201.93456148313));
      GPS gPS0 = new GPS();
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 628.8420238288072);
      assertEquals((-1201.93456148313), encomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>(1813);
      Transportadoras transportadoras0 = new Transportadoras(hashMap0);
      Utilizador utilizador0 = new Utilizador();
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = utilizador0.criaEncomenda("|8.QfL@%I?3X%m!jB\"`", "FD<7^ONXf.-]rrQK", 1598.9653725687565, list0);
      GPS gPS0 = new GPS();
      Encomenda encomenda2 = transportadoras0.entregaEncomendaTransportadora(encomenda1, gPS0, (-482.0));
      assertEquals("FD<7^ONXf.-]rrQK", encomenda2.getCodLoja());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6.+?(a,Q", 60.0, 60.0, true);
      GPS gPS0 = transportadoraMed0.getGPS();
      transportadoras0.addTransportadora(transportadoraMed0);
      Encomenda encomenda0 = new Encomenda();
      transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, (-1.0));
      assertEquals((-1.0), encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia(2879.625149216474);
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, (GPS) null, 0.0);
      assertEquals("", encomenda1.getCodEnc());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia((-305.07393043675));
      GPS gPS0 = new GPS((-305.07393043675), (-305.07393043675));
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 1276.21447817);
      assertFalse(encomenda1.getMedica());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6..?(a,Q", 60.0, 60.0, false);
      GPS gPS0 = transportadoraMed0.getGPS();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setClassificacao(1449);
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 1.2);
      assertEquals("", encomenda1.getCodEnc());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      GPS gPS0 = transportadoraMed0.getGPS();
      encomenda0.setClassificacao((-1));
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 958.87610561);
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.setTransportadoras((Map<String, Transportadora>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      GPS gPS0 = new GPS((-1371.5), (-1371.5));
      // Undeclared exception!
      try { 
        transportadoras0.entregaEncomendaTransportadora((Encomenda) null, gPS0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.addTransportadora((Transportadora) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>();
      hashMap0.put("qmmK`gxl(I", (Transportadora) null);
      Transportadoras transportadoras0 = null;
      try {
        transportadoras0 = new Transportadoras(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transportadoras transportadoras0 = null;
      try {
        transportadoras0 = new Transportadoras((Transportadoras) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Map<String, Transportadora> map0 = transportadoras0.getTransportadoras();
      transportadoras0.setTransportadoras(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6..?(a,Q", 60.0, 60.0, false);
      transportadoras0.addTransportadora(transportadoraMed0);
      boolean boolean0 = transportadoras0.existeTransportadora("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      boolean boolean0 = transportadoras0.existeTransportadora("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6..?(a,Q", 60.0, 60.0, false);
      GPS gPS0 = transportadoraMed0.getGPS();
      transportadoras0.addTransportadora(transportadoraMed0);
      Encomenda encomenda0 = new Encomenda();
      transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 1.2);
      assertEquals(1.2, encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6..?(a,Q", 60.0, 60.0, false);
      GPS gPS0 = transportadoraMed0.getGPS();
      transportadoras0.addTransportadora(transportadoraMed0);
      Encomenda encomenda0 = new Encomenda();
      transportadoras0.entregaEncomendaTransportadora(encomenda0, gPS0, 1470.5457);
      assertEquals(1470.5457, encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = Boolean.TRUE;
      encomenda0.setMedica(boolean0);
      Encomenda encomenda1 = transportadoras0.entregaEncomendaTransportadora(encomenda0, (GPS) null, 0);
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "V6..?(a,Q", 60.0, 60.0, false);
      transportadoras0.addTransportadora(transportadoraMed0);
      Map<String, Transportadora> map0 = transportadoras0.getTransportadoras();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = transportadoras0.clone();
      assertNotSame(transportadoras1, transportadoras0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.getTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.classificaTransportadora("", 2597);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      String string0 = transportadoras0.toString();
      assertEquals("Transportadoras:\n[]", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      transportadoras0.removeTransportadora("#'z");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-2879.0), (-3117.87), "", (-2879.0), (-2879.0), true);
      transportadoras0.addTransportadora(transportadoraMed0);
      transportadoras0.addEncomendaTransportadora("\nRaio: ", "", 1598.9653725687565);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      Transportadoras transportadoras1 = new Transportadoras(transportadoras0);
      assertFalse(transportadoras1.equals((Object)transportadoras0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>();
      Transportadoras transportadoras0 = new Transportadoras(hashMap0);
      // Undeclared exception!
      try { 
        transportadoras0.decTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Transportadoras transportadoras0 = new Transportadoras();
      // Undeclared exception!
      try { 
        transportadoras0.incTransportadora("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>();
      Transportadoras transportadoras0 = new Transportadoras(hashMap0);
      // Undeclared exception!
      try { 
        transportadoras0.addEncomendaTransportadora("", "Transportadoras:\n", (-1015.415735606315));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, Transportadora> hashMap0 = new HashMap<String, Transportadora>();
      Transportadoras transportadoras0 = new Transportadoras(hashMap0);
      Boolean boolean0 = Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        transportadoras0.setEstaLivreTransportadora("", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }
}
