/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:04:07 GMT 2020
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Loja;
import MVC.Models.BaseModels.Produto;
import MVC.Models.Catalogs.Lojas;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Lojas_ESTest extends Lojas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      // Undeclared exception!
      try { 
        lojas0.getProdutoLoja("Lojas:\n[]", "Lojas:\n[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      // Undeclared exception!
      try { 
        lojas0.addEncomendaLoja("i;R%beq_0e,^9&n~_", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Produto> linkedList0 = new LinkedList<Produto>();
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja();
      lojas0.addLoja(loja0);
      lojas0.addProdutosLoja(linkedList0, "");
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja("2", "2", (-1.0), (-1.0));
      lojas0.addLoja(loja0);
      Produto produto0 = new Produto();
      lojas0.addProdutoLoja(produto0, "2");
      assertEquals("", produto0.getCod());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja();
      lojas0.addLoja(loja0);
      lojas0.addEncomendaLoja("", "");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Map<String, Loja> map0 = lojas0.getLojas();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Loja loja0 = new Loja("MVC.Models.Catalogs.Lojas", "Lojas:\n", (-423.96319), (-423.96319));
      hashMap0.put("MVC.Models.Catalogs.Lojas", loja0);
      lojas0.setLojas(hashMap0);
      Loja loja1 = lojas0.getLoja("MVC.Models.Catalogs.Lojas");
      assertEquals("MVC.Models.Catalogs.Lojas", loja1.getCod());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Lojas lojas0 = new Lojas(hashMap0);
      Loja loja0 = new Loja();
      lojas0.addLoja(loja0);
      List<Loja> list0 = lojas0.getListaLojas();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      // Undeclared exception!
      try { 
        lojas0.setLojas((Map<String, Loja>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      // Undeclared exception!
      try { 
        lojas0.addLoja((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lojas lojas0 = null;
      try {
        lojas0 = new Lojas((Map<String, Loja>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lojas lojas0 = null;
      try {
        lojas0 = new Lojas((Lojas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("T-E7n0 y%@]S;Tt:1V", "", 3145.6478058, (-1693.29599));
      linkedList0.add(linhaEncomenda0);
      // Undeclared exception!
      try { 
        lojas0.isEncomendaMed(linkedList0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Lojas lojas0 = new Lojas(hashMap0);
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      boolean boolean0 = lojas0.isEncomendaMed(linkedList0, "@^.X).");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      boolean boolean0 = lojas0.existeLoja("Lojas:r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Loja loja0 = new Loja("f.z/1AhuaNc_Kmf", "f.z/1AhuaNc_Kmf", (-2512), (-2512));
      hashMap0.put("f.z/1AhuaNc_Kmf", loja0);
      Lojas lojas0 = new Lojas(hashMap0);
      // Undeclared exception!
      try { 
        lojas0.addProdutosTodasLojas((Collection<Produto>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      LinkedList<Produto> linkedList0 = new LinkedList<Produto>();
      lojas0.addProdutosTodasLojas(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja("Lojas:\n[]", "@^.X).", 0.0, (-1030.41224666826));
      lojas0.addLoja(loja0);
      Produto produto0 = new Produto();
      lojas0.addProdutoTodasLojas(produto0);
      assertEquals(0.0, produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = new Loja();
      lojas0.addLoja(loja0);
      Map<String, Loja> map0 = lojas0.getLojas();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Produto produto0 = new Produto();
      // Undeclared exception!
      try { 
        lojas0.addProdutoLoja(produto0, "2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Loja loja0 = lojas0.getLoja("Lojas:\n");
      assertNull(loja0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      lojas0.removeLoja("");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Lojas lojas0 = new Lojas(hashMap0);
      Lojas lojas1 = lojas0.clone();
      assertNotSame(lojas0, lojas1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Lojas lojas0 = new Lojas(hashMap0);
      Loja loja0 = new Loja();
      lojas0.addLoja(loja0);
      boolean boolean0 = lojas0.existeLoja("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Loja> hashMap0 = new HashMap<String, Loja>();
      Lojas lojas0 = new Lojas(hashMap0);
      List<Loja> list0 = lojas0.getListaLojas();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      String string0 = lojas0.toString();
      assertEquals("Lojas:\n[]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lojas lojas0 = new Lojas();
      Lojas lojas1 = new Lojas(lojas0);
      assertFalse(lojas1.equals((Object)lojas0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Produto> linkedList0 = new LinkedList<Produto>();
      Lojas lojas0 = new Lojas();
      // Undeclared exception!
      try { 
        lojas0.addProdutosLoja(linkedList0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Lojas", e);
      }
  }
}
