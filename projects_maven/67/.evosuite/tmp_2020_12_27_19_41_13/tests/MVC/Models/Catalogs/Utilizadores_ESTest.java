/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:12:58 GMT 2020
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.Catalogs.Utilizadores;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utilizadores_ESTest extends Utilizadores_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizador utilizador0 = new Utilizador("", "0fE^OanM$)p7O#8", 2392.334335, 2392.334335);
      utilizadores0.addUtilizador(utilizador0);
      utilizadores0.classificaEncomenda("", "lxi");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizador utilizador0 = new Utilizador("}*f:Cw=", "}\n", 0.0, 0.0);
      hashMap0.put("", utilizador0);
      utilizadores0.setDataUtilizadores(hashMap0);
      utilizadores0.addEncomendaUtilizador("`:E]\"V Ns4C(", "");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizador utilizador0 = new Utilizador((String) null, "09", 180.17, 180.17);
      utilizadores0.addUtilizador(utilizador0);
      Utilizador utilizador1 = utilizadores0.getUtilizador((String) null);
      assertNotSame(utilizador1, utilizador0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizador utilizador0 = new Utilizador("}*f:Cw=", "}\n", 0.0, 0.0);
      hashMap0.put("", utilizador0);
      utilizadores0.setDataUtilizadores(hashMap0);
      utilizadores0.aceitaEncomendaUtilizador("", "jsa,^1", true);
      Utilizador utilizador1 = utilizadores0.getUtilizador("");
      assertEquals(1, utilizador1.getNumeroEncomendas());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      hashMap0.put("E`z:F>zVD8@", (Utilizador) null);
      // Undeclared exception!
      try { 
        utilizadores0.setDataUtilizadores(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizadores utilizadores0 = null;
      try {
        utilizadores0 = new Utilizadores((Map<String, Utilizador>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utilizadores utilizadores0 = null;
      try {
        utilizadores0 = new Utilizadores((Utilizadores) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizador utilizador0 = new Utilizador("}*f:Cw=", "}\n", 0.0, 0.0);
      hashMap0.put("", utilizador0);
      utilizadores0.setDataUtilizadores(hashMap0);
      Map<String, Utilizador> map0 = utilizadores0.getDataUtilizadores();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Map<String, Utilizador> map0 = utilizadores0.getDataUtilizadores();
      utilizadores0.setDataUtilizadores(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      Utilizadores utilizadores1 = new Utilizadores(utilizadores0);
      assertFalse(utilizadores1.equals((Object)utilizadores0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizador utilizador0 = new Utilizador();
      utilizadores0.addUtilizador(utilizador0);
      boolean boolean0 = utilizadores0.existeUtilizador("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      boolean boolean0 = utilizadores0.existeUtilizador("YO8'sZ%m-~M@&?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      Utilizador utilizador0 = new Utilizador();
      utilizadores0.addUtilizador(utilizador0);
      Utilizadores utilizadores1 = utilizadores0.clone();
      assertFalse(utilizadores1.equals((Object)utilizadores0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      // Undeclared exception!
      try { 
        utilizadores0.classificaEncomenda("*@{Hqx48nLjuuGb'[P", "MVC.Models.BaseModels.Voluntario");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.aceitaEncomendaUtilizador("", "MVC.Models.BaseModels.User", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      Utilizador utilizador0 = utilizadores0.getUtilizador("*@{Hqx48nLjuuGb'[P");
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      utilizadores0.removeUtilizador("MVC.Models.BaseModels.Voluntario");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      // Undeclared exception!
      try { 
        utilizadores0.addEncomendaUtilizador("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizadores utilizadores0 = new Utilizadores();
      String string0 = utilizadores0.toString();
      assertEquals("Utilizadores: \n[]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Utilizador> hashMap0 = new HashMap<String, Utilizador>();
      Utilizadores utilizadores0 = new Utilizadores(hashMap0);
      // Undeclared exception!
      try { 
        utilizadores0.addUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Utilizadores", e);
      }
  }
}
