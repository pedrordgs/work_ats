/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:02:04 GMT 2020
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.LinhaEncomenda;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomenda_ESTest extends Encomenda_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao(109.8477448);
      encomenda0.toString();
      assertEquals(109.8477448, encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("eUl|CfTwC&jCPP,Jr", "eUl|CfTwC&jCPP,Jr", 1791.7, 1791.7);
      encomenda0.adicionaLinha(linhaEncomenda0);
      int int0 = encomenda0.numeroTotalProdutos();
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(1791, int0);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertFalse(encomenda0.getMedica());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("`x{E\"O=<]Rc_5", "`x{E\"O=<]Rc_5", (-1494.42059), (-1494.42059));
      linkedList0.add(linhaEncomenda0);
      encomenda0.setLinhas(linkedList0);
      int int0 = encomenda0.numeroTotalProdutos();
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals((-1494), int0);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertFalse(encomenda0.getMedica());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco(3699.49137811);
      double double0 = encomenda0.getPreco();
      assertEquals(3699.49137811, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco((-706.2745));
      double double0 = encomenda0.getPreco();
      assertEquals((-706.2745), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("", "", "%.2f", 429.0, linkedList0);
      double double0 = encomenda0.getPeso();
      assertEquals(429.0, double0, 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals("", encomenda0.getCodEnc());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals("%.2f", encomenda0.getCodLoja());
      assertFalse(encomenda0.getMedica());
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals("", encomenda0.getCodUser());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, "", "", (-2944.14741), list0);
      double double0 = encomenda1.getPeso();
      assertEquals(0.0, encomenda1.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals((-2944.14741), double0, 0.01);
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
      assertFalse(encomenda1.getMedica());
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertFalse(encomenda1.equals((Object)encomenda0));
      assertEquals(0, encomenda1.getClassificacao());
      assertEquals(0.0, encomenda1.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertFalse(encomenda0.getMedica());
      
      encomenda0.setMedica((Boolean) null);
      encomenda0.getMedica();
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertFalse(encomenda0.getMedica());
      
      Boolean boolean0 = Boolean.TRUE;
      encomenda0.setMedica(boolean0);
      encomenda0.getMedica();
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao(512.49);
      double double0 = encomenda0.getDuracao();
      assertEquals(512.49, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao((-1386.4725149604));
      double double0 = encomenda0.getDuracao();
      assertEquals((-1386.4725149604), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia(123.327);
      double double0 = encomenda0.getDistancia();
      assertEquals(123.327, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia((-1074));
      double double0 = encomenda0.getDistancia();
      assertEquals((-1074.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, (String) null, (-458.667275139), list0);
      encomenda1.getCodUser();
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
      assertEquals(0.0, encomenda1.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda1.getClassificacao());
      assertFalse(encomenda0.getMedica());
      assertFalse(encomenda1.getMedica());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals((-458.667275139), encomenda1.getPeso(), 0.01);
      assertEquals(0.0, encomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("h :", "h :", "\n", 0.0, linkedList0);
      String string0 = encomenda0.getCodUser();
      assertEquals("h :", encomenda0.getCodEnc());
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("h :", string0);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals("\n", encomenda0.getCodLoja());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, (String) null, 454.514208, list0);
      encomenda1.getCodLoja();
      assertEquals(0.0, encomenda1.getDistancia(), 0.01);
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
      assertFalse(encomenda1.getMedica());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda1.getPreco(), 0.01);
      assertEquals(454.514208, encomenda1.getPeso(), 0.01);
      assertEquals(0, encomenda1.getClassificacao());
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("7;{*1`", "7;{*1`", "7;{*1`", 0.0, list0);
      encomenda1.getCodLoja();
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertEquals(0.0, encomenda1.getDistancia(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0, encomenda1.getClassificacao());
      assertFalse(encomenda1.getMedica());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodEntregador((String) null);
      encomenda0.getCodEntregador();
      assertFalse(encomenda0.getMedica());
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setCodEntregador("'Q|[cp^kRiOfW3:]Hg");
      encomenda0.getCodEntregador();
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, (String) null, 454.514208, list0);
      encomenda1.getCodEnc();
      assertEquals(0, encomenda0.getClassificacao());
      assertFalse(encomenda1.getMedica());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda1.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda1.getDistancia(), 0.01);
      assertEquals(454.514208, encomenda1.getPeso(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0, encomenda1.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("\nC\u00F3digo Encomenda: ", " min", (String) null, 0.0, list0);
      String string0 = encomenda1.getCodEnc();
      assertEquals(0.0, encomenda1.getDistancia(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertNotNull(string0);
      assertEquals("\nC\u00F3digo Encomenda: ", string0);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
      assertFalse(encomenda1.getMedica());
      assertEquals(" min", encomenda1.getCodUser());
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda1.getClassificacao());
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda1.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getClassificacao());
      
      encomenda0.setClassificacao(1);
      int int0 = encomenda0.getClassificacao();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setClassificacao((-1074));
      int int0 = encomenda0.getClassificacao();
      assertEquals((-1074), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco(3699.49137811);
      encomenda0.clone();
      assertEquals(3699.49137811, encomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setPreco((-706.2745));
      encomenda0.clone();
      assertEquals((-706.2745), encomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("Codigo: ", "l=_U<NUN", "\nClassificacao:", 60.0, list0);
      Encomenda encomenda2 = encomenda1.clone();
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals("Codigo: ", encomenda2.getCodEnc());
      assertEquals(60.0, encomenda2.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertFalse(encomenda2.getMedica());
      assertEquals("l=_U<NUN", encomenda2.getCodUser());
      assertFalse(encomenda0.getMedica());
      assertTrue(encomenda2.equals((Object)encomenda1));
      assertEquals(0.0, encomenda2.getDistancia(), 0.01);
      assertEquals(0.0, encomenda1.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda2.getDuracao(), 0.01);
      assertEquals(0, encomenda2.getClassificacao());
      assertEquals("\nClassificacao:", encomenda2.getCodLoja());
      assertEquals(0, encomenda0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, (String) null, (String) null, (-4175.0), list0);
      Encomenda encomenda2 = encomenda1.clone();
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals((-4175.0), encomenda2.getPeso(), 0.01);
      assertFalse(encomenda2.getMedica());
      assertEquals(0.0, encomenda1.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda1.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0, encomenda2.getClassificacao());
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao(391.8189611301);
      encomenda0.clone();
      assertEquals(391.8189611301, encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao((-345.2694084559475));
      encomenda0.clone();
      assertEquals((-345.2694084559475), encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      
      encomenda0.setDistancia(1.0);
      encomenda0.clone();
      assertEquals(1.0, encomenda0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      
      encomenda0.setDistancia((-1.0));
      encomenda0.clone();
      assertEquals(0, encomenda0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      assertEquals(0, encomenda0.getClassificacao());
      
      encomenda0.setClassificacao(1);
      encomenda0.clone();
      assertEquals(1, encomenda0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setClassificacao((-1));
      encomenda0.clone();
      assertEquals((-1), encomenda0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda(">_htVEl)", " , Produto: ", " , Produto: ", 60.0, linkedList0);
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("o#_N", ">_htVEl)", (-1.0), 60.0);
      encomenda0.adicionaLinha(linhaEncomenda0);
      double double0 = encomenda0.calculaValorTotal();
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(" , Produto: ", encomenda0.getCodLoja());
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals((-60.0), double0, 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(" , Produto: ", encomenda0.getCodUser());
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(">_htVEl)", encomenda0.getCodEnc());
      assertEquals(60.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.getMedica());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      // Undeclared exception!
      try { 
        encomenda0.setLinhas((List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      linkedList0.add((LinhaEncomenda) null);
      Encomenda encomenda0 = new Encomenda("", (String) null, "{#VZy~9A>,8%x", 3132.530469, linkedList0);
      // Undeclared exception!
      try { 
        encomenda0.getLinhas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda((String) null, "Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n", "AwN}", 0.0, list0);
      // Undeclared exception!
      try { 
        encomenda0.equals(encomenda1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      linkedList0.add((LinhaEncomenda) null);
      Encomenda encomenda0 = new Encomenda("Codigo: ", "(e", "~7thUF`", (-2038.261), linkedList0);
      // Undeclared exception!
      try { 
        encomenda0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      linkedList0.add((LinhaEncomenda) null);
      Encomenda encomenda0 = new Encomenda("MVC.Models.BaseModels.LinhaEncomenda", (String) null, (String) null, 1.0, linkedList0);
      // Undeclared exception!
      try { 
        encomenda0.calculaValorTotal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("h :", "h :", "\n", 0.0, linkedList0);
      // Undeclared exception!
      try { 
        encomenda0.adicionaLinha((LinhaEncomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda("", "e12lHq=~IKt4{", "", 1.0, (List<LinhaEncomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Encomenda encomenda0 = null;
      try {
        encomenda0 = new Encomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Encomenda", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", (-1193.95976), (-1193.95976));
      encomenda0.adicionaLinha(linhaEncomenda0);
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      encomenda0.setLinhas(list0);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertFalse(encomenda0.getMedica());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getCodUser();
      assertEquals(0, encomenda0.getClassificacao());
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getCodEntregador();
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      double double0 = encomenda0.getDuracao();
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      double double0 = encomenda0.getPeso();
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getCodLoja();
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      int int0 = encomenda0.getClassificacao();
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0, int0);
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      encomenda0.getCodEnc();
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Encomenda encomenda1 = new Encomenda(encomenda0);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertTrue(encomenda1.equals((Object)encomenda0));
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0, encomenda1.getClassificacao());
      assertFalse(encomenda1.getMedica());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      double double0 = encomenda0.getDistancia();
      assertEquals(0, encomenda0.getClassificacao());
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("", "", "", 3132.2974554533807, linkedList0);
      double double0 = encomenda0.getPreco();
      assertEquals(0.0, double0, 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(3132.2974554533807, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("", "", "", 19.1, list0);
      encomenda1.equals(encomenda0);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda1.getPreco(), 0.01);
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
      assertEquals(19.1, encomenda1.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda1.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0, encomenda1.getClassificacao());
      assertFalse(encomenda1.getMedica());
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertFalse(encomenda0.getMedica());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      boolean boolean0 = encomenda0.equals((Object) null);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      boolean boolean0 = encomenda0.equals(encomenda0);
      assertTrue(boolean0);
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      boolean boolean0 = encomenda0.equals(list0);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 3132.2974554533807, 3132.2974554533807);
      linkedList0.add(linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda("", "", "", 3132.2974554533807, linkedList0);
      boolean boolean0 = encomenda0.existeProdutoEncomenda("");
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(3132.2974554533807, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertFalse(encomenda0.getMedica());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 3132.2974554533807, 3132.2974554533807);
      linkedList0.add(linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda("", "", "", 3132.2974554533807, linkedList0);
      boolean boolean0 = encomenda0.existeProdutoEncomenda(";:[yO6&@");
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertFalse(encomenda0.getMedica());
      assertFalse(boolean0);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(3132.2974554533807, encomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      encomenda0.adicionaLinha(linhaEncomenda0);
      // Undeclared exception!
      try { 
        encomenda0.existeProdutoEncomenda((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda();
      encomenda0.adicionaLinha(linhaEncomenda0);
      int int0 = encomenda0.numeroTotalProdutos();
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0, int0);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertFalse(encomenda0.getMedica());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      LinhaEncomenda linhaEncomenda0 = new LinhaEncomenda("", "", 3132.2974554533807, 3132.2974554533807);
      linkedList0.add(linhaEncomenda0);
      Encomenda encomenda0 = new Encomenda("", "", "", 3132.2974554533807, linkedList0);
      double double0 = encomenda0.calculaValorTotal();
      assertEquals(9811287.349439723, double0, 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(3132.2974554533807, encomenda0.getPeso(), 0.01);
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      double double0 = encomenda0.calculaValorTotal();
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertFalse(encomenda0.getMedica());
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      String string0 = encomenda0.toString();
      assertFalse(encomenda0.getMedica());
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals("Encomenda{\nC\u00F3digo Encomenda: \nC\u00F3digo User: \nC\u00F3digo Loja: \nPeso: 0.00\nDuracao: 0h :0 min\nPreco: 0.00\nLinhas: []\nCodigo do Entregador: \nClassificacao:0}\n", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = encomenda0.getMedica();
      assertFalse(boolean0);
      
      encomenda0.setMedica(boolean0);
      assertEquals(0, encomenda0.getClassificacao());
      assertEquals(0.0, encomenda0.getPreco(), 0.01);
      assertEquals(0.0, encomenda0.getDuracao(), 0.01);
      assertEquals(0.0, encomenda0.getDistancia(), 0.01);
      assertEquals(0.0, encomenda0.getPeso(), 0.01);
  }
}
