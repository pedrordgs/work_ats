/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:21:01 GMT 2020
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Voluntario;
import MVC.Models.BaseModels.VoluntarioMed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntario_ESTest extends Voluntario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getVelocidadeMed();
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertTrue(voluntario0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed();
      voluntarioMed0.setVelocidadeMed((-3400.3022));
      double double0 = voluntarioMed0.getVelocidadeMed();
      assertEquals((-3400.3022), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      double double0 = voluntario0.getRaio();
      assertTrue(voluntario0.getEstaLivre());
      assertEquals(0.0, voluntario0.getVelocidadeMed(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario((String) null, "Vc(j>p{W0Sk4", 856.62509, 0.0, 856.62509);
      double double0 = voluntario0.getRaio();
      assertTrue(voluntario0.getEstaLivre());
      assertEquals(856.62509, double0, 0.01);
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.classificaVoluntario(2934);
      double double0 = voluntario0.getNota();
      assertEquals(2934.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("%g6[ IKX5dGY", "\nPreco: ", (-2511.1038035242336), (-2511.1038035242336), (-2511.1038035242336), true);
      voluntarioMed0.classificaVoluntario((-434));
      double double0 = voluntarioMed0.getNota();
      assertEquals((-434.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      assertTrue(voluntario0.getEstaLivre());
      
      voluntario0.setEstaLivre(false);
      boolean boolean0 = voluntario0.getEstaLivre();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("`Ho$R5fq[ rlZs", "", (-4547.88299507), (-4547.88299507), 4.0);
      voluntario0.classificaVoluntario(4582);
      voluntario0.getClassificacao();
      assertEquals(4582.0, voluntario0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed();
      voluntarioMed0.classificaVoluntario((-969));
      voluntarioMed0.getClassificacao();
      assertEquals((-969.0), voluntarioMed0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.setVelocidadeMed((-2640.432732698));
      voluntario0.clone();
      assertEquals((-2640.432732698), voluntario0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.classificaVoluntario(2934);
      voluntario0.clone();
      assertEquals(2934.0, voluntario0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("%g6[ IKX5dGY", "\nPreco: ", (-2511.1038035242336), (-2511.1038035242336), (-2511.1038035242336), true);
      voluntarioMed0.classificaVoluntario((-434));
      voluntarioMed0.clone();
      assertEquals((-434.0), voluntarioMed0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      assertTrue(voluntario0.getEstaLivre());
      
      voluntario0.setEstaLivre(false);
      voluntario0.clone();
      assertFalse(voluntario0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Voluntario voluntario0 = null;
      try {
        voluntario0 = new Voluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("", "%.2f", 2.0, 2.0, 2.0);
      double double0 = voluntario0.getVelocidadeMed();
      assertEquals(2.0, voluntario0.getRaio(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      boolean boolean0 = voluntario0.getEstaLivre();
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, voluntario0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("uh($-2zO[C/nMa/Kvv", "Transportadora{ \n", (-201.386514135), (-201.386514135), (-201.386514135));
      voluntario0.getNota();
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertEquals((-201.386514135), voluntario0.getRaio(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("uh($-2zO[C/nMa/Kvv", "Transportadora{ \n", (-201.386514135), (-201.386514135), (-201.386514135));
      voluntario0.getClassificacao();
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertTrue(voluntario0.getEstaLivre());
      assertEquals((-201.386514135), voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario("uh($-2zO[C/nMa/Kvv", "Transportadora{ \n", (-201.386514135), (-201.386514135), (-201.386514135));
      double double0 = voluntario0.getRaio();
      assertTrue(voluntario0.getEstaLivre());
      assertEquals((-201.386514135), double0, 0.01);
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      Voluntario voluntario1 = new Voluntario(voluntario0);
      assertEquals(0.0, voluntario0.getRaio(), 0.01);
      assertTrue(voluntario1.getEstaLivre());
      assertEquals(0.0, voluntario0.getVelocidadeMed(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario(";7", ";7", 1.0, 1.0, 1.0);
      Voluntario voluntario1 = voluntario0.clone();
      assertEquals(5.0, voluntario1.getVelocidadeMed(), 0.01);
      assertEquals(1.0, voluntario0.getRaio(), 0.01);
      assertTrue(voluntario1.getEstaLivre());
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
      assertEquals(1.0, voluntario1.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario(";7", ";7", 1.0, 1.0, 1.0);
      String string0 = voluntario0.toString();
      assertTrue(voluntario0.getEstaLivre());
      assertEquals("Voluntario{\nC\u00F3digo: ;7\nNome: ;7\nGPS: (1.0,1.0)\nRaio: 1.0\nClassificacao:0.00\n}", string0);
      assertEquals(5.0, voluntario0.getVelocidadeMed(), 0.01);
  }
}
