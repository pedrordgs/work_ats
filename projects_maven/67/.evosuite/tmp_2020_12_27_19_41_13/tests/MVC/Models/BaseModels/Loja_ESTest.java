/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:14:47 GMT 2020
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Loja;
import MVC.Models.BaseModels.Produto;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Loja_ESTest extends Loja_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Loja loja0 = new Loja();
      Produto produto0 = new Produto();
      loja0.addProduto(produto0);
      Produto produto1 = loja0.getProduto("");
      assertEquals("", produto1.getCod());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Loja loja0 = new Loja();
      Produto produto0 = new Produto("", "5_^Tia%}%", 312.8, false);
      produto0.setCod("5_^Tia%}%");
      loja0.addProduto(produto0);
      Produto produto1 = loja0.getProduto("5_^Tia%}%");
      assertEquals("5_^Tia%}%", produto1.getNome());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Loja loja0 = new Loja("Loja{\n", "Hf6{]L^^*&!~lK[\"", 0.0, 0.0);
      Produto produto0 = new Produto("", "Loja{\n", (-5454.6), true);
      loja0.addProduto(produto0);
      Produto produto1 = loja0.getProduto("");
      assertEquals("", produto1.getCod());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.produtos = null;
      // Undeclared exception!
      try { 
        loja0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.produtos = null;
      // Undeclared exception!
      try { 
        loja0.getListaProdutos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.produtos = null;
      // Undeclared exception!
      try { 
        loja0.existeProduto("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Loja loja0 = new Loja();
      // Undeclared exception!
      try { 
        loja0.addProdutos((Collection<Produto>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Loja loja0 = new Loja("\nNumero de encomendas: ", "", 1280.4340753139, (-1431.927));
      // Undeclared exception!
      try { 
        loja0.addProduto((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Loja loja0 = null;
      try {
        loja0 = new Loja((Loja) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Loja loja0 = new Loja();
      LinkedList<Produto> linkedList0 = new LinkedList<Produto>();
      Produto produto0 = new Produto();
      linkedList0.add(0, produto0);
      loja0.addProdutos(linkedList0);
      List<Produto> list0 = loja0.getListaProdutos();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Loja loja0 = new Loja("Loja{\n", "Hf6{]L^^*&!~lK[\"", 0.0, 0.0);
      Loja loja1 = new Loja(loja0);
      assertTrue(loja1.equals((Object)loja0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Loja loja0 = new Loja();
      Produto produto0 = new Produto();
      loja0.addProduto(produto0);
      boolean boolean0 = loja0.existeProduto("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Loja loja0 = new Loja();
      boolean boolean0 = loja0.existeProduto(")pob+u~H'w]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Loja loja0 = new Loja();
      List<Produto> list0 = loja0.getListaProdutos();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Loja loja0 = new Loja();
      HashMap<String, Produto> hashMap0 = new HashMap<String, Produto>();
      loja0.produtos = (Map<String, Produto>) hashMap0;
      hashMap0.put("H", (Produto) null);
      // Undeclared exception!
      try { 
        loja0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Loja loja0 = new Loja();
      String string0 = loja0.toString();
      assertEquals("Loja{\nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\n}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Loja loja0 = new Loja();
      Loja loja1 = loja0.clone();
      assertNotSame(loja1, loja0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Loja loja0 = new Loja();
      // Undeclared exception!
      try { 
        loja0.getProduto("Loja{\nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\n}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Loja", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.getDuracaoFila();
      double double0 = loja0.getDuracaoFila();
      assertEquals(0.05, double0, 0.01);
  }
}
