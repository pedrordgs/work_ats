/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:07:55 GMT 2020
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Produto;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Produto_ESTest extends Produto_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Produto produto0 = new Produto("", "", 1.0);
      assertFalse(produto0.isMedicamento());
      
      produto0.setMedicamento(true);
      boolean boolean0 = produto0.isMedicamento();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Produto produto0 = new Produto();
      produto0.setPrecoPorQuant(1040.7735);
      double double0 = produto0.getPrecoPorQuant();
      assertEquals(1040.7735, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Produto produto0 = new Produto("E~=x7T|y^)8hmMjvck", "E~=x7T|y^)8hmMjvck", (-490.924));
      double double0 = produto0.getPrecoPorQuant();
      assertEquals((-490.924), double0, 0.01);
      assertFalse(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Produto produto0 = new Produto("Zp<bq;VE0=", (String) null, (-1177.00853493015), true);
      String string0 = produto0.getNome();
      assertTrue(produto0.isMedicamento());
      assertEquals((-1177.00853493015), produto0.getPrecoPorQuant(), 0.01);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Produto produto0 = new Produto("JsV3g7CJj/%HEEK$x~", "JsV3g7CJj/%HEEK$x~", (-1918.0));
      produto0.getNome();
      assertFalse(produto0.isMedicamento());
      assertEquals((-1918.0), produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Produto produto0 = new Produto("JsV3g7CJj/%HEEK$x~", "JsV3g7CJj/%HEEK$x~", (-1918.0));
      produto0.setCod((String) null);
      produto0.getCod();
      assertEquals((-1918.0), produto0.getPrecoPorQuant(), 0.01);
      assertFalse(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Produto produto0 = new Produto();
      produto0.getCod();
      assertFalse(produto0.isMedicamento());
      assertEquals(0.0, produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Produto produto0 = new Produto("Rmynx_L!H_zNTY~#\u0003", "J", 0.0, true);
      Produto produto1 = produto0.clone();
      assertEquals("J", produto1.getNome());
      assertEquals(0.0, produto0.getPrecoPorQuant(), 0.01);
      assertTrue(produto1.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Produto produto0 = new Produto("", "", 1.0);
      Produto produto1 = produto0.clone();
      assertEquals(1.0, produto0.getPrecoPorQuant(), 0.01);
      assertEquals(1.0, produto1.getPrecoPorQuant(), 0.01);
      assertFalse(produto1.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Produto produto0 = new Produto("JsV3g7CJj/%HEEK$x~", "JsV3g7CJj/%HEEK$x~", (-1918.0));
      Produto produto1 = produto0.clone();
      assertEquals((-1918.0), produto0.getPrecoPorQuant(), 0.01);
      assertFalse(produto1.isMedicamento());
      assertEquals((-1918.0), produto1.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Produto produto0 = null;
      try {
        produto0 = new Produto((Produto) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.Produto", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Produto produto0 = new Produto("E~=x7T|y^)8hmMjvck", "E~=x7T|y^)8hmMjvck", (-490.924));
      produto0.getCod();
      assertEquals((-490.924), produto0.getPrecoPorQuant(), 0.01);
      assertFalse(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Produto produto0 = new Produto("", "", 0.0);
      produto0.getNome();
      assertFalse(produto0.isMedicamento());
      assertEquals(0.0, produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Produto produto0 = new Produto("", "", 1.0);
      boolean boolean0 = produto0.isMedicamento();
      assertFalse(boolean0);
      assertEquals(1.0, produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Produto produto0 = new Produto("xH{2m *q}QS", (String) null, 0.0, false);
      double double0 = produto0.getPrecoPorQuant();
      assertEquals(0.0, double0, 0.01);
      assertFalse(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Produto produto0 = new Produto("Wo5V>qxm", (String) null, (-1161.6078269920777), false);
      boolean boolean0 = produto0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(produto0.isMedicamento());
      assertEquals((-1161.6078269920777), produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Produto produto0 = new Produto("xH{2m *q}QS", (String) null, 0.0, false);
      boolean boolean0 = produto0.equals(produto0);
      assertEquals(0.0, produto0.getPrecoPorQuant(), 0.01);
      assertTrue(boolean0);
      assertFalse(produto0.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Produto produto0 = new Produto("xH{2m *q}QS", (String) null, 0.0, false);
      String string0 = produto0.toString();
      assertFalse(produto0.isMedicamento());
      assertEquals("\nCodigo: xH{2m *q}QS\nProduto: null\nPreco por quantidade: 0.0", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Produto produto0 = new Produto("xH{2m *q}QS", (String) null, 0.0, false);
      Produto produto1 = produto0.clone();
      boolean boolean0 = produto0.equals(produto1);
      assertTrue(boolean0);
      assertEquals(0.0, produto0.getPrecoPorQuant(), 0.01);
      assertFalse(produto1.isMedicamento());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Produto produto0 = new Produto();
      boolean boolean0 = produto0.equals("$XK");
      assertFalse(produto0.isMedicamento());
      assertFalse(boolean0);
      assertEquals(0.0, produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Produto produto0 = new Produto("xH{2m *q}QS", (String) null, 0.0, false);
      produto0.setCod((String) null);
      Produto produto1 = produto0.clone();
      // Undeclared exception!
      try { 
        produto0.equals(produto1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Produto produto0 = new Produto("xH{2m *q}QS", (String) null, 0.0, false);
      produto0.setNome("AbHH^IC%l2Ecn");
      assertFalse(produto0.isMedicamento());
      assertEquals(0.0, produto0.getPrecoPorQuant(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Produto produto0 = new Produto("S)Q.*Ch+0#!qA", "S)Q.*Ch+0#!qA", (-767.6014556913962));
      Produto produto1 = new Produto(produto0);
      assertFalse(produto1.isMedicamento());
      assertEquals((-767.6014556913962), produto1.getPrecoPorQuant(), 0.01);
      assertEquals((-767.6014556913962), produto0.getPrecoPorQuant(), 0.01);
  }
}
