/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:08:46 GMT 2020
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.Catalogs.Encomendas;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Encomendas_ESTest extends Encomendas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("Vw_C*", "Vw_C*", "Vw_C*", 0.0, linkedList0);
      encomenda0.setPreco(1.0);
      encomendas0.addEncomenda(encomenda0);
      Encomenda encomenda1 = encomendas0.removeEncomenda("Vw_C*");
      assertEquals("Vw_C*", encomenda1.getCodLoja());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("uOV_gt9", "uOV_gt9", "MVC.Models.Catalogs.Encomendas", 1801.2312817770594, list0);
      encomendas0.addEncomenda(encomenda1);
      Encomenda encomenda2 = encomendas0.removeEncomenda("uOV_gt9");
      assertEquals(0, encomenda2.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDistancia((-316.553));
      encomendas0.addEncomenda(encomenda0);
      Encomenda encomenda1 = encomendas0.removeEncomenda("");
      assertEquals((-316.553), encomenda1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("Vw_C*", "Vw_C*", "Vw_C*", 0.0, linkedList0);
      encomendas0.addEncomenda(encomenda0);
      encomendas0.classificaEncomenda("Vw_C*", 452);
      Encomenda encomenda1 = encomendas0.removeEncomenda("Vw_C*");
      assertEquals(452, encomenda1.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda(";1=D", ";1=D", ";1=D", (-25.032340387868686), linkedList0);
      encomenda0.setClassificacao((-1642));
      encomendas0.addEncomenda(encomenda0);
      Encomenda encomenda1 = encomendas0.removeEncomenda(";1=D");
      assertEquals((-25.032340387868686), encomenda1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda(";1=D", ";1=D", ";1=D", (-25.032340387868686), linkedList0);
      encomendas0.addEncomenda(encomenda0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add(";1=D");
      List<Encomenda> list0 = encomendas0.getListaEncomendas(linkedList1);
      assertTrue(list0.contains(encomenda0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("", "EQf=QV<1@IW}x", "Codigo: ", 1523.0, linkedList0);
      hashMap0.put("", encomenda0);
      Encomendas encomendas0 = new Encomendas(hashMap0);
      Encomenda encomenda1 = encomendas0.getEncomenda("");
      assertEquals("", encomenda1.getCodEnc());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      Encomendas encomendas0 = new Encomendas(hashMap0);
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = new Encomenda("MVC.Models.Catalogs.Encomendas", "E\"#WCXC^b", "", (-1.0), list0);
      encomendas0.addEncomenda(encomenda1);
      Encomenda encomenda2 = encomendas0.getEncomenda("MVC.Models.Catalogs.Encomendas");
      assertEquals(0.0, encomenda2.getPreco(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Encomenda encomenda0 = new Encomenda();
      encomendas0.addEncomenda(encomenda0);
      Encomenda encomenda1 = encomendas0.getEncomenda("");
      assertEquals("", encomenda1.getCodEnc());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      // Undeclared exception!
      try { 
        encomendas0.setEncomendas((Map<String, Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      // Undeclared exception!
      try { 
        encomendas0.addEncomenda((Encomenda) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Encomendas encomendas0 = null;
      try {
        encomendas0 = new Encomendas((Map<String, Encomenda>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Encomendas encomendas0 = null;
      try {
        encomendas0 = new Encomendas((Encomendas) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      HashMap<String, Encomenda> hashMap0 = new HashMap<String, Encomenda>();
      encomendas0.setEncomendas(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("Vw_C*", "Vw_C*", "Vw_C*", 0.0, linkedList0);
      encomendas0.addEncomenda(encomenda0);
      boolean boolean0 = encomendas0.existsEncomenda("Vw_C*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      boolean boolean0 = encomendas0.existsEncomenda("nYu<hH}6-Jy:l5ZG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Vw_C*");
      // Undeclared exception!
      try { 
        encomendas0.getListaEncomendas(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<Encomenda> list0 = encomendas0.getListaEncomendas(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Encomendas encomendas1 = encomendas0.clone();
      assertNotSame(encomendas1, encomendas0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Encomenda encomenda0 = new Encomenda();
      encomendas0.addEncomenda(encomenda0);
      Map<String, Encomenda> map0 = encomendas0.getEncomendas();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Map<String, Encomenda> map0 = encomendas0.getEncomendas();
      Encomendas encomendas1 = new Encomendas(map0);
      assertFalse(encomendas1.equals((Object)encomendas0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      // Undeclared exception!
      try { 
        encomendas0.classificaEncomenda("\nCodigo do Entregador: ", (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      String string0 = encomendas0.toString();
      assertEquals("Encomendas:\n[]", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Encomenda encomenda0 = encomendas0.removeEncomenda("Vw_C*");
      assertNull(encomenda0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      // Undeclared exception!
      try { 
        encomendas0.getEncomenda("W=,zPA:-%=OFh]Q>9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Encomendas", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Encomendas encomendas0 = new Encomendas();
      Encomendas encomendas1 = new Encomendas(encomendas0);
      assertFalse(encomendas1.equals((Object)encomendas0));
  }
}
