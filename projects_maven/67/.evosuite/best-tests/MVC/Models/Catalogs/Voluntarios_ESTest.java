/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:07:04 GMT 2020
 */

package MVC.Models.Catalogs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.GPS;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.BaseModels.Voluntario;
import MVC.Models.BaseModels.VoluntarioMed;
import MVC.Models.Catalogs.Voluntarios;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Voluntarios_ESTest extends Voluntarios_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed(":", "\nC\u00F3digo Loja: ", 0.34939480745586615, 0.0, 483.068, true);
      voluntarios0.addVoluntario(voluntarioMed0);
      GPS gPS0 = new GPS(0.34939480745586615, 0.34939480745586615);
      voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, (-1581.1774386455));
      assertEquals(":", encomenda0.getCodEntregador());
      assertEquals((-1581.1075596840087), encomenda0.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("Volunt\u00E1rios: \n", "\n}", 0.0, 0.0, 0.0, true);
      hashMap0.put("MVC.Models.Catalogs.Voluntarios", voluntarioMed0);
      voluntarios0.setDataVoluntarios(hashMap0);
      voluntarios0.classificaVoluntario("MVC.Models.Catalogs.Voluntarios", 575);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("", "|QNgSthb\u0000", 0.0, 108.13164, (-2632.6204769362416), false);
      hashMap0.put("", voluntarioMed0);
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      voluntarios0.addEncomendaVoluntario("Y", "");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed(":", ":", 0.0, 0.0, 483.068, true);
      voluntarioMed0.setVelocidadeMed((-1.0));
      voluntarios0.addVoluntario(voluntarioMed0);
      Voluntario voluntario0 = voluntarios0.getVoluntario(":");
      assertEquals(0.0, voluntario0.getNota(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed(":", ":", 0.0, 0.0, 483.068, true);
      voluntarioMed0.classificaVoluntario((-1720));
      voluntarios0.addVoluntario(voluntarioMed0);
      Voluntario voluntario0 = voluntarios0.getVoluntario(":");
      assertEquals(483.068, voluntario0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed();
      voluntarios0.addVoluntario(voluntarioMed0);
      Voluntario voluntario0 = voluntarios0.getVoluntario("");
      assertEquals("", voluntario0.getPass());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntario voluntario0 = new Voluntario("\"lY)x*", "\"lY)x*", (-1.0), (-4880.958296643472), (-4880.958296643472));
      voluntarios0.addVoluntario(voluntario0);
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = encomenda0.getMedica();
      voluntarios0.setEstaLivreVoluntario("\"lY)x*", boolean0);
      Voluntario voluntario1 = voluntarios0.getVoluntario("\"lY)x*");
      assertEquals("\"lY)x*", voluntario1.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS(1.0, 1.0);
      encomenda0.setPreco(1.0);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 1.0);
      assertEquals("", encomenda1.getCodEnc());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed();
      encomenda0.setPreco((-909.9989740632));
      GPS gPS0 = voluntarioMed0.getGPS();
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 0.0);
      assertEquals(0.0, encomenda1.getPeso(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      Utilizador utilizador0 = new Utilizador("4>W$IE>D<vm-KN-o", "4Vp", (-351.1004258), (-351.1004258));
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      Encomenda encomenda1 = utilizador0.criaEncomenda("4>W$IE>D<vm-KN-o", "4Vp", (-351.1004258), list0);
      GPS gPS0 = new GPS();
      Encomenda encomenda2 = voluntarios0.entregaEncomendaVoluntario(encomenda1, gPS0, (-1299.276461251832));
      assertEquals("4>W$IE>D<vm-KN-o", encomenda2.getCodUser());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setDuracao(1.0);
      GPS gPS0 = new GPS((-1758.263), (-1758.263));
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, (-1758.263));
      assertEquals("", encomenda1.getCodUser());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = new Encomenda("Volunt\u00E1rios: \n", "}\n", "}\n", 1.0, linkedList0);
      encomenda0.setDistancia(1.0);
      GPS gPS0 = new GPS(1.0, 1.0);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 463.0);
      assertEquals(1.0, encomenda1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      Encomenda encomenda0 = new Encomenda();
      GPS gPS0 = new GPS(5331.824898616638, 5331.824898616638);
      encomenda0.setDistancia((-1.0));
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 0.0);
      assertEquals("", encomenda1.getCodEnc());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      Utilizador utilizador0 = new Utilizador();
      LinkedList<LinhaEncomenda> linkedList0 = new LinkedList<LinhaEncomenda>();
      Encomenda encomenda0 = utilizador0.criaEncomenda("x/ZPow{g", "Volunt\u00E1rios: \n[]", 0.0, linkedList0);
      GPS gPS0 = new GPS(2195.0, 2195.0);
      encomenda0.setClassificacao(2230);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, (-1613.813344738411));
      assertEquals(0.0, encomenda1.getDistancia(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      encomenda0.setClassificacao((-3370));
      GPS gPS0 = new GPS(470.990485247533, 470.990485247533);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, 1435.2595);
      assertEquals(0.0, encomenda1.getDuracao(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.setDataVoluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      VoluntarioMed voluntarioMed0 = new VoluntarioMed();
      GPS gPS0 = voluntarioMed0.getGPS();
      // Undeclared exception!
      try { 
        voluntarios0.entregaEncomendaVoluntario((Encomenda) null, gPS0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      // Undeclared exception!
      try { 
        voluntarios0.addVoluntario((Voluntario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Voluntarios voluntarios0 = null;
      try {
        voluntarios0 = new Voluntarios((Map<String, Voluntario>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Voluntarios voluntarios0 = null;
      try {
        voluntarios0 = new Voluntarios((Voluntarios) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Voluntarios voluntarios1 = new Voluntarios(voluntarios0);
      assertFalse(voluntarios1.equals((Object)voluntarios0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      voluntarios0.setDataVoluntarios(map0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      boolean boolean0 = voluntarios0.existeVoluntario("8!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = Boolean.valueOf(true);
      encomenda0.setMedica(boolean0);
      GPS gPS0 = new GPS(0.0, 0.0);
      Encomenda encomenda1 = voluntarios0.entregaEncomendaVoluntario(encomenda0, gPS0, (-1581.1774386455));
      assertSame(encomenda0, encomenda1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntario voluntario0 = new Voluntario("|QNgSthb\u0000", "", 0.0, 0.0, 0.0);
      hashMap0.put("", voluntario0);
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      Map<String, Voluntario> map0 = voluntarios0.getDataVoluntarios();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      Voluntarios voluntarios1 = voluntarios0.clone();
      assertNotSame(voluntarios0, voluntarios1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      Boolean boolean0 = new Boolean("|QNgSthb\u0000");
      // Undeclared exception!
      try { 
        voluntarios0.setEstaLivreVoluntario("", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.getVoluntario("aT$RT;Br4EswHW0*[+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      voluntarios0.removeVoluntario("aT$RT;Br4EswHW0*[+");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      // Undeclared exception!
      try { 
        voluntarios0.classificaVoluntario("Volunt\u00E1rios: \n[]", 1506);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Voluntarios voluntarios0 = new Voluntarios();
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("1tycb_]J|#-[uqS", "aT$RT;Br4EswHW0*[+", 37.80415, 37.80415, 37.80415, false);
      voluntarios0.addVoluntario(voluntarioMed0);
      boolean boolean0 = voluntarios0.existeVoluntario("1tycb_]J|#-[uqS");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      // Undeclared exception!
      try { 
        voluntarios0.addEncomendaVoluntario("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Voluntario> hashMap0 = new HashMap<String, Voluntario>();
      Voluntarios voluntarios0 = new Voluntarios(hashMap0);
      String string0 = voluntarios0.toString();
      assertEquals("Volunt\u00E1rios: \n[]", string0);
  }
}
