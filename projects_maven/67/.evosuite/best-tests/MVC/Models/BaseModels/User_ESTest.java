/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:10:27 GMT 2020
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.GPS;
import MVC.Models.BaseModels.Loja;
import MVC.Models.BaseModels.Transportadora;
import MVC.Models.BaseModels.TransportadoraMed;
import MVC.Models.BaseModels.User;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.BaseModels.Voluntario;
import MVC.Models.BaseModels.VoluntarioMed;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador();
      String string0 = utilizador0.toString();
      assertEquals("Utilizador{ \nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\nNumero de encomendas: 0\n}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("Loja{\nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\n}", "Loja{\nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\n}", 13, 13);
      boolean boolean0 = utilizador0.isSenha("Loja{\nC\u00F3digo: \nNome: \nGPS: (0.0,0.0)\n}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      boolean boolean0 = transportadora0.isSenha("nevhus+C}i-oR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador("MVC.Models.BaseModels.VoluntarioMed", "MVC.Models.BaseModels.VoluntarioMed", (-2225.8178084), (-129.6713347117196));
      String string0 = utilizador0.getPass();
      assertEquals("MVC.Models.BaseModels.VoluntarioMed", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed();
      String string0 = voluntarioMed0.getPass();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (-5.756497), (-1.0));
      String string0 = utilizador0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("\nNumero de encomendas: ", "MVC.Models.BaseModels.User", 0.0, 0.0, "", 4.0, 4.0, true);
      String string0 = transportadoraMed0.getName();
      assertEquals("\nNumero de encomendas: ", transportadoraMed0.getCod());
      assertEquals("MVC.Models.BaseModels.User", string0);
      assertEquals("\nNumero de encomendas: ", transportadoraMed0.getPass());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("e(??2j}EO{lrd'", "", 2616.2421, 2616.2421, "e(??2j}EO{lrd'", 0.0, 0.0, false);
      GPS gPS0 = transportadoraMed0.getGPS();
      transportadoraMed0.setGps(gPS0);
      assertEquals("e(??2j}EO{lrd'", transportadoraMed0.getCod());
      assertEquals("e(??2j}EO{lrd'", transportadoraMed0.getPass());
      assertEquals(2616.2421, gPS0.getX(), 0.01);
      assertEquals(2616.2421, gPS0.getY(), 0.01);
      assertEquals("", transportadoraMed0.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora();
      GPS gPS0 = transportadora0.getGPS();
      assertEquals(0.0, gPS0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("", "5Eqf!qW5*V7wREm]", 60.0, (-359.81175115163205), 60.0, false);
      GPS gPS0 = voluntarioMed0.getGPS();
      assertEquals("5Eqf!qW5*V7wREm]", voluntarioMed0.getName());
      assertEquals("", voluntarioMed0.getCod());
      assertEquals(60.0, gPS0.getX(), 0.01);
      assertEquals((-359.81175115163205), gPS0.getY(), 0.01);
      assertEquals("", voluntarioMed0.getPass());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Voluntario voluntario0 = new Voluntario();
      voluntario0.addEncomenda("\nC\u00F3digo Loja: ");
      List<String> list0 = voluntario0.getCodencomendas();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed((String) null, (String) null, 0.0, 314.39549, (String) null, 0.0, 0.0, false, (-1410));
      String string0 = transportadoraMed0.getCod();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("e(??2j}EO{lrd'", "", 2616.2421, 2616.2421, "e(??2j}EO{lrd'", 0.0, 0.0, false);
      String string0 = transportadoraMed0.getCod();
      assertEquals("e(??2j}EO{lrd'", transportadoraMed0.getPass());
      assertEquals("e(??2j}EO{lrd'", string0);
      assertEquals("", transportadoraMed0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Loja loja0 = new Loja();
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      double double0 = transportadoraMed0.distanciaUser(loja0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("vh", "vh", 1.0, 1.0, "C\u00F3digo: ", 60.0, 2.0, (-617));
      Transportadora transportadora1 = new Transportadora();
      double double0 = transportadora0.distanciaUser(transportadora1);
      assertEquals(1.4142135623730951, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, "\n", 60.0, (-1.0));
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      // Undeclared exception!
      try { 
        utilizador0.equals(transportadoraMed0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Loja loja0 = new Loja();
      String string0 = loja0.getCod();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (-5.756497), (-1.0));
      List<String> list0 = utilizador0.getCodencomendas();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (-5.756497), (-1.0));
      String string0 = utilizador0.getPass();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, (String) null, (-5.756497), (-1.0));
      GPS gPS0 = utilizador0.getGPS();
      assertEquals((-5.756497), gPS0.getX(), 0.01);
      assertEquals((-1.0), gPS0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Loja loja0 = new Loja();
      String string0 = loja0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("Z}G:QqTwom00(q<{='z", "Z}G:QqTwom00(q<{='z", 1254.144, 1254.144, "Z}G:QqTwom00(q<{='z", 1254.144, 1254.144, 0);
      Utilizador utilizador0 = new Utilizador("Z}G:QqTwom00(q<{='z", "Z}G:QqTwom00(q<{='z", 1254.144, 1254.144);
      boolean boolean0 = transportadora0.equals(utilizador0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      boolean boolean0 = transportadoraMed0.equals("QapH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("", "5Eqf!qW5*V7wREm]", 60.0, (-359.81175115163205), 60.0, false);
      // Undeclared exception!
      try { 
        voluntarioMed0.setGps((GPS) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora("Z}G:QqTwom00(q<{='z", "Z}G:QqTwom00(q<{='z", 1254.144, 1254.144, "Z}G:QqTwom00(q<{='z", 1254.144, 1254.144, 0);
      transportadora0.setName("Z}G:QqTwom00(q<{='z");
      assertEquals(1254.144, transportadora0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Utilizador utilizador0 = new Utilizador((String) null, "", (-2668.471637914886), 5);
      // Undeclared exception!
      try { 
        utilizador0.isSenha("0v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Loja loja0 = new Loja();
      loja0.setGps(0.0, (-2696.43));
      assertEquals("", loja0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.setPass("QapH");
      assertEquals(0.0, transportadoraMed0.getRaio(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("", "5Eqf!qW5*V7wREm]", 60.0, (-359.81175115163205), 60.0, false);
      VoluntarioMed voluntarioMed1 = new VoluntarioMed(voluntarioMed0);
      assertEquals("", voluntarioMed1.getPass());
      assertEquals("5Eqf!qW5*V7wREm]", voluntarioMed1.getName());
      assertEquals("", voluntarioMed1.getCod());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Transportadora transportadora0 = new Transportadora((String) null, (String) null, 1.0, 1.0, "l=(IrL", 1.0, 1.0, 0);
      // Undeclared exception!
      try { 
        transportadora0.distanciaUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VoluntarioMed voluntarioMed0 = new VoluntarioMed("", "5Eqf!qW5*V7wREm]", 60.0, (-359.81175115163205), 60.0, false);
      assertEquals("", voluntarioMed0.getCod());
      
      voluntarioMed0.setCod("n&lLB_'GkemzKiVSA");
      assertEquals("", voluntarioMed0.getPass());
  }
}
