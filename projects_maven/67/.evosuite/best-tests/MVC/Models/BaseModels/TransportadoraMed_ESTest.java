/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 20:21:42 GMT 2020
 */

package MVC.Models.BaseModels;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.TransportadoraMed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportadoraMed_ESTest extends TransportadoraMed_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.setVelocidadeMed((-766.91669249312));
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("pWu?&Zu0r0_:", "pWu?&Zu0r0_:", 1.0, 814.53, "pWu?&Zu0r0_:", 814.53, 1.0, true);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertTrue(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", (-750.093), (-750.093), "", (-1521.01628063), (-1163.8210531735), true, (-1));
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertTrue(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("\nTransporta Medicamentos: ", "\n", 0.0, 0.0, "", (-1465.0974791875), 0.0, true, (-1022));
      transportadoraMed0.classificaTransportadora(35);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertTrue(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.classificaTransportadora((-1));
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.addKmsTotal(2774.0);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      transportadoraMed0.addKmsTotal((-1.0));
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("Utilizador{ \n", "", 174.599228675908, 0.0, "C[]G5^ K =w{bB2", 174.599228675908, 0.0, true);
      transportadoraMed0.setEstaLivre(false);
      TransportadoraMed transportadoraMed1 = transportadoraMed0.clone();
      assertTrue(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("", "", 89.3138162514, 89.3138162514, "", 1449.3, (-1.0), true);
      boolean boolean0 = transportadoraMed0.aceitaTransporteMedicamentos();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = null;
      try {
        transportadoraMed0 = new TransportadoraMed((TransportadoraMed) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.BaseModels.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      boolean boolean0 = transportadoraMed0.aceitaTransporteMedicamentos();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed();
      TransportadoraMed transportadoraMed1 = new TransportadoraMed(transportadoraMed0);
      assertFalse(transportadoraMed1.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("\nPesdo: ", "\nPesdo: ", 0.0, 0.0, "\nPesdo: ", 0.0, 0.0, false);
      transportadoraMed0.aceitaMedicamentos(false);
      assertFalse(transportadoraMed0.aceitaTransporteMedicamentos());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransportadoraMed transportadoraMed0 = new TransportadoraMed("\nPesdo: ", "\nPesdo: ", 0.0, 0.0, "\nPesdo: ", 0.0, 0.0, false);
      String string0 = transportadoraMed0.toString();
      assertEquals("Transportadora{ \nC\u00F3digo: \nPesdo: \nNome: \nPesdo: \nGPS: (0.0,0.0)\nNIF: \nPesdo: \nRaio: 0.0\nPre\u00E7o por Km: 0.0\nKms Total: 0.00\nClassificacao:0.00\n}\nTransporta Medicamentos: false\n", string0);
  }
}
