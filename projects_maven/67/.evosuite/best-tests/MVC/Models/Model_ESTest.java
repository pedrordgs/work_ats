/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 27 19:58:47 GMT 2020
 */

package MVC.Models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import MVC.Models.BaseModels.Encomenda;
import MVC.Models.BaseModels.LinhaEncomenda;
import MVC.Models.BaseModels.Loja;
import MVC.Models.BaseModels.Produto;
import MVC.Models.BaseModels.Transportadora;
import MVC.Models.BaseModels.Utilizador;
import MVC.Models.Model;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Model_ESTest extends Model_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addTransportadora("", 716.69, 1.2, "Transportadora{ \n", 716.69, 0.0, 10, true);
      assertEquals("t1", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addTransportadora("t1", (-2154.43232), (-2154.43232), "t1", 3.0, (-1.0), 9, false);
      assertEquals("t1", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addTransportadora("<Q]jHs+mH", (-1405.37517019), 0.0, "dados/a.dat", 0.0, (-1405.37517019), 0, false);
      assertEquals("t1", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Model model0 = new Model();
      Boolean boolean0 = Boolean.FALSE;
      model0.setEstaLivreEntregador("y<`C))Zj|P\")", boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getEncomendasEntregador("w3jMbr:+IfxZWii");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Model model0 = new Model();
      boolean boolean0 = model0.loginValido(" , Valor Unit\u00E1rio: ", "HzO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Model model0 = new Model();
      boolean boolean0 = model0.loginValido("}nU=", "}nU=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.utilizadorClassificaEncomenda("|a:wDr/", "", (-2006));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Model model0 = new Model();
      Encomenda encomenda0 = new Encomenda();
      List<LinhaEncomenda> list0 = encomenda0.getLinhas();
      // Undeclared exception!
      try { 
        model0.criaEncomenda("C\u00F3digo: ", "", list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addVoluntario("4h9a8Xc,wE|d$Phoo9", (-1754.24804), (-1.0), 1177.2979560554077, false);
      assertEquals("v1", string0);
      
      boolean boolean0 = model0.loginValido("v1", "v1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addUtilizador("^~!u^", 1438.0, 60.0);
      assertEquals("u1", string0);
      
      Utilizador utilizador0 = model0.getUtilizador("u1");
      assertEquals("^~!u^", utilizador0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addLoja("t", 1972.6162847709, 0.0);
      assertEquals("l1", string0);
      
      List<Loja> list0 = model0.getListaLojas();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Model model0 = new Model();
      model0.addUtilizador("^~!u^", 1438.0, 60.0);
      model0.addUtilizador("u1", 0.0, 2.734623615905003);
      List<Encomenda> list0 = model0.getListaEncomendasPorClassificar("u2");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Model model0 = new Model();
      model0.addUtilizador("A2rw01a8]2~Cx@s+", 0.0, (-1.0));
      List<Encomenda> list0 = model0.getListaEncomendasClassificadas("u1");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Model model0 = new Model();
      model0.addTransportadora((String) null, (-2154.43232), (-2154.43232), (String) null, (-2154.43232), (-2154.43232), 9, true);
      List<Encomenda> list0 = model0.getEncomendasEntregador("t1");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Model model0 = new Model();
      Boolean boolean0 = Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        model0.setEstaLivreEntregador("", boolean0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.loginValido("", "Rfnp$]`");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.loginValido((String) null, "Lojas:\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.gravaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.gravaEstado("_>}Z_?$Q");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Model model0 = new Model();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("dados");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        model0.gravaEstado();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getFaturacao("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getEncomendasEntregador("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.criaLinha("&6fiOV;&o|^dT", "", 344.34815);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.carregaEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Model model0 = new Model();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("%.2f");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "L$W!Wp`VwfK+_mL");
      try { 
        model0.carregaEstado("%.2f");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 4C245721
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("e");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "^/6Bka^QO&Tc@");
      Model model0 = new Model();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        model0.carregaEstado("e");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("dados/a.dat");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Model model0 = new Model();
      try { 
        model0.carregaEstado();
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("dados/a.dat");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      Model model0 = new Model();
      try { 
        model0.carregaEstado();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.gravaEstado("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.carregaEstado("%.2f");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addVoluntario("4h9a8Xc,wE|d$Phoo9", (-1754.24804), (-1.0), 1177.2979560554077, false);
      assertEquals("v1", string0);
      
      boolean boolean0 = model0.existeEntregador("v1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Model model0 = new Model();
      boolean boolean0 = model0.existeEntregador((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addLoja("", (-2149.6965445791884), (-2149.6965445791884));
      assertEquals("l1", string0);
      
      boolean boolean0 = model0.addProduto("l1", "", 0.0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.addProduto("l1", "", 0.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Model model0 = new Model();
      model0.addLoja("", 3.0, 3.0);
      String string0 = model0.addLoja("", (-2154.43232), (-2154.43232));
      assertEquals("l2", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addTransportadora((String) null, (-2149.6965445791884), (-2149.6965445791884), (String) null, (-2149.6965445791884), 2.589491311151875, 9, true);
      assertEquals("t1", string0);
      
      String string1 = model0.addTransportadora("t1", (-2149.6965445791884), (-2149.6965445791884), "t1", 2.589491311151875, (-1.0), 9, true);
      assertEquals("t2", string1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addVoluntario("", 3.6226202913901835, 3.6226202913901835, 9, true);
      assertEquals("v1", string0);
      
      String string1 = model0.addVoluntario((String) null, 0.0, 9, 9, true);
      assertEquals("v2", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.setEstaLivreEntregador("tS0c*t", (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Transportadoras", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Model model0 = new Model();
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        model0.setEstaLivreEntregador("v", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Model model0 = new Model();
      Encomenda encomenda0 = new Encomenda();
      Boolean boolean0 = encomenda0.getMedica();
      model0.setEstaLivreEntregador("JiE+z`MnQ", boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Model model0 = new Model();
      model0.addLoja("&<P^[>+Ii", 891.605642, 891.605642);
      List<Produto> list0 = model0.getProdutosLoja("l1");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.getProdutosLoja("2# @miTpJ.O0c@");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 2# @miTpJ.O0c@
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getEncomendasEntregador("v1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Catalogs.Voluntarios", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addLoja("", (-2149.6965445791884), (-2149.6965445791884));
      assertEquals("l1", string0);
      
      boolean boolean0 = model0.loginValido("l1", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Model model0 = new Model();
      boolean boolean0 = model0.loginValido("l1", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addTransportadora((String) null, (-2149.6965445791884), (-2149.6965445791884), (String) null, (-2149.6965445791884), (-2149.6965445791884), 9, true);
      assertNotNull(string0);
      assertEquals("t1", string0);
      
      boolean boolean0 = model0.loginValido("t1", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Model model0 = new Model();
      boolean boolean0 = model0.loginValido("tG pF", "U#D9@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addVoluntario("", 3.6226202913901835, 3.6226202913901835, 9, true);
      assertEquals("v1", string0);
      
      boolean boolean0 = model0.loginValido("v1", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Model model0 = new Model();
      String string0 = model0.addUtilizador("", (-1.0), (-1.0));
      assertEquals("u1", string0);
      
      boolean boolean0 = model0.loginValido("u1", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Model model0 = new Model();
      boolean boolean0 = model0.loginValido("u1", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Model model0 = new Model();
      boolean boolean0 = model0.loginValido("v", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.utilizadorAceitaEncomenda("t", "`Y:dIyO#XaM4", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // `Y:dIyO#XaM4
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Model model0 = new Model();
      model0.carregaLog();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Model model0 = new Model();
      Utilizador utilizador0 = model0.getUtilizador("");
      assertNull(utilizador0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getListaEncomendasPorClassificar(";");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Model model0 = new Model();
      List<Utilizador> list0 = model0.getTop10Utilizadores();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Model model0 = new Model();
      List<Loja> list0 = model0.getListaLojas();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Model model0 = new Model();
      List<Transportadora> list0 = model0.getTop10Transportadoras();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getListaEncomendasClassificadas("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Model model0 = new Model();
      // Undeclared exception!
      try { 
        model0.getListaEncomendasPorAceitar("[sfFd~As.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("MVC.Models.Model", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.gravaEstado();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Model model0 = new Model();
      try { 
        model0.carregaEstado();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
